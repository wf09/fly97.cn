<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人随想</title>
  
  
  <link href="https://www.fly97.cn/atom.xml" rel="self"/>
  
  <link href="https://www.fly97.cn/"/>
  <updated>2021-01-28T06:31:00.000Z</updated>
  <id>https://www.fly97.cn/</id>
  
  <author>
    <name>个人随想</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Zerotier搭建内网穿透服务</title>
    <link href="https://www.fly97.cn/p/how-to-use-Zerotier/"/>
    <id>https://www.fly97.cn/p/how-to-use-Zerotier/</id>
    <published>2021-01-28T06:31:00.000Z</published>
    <updated>2021-01-28T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Zerotier？</p><p>ZeroTier将整个世界转变为单个数据中心或云区域。像将所有设备，虚拟机和应用程序都插入同一交换机一样，将它们联网。</p><p>本文主要介绍如何使用Zerotier搭建内网穿透服务。</p><a id="more"></a><p>有两种连接方式，一种是创建自己管理的虚拟局域网，一种是加入别人已经建立的虚拟局域网。这里先说第一种。</p><h4 id="创建账号">创建账号</h4><p>https://www.zerotier.com/，点击<code>Sign up</code>.</p><p><img src="https://ftp.fly97.cn/image/image-20210128181221059.png" /></p><p>根据自己需要，选择注册方式。</p><p><img src="https://ftp.fly97.cn/image/image-20210128181326421.png" /></p><h4 id="创建网络">创建网络</h4><p><img src="https://ftp.fly97.cn/image/image-20210128181610919.png" /></p><p>点击 <code>Create A Network</code>，创建自己管理的虚拟局域网。</p><p><img src="https://ftp.fly97.cn/image/image-20210128181706204.png" /></p><p>创建成功以后会得到<code>Network ID</code>。点击网络ID，进入管理界面。</p><p><img src="https://ftp.fly97.cn/image/image-20210128181808319.png" /></p><p>此时虚拟局域网内还没有设备，需要终端加入该网络。</p><h4 id="加入网络">加入网络</h4><p><img src="https://ftp.fly97.cn/image/image-20210128181920181.png" /></p><p>点击<code>Download</code>，进入下载页面。</p><p><img src="https://ftp.fly97.cn/image/image-20210128181957790.png" /></p><p>根据自己的设备类型选择安装包。这里以Windows为例。</p><p><img src="https://ftp.fly97.cn/image/image-20210128182051328.png" alt="image-20210128182051328" style="zoom:50%;" /></p><p>等待下载完成，然后安装。</p><p><img src="https://ftp.fly97.cn/image/image-20210128182357823.png" alt="image-20210128182357823" style="zoom:50%;" /></p><p>打开以后会默认在任务栏运行。</p><figure><img src="https://ftp.fly97.cn/image/image-20210128182448852.png" alt="image-20210128182448852" /><figcaption>image-20210128182448852</figcaption></figure><p>右键选择<code>Join a network</code>。</p><p><img src="https://ftp.fly97.cn/image/image-20210128182523631.png" alt="image-20210128182523631" style="zoom:50%;" /></p><p>输入先前生成的网络ID，点击<code>Join</code>。其他选择默认设置即可。</p><p><img src="https://ftp.fly97.cn/image/image-20210128182553099.png" alt="image-20210128182553099" style="zoom: 67%;" /></p><p>稍后片刻，返回到管理页面，允许自己的电脑加入该网络，即✔对应的设备。</p><p><img src="https://ftp.fly97.cn/image/image-20210128182844550.png" /></p><p>得到虚拟网络的ip地址，之后再将另一个设备加入，就可以愉快的链接啦。</p><p><img src="https://ftp.fly97.cn/image/image-20210128183032664.png" /></p><h4 id="未完待续....">未完待续....</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是Zerotier？&lt;/p&gt;
&lt;p&gt;ZeroTier将整个世界转变为单个数据中心或云区域。像将所有设备，虚拟机和应用程序都插入同一交换机一样，将它们联网。&lt;/p&gt;
&lt;p&gt;本文主要介绍如何使用Zerotier搭建内网穿透服务。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Zerotier" scheme="https://www.fly97.cn/tags/Zerotier/"/>
    
  </entry>
  
  <entry>
    <title>记MT7621平台刷入OpenWRT</title>
    <link href="https://www.fly97.cn/p/how-to-config-OpenWRT/"/>
    <id>https://www.fly97.cn/p/how-to-config-OpenWRT/</id>
    <published>2021-01-23T06:31:00.000Z</published>
    <updated>2021-01-23T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是OpenWRT？</p><a id="more"></a><hr /><h3 id="安装luci相关">安装luci相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install luci luci-base luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure><h3 id="开启sftp">开启sftp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install vsftpd openssh-sftp-server</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vsftpd enable</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vsftpd start</span><br></pre></td></tr></table></figure><h3 id="opkg-腾讯源">opkg 腾讯源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;opkg&#x2F;distfeeds.conf</span><br></pre></td></tr></table></figure><p>写入以下文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;gz openwrt_core https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;targets&#x2F;ramips&#x2F;mt7621&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_base https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;base</span><br><span class="line">src&#x2F;gz openwrt_packages  https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_luci https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;luci</span><br><span class="line">src&#x2F;gz openwrt_routing https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;routing</span><br><span class="line">src&#x2F;gz openwrt_freifunk https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;freifunk</span><br><span class="line">src&#x2F;gz openwrt_telephony https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;telephony</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="luci禁用缓存">luci禁用缓存</h3><p>编辑/etc/config/luci</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config internal &#39;ccache&#39;</span><br><span class="line">        option enable &#39;0&#39;</span><br></pre></td></tr></table></figure><p>重启即可</p><h3 id="扩容root分区">扩容root分区</h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install block-mount kmod-fs-ext4 kmod-usb-storage kmod-usb-ohci kmod-usb-uhci e2fsprogs fdisk</span><br></pre></td></tr></table></figure><p>查看sd卡信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block info</span><br></pre></td></tr></table></figure><p>有类似回显，其中<code>/dev/mmcblk0p1</code>就是sd卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dev&#x2F;mtdblock5: UUID&#x3D;&quot;d1f1302b-91ce24ca-2c74336e-eea51b51&quot; VERSION&#x3D;&quot;4.0&quot; MOUNT&#x3D;&quot;&#x2F;rom&quot; TYPE&#x3D;&quot;squashfs&quot;</span><br><span class="line">&#x2F;dev&#x2F;mtdblock6: MOUNT&#x3D;&quot;&#x2F;overlay&quot; TYPE&#x3D;&quot;jffs2&quot;</span><br><span class="line">&#x2F;dev&#x2F;mmcblk0p1: UUID&#x3D;&quot;746ffc51-1f29-2646-b2cb-fc2c03fe3c1a&quot; LABEL&#x3D;&quot;sdcard&quot; VERSION&#x3D;&quot;1.0&quot; TYPE&#x3D;&quot;ext4&quot;</span><br></pre></td></tr></table></figure><p>格式化内存卡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/mmcblk0p1</span><br></pre></td></tr></table></figure><p>将下面的DEVICE换成你的sd卡分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=<span class="string">&quot;/dev/mmcblk0p1&quot;</span></span><br><span class="line"><span class="built_in">eval</span> $(block info <span class="string">&quot;<span class="variable">$&#123;DEVICE&#125;</span>&quot;</span> | grep -o -e <span class="string">&quot;UUID=\S*&quot;</span>)</span><br><span class="line">uci -q delete fstab.overlay</span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay=<span class="string">&quot;mount&quot;</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.uuid=<span class="string">&quot;<span class="variable">$&#123;UUID&#125;</span>&quot;</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.target=<span class="string">&quot;/overlay&quot;</span></span><br><span class="line">uci commit fstab</span><br></pre></td></tr></table></figure><p>转移数据</p><p>如有报错请先查看否自动挂载了sd卡，挂载sd卡时也可能出现如下报错，实测不影响。</p><p>报错信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@GL-MT1300:~<span class="comment"># mount /dev/mmcblk0p1 /mnt/</span></span><br><span class="line">NTFS signature is missing.</span><br><span class="line">Failed to mount <span class="string">&#x27;/dev/mmcblk0p1&#x27;</span>: Invalid argument</span><br><span class="line">The device <span class="string">&#x27;/dev/mmcblk0p1&#x27;</span> doesn<span class="string">&#x27;t seem to have a valid NTFS.</span></span><br><span class="line"><span class="string">Maybe the wrong device is used? Or the whole disk instead of a</span></span><br><span class="line"><span class="string">partition (e.g. /dev/sda, not /dev/sda1)? Or the other way around?</span></span><br></pre></td></tr></table></figure><p>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;mmcblk0p1 &#x2F;mnt</span><br><span class="line">cp -f -a &#x2F;overlay&#x2F;. &#x2F;mnt</span><br><span class="line">umount &#x2F;mnt</span><br></pre></td></tr></table></figure><p>然后重启</p><p>扩展分区前</p><figure><img src="https://ftp.fly97.cn/image/image-20210122191844339.png" alt="image-20210122191844339" /><figcaption>image-20210122191844339</figcaption></figure><p>扩展分区后</p><figure><img src="https://ftp.fly97.cn/image/image-20210122191907269.png" alt="image-20210122191907269" /><figcaption>image-20210122191907269</figcaption></figure><h3 id="单独编译openwrt-ipk">单独编译openwrt ipk</h3><p>先执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig </span><br></pre></td></tr></table></figure><p>然后选中相关组件</p><p>再执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make package&#x2F;feeds&#x2F;luci&#x2F;luci-base&#x2F;compile -j1 V&#x3D;s</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是OpenWRT？&lt;/p&gt;</summary>
    
    
    
    
    <category term="MT7621" scheme="https://www.fly97.cn/tags/MT7621/"/>
    
    <category term="OpenWRT" scheme="https://www.fly97.cn/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>ssh-genkey参数</title>
    <link href="https://www.fly97.cn/p/ssh-genkey/"/>
    <id>https://www.fly97.cn/p/ssh-genkey/</id>
    <published>2021-01-23T06:29:00.000Z</published>
    <updated>2021-01-23T06:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是ssh-genkey？</p><p>ssh 公钥认证是ssh认证的方式之一。通过公钥认证可实现ssh免密码登陆，git的ssh方式也是通过公钥进行认证的。</p><p>在用户目录的home目录下，有一个<code>.ssh</code>的目录，和当前用户ssh配置认证相关的文件，几乎都在这个目录下。</p><p><code>ssh-keygen</code> 可用来生成ssh公钥认证所需的公钥和私钥文件。</p><a id="more"></a><h2 id="常用命令">常用命令</h2><h3 id="生成密钥对">生成密钥对</h3><p>默认生成 2048 位 RSA 密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>生成 4096 位 RSA 密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure><p>生成 521 位 ECDSA 密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa -b 521</span><br></pre></td></tr></table></figure><h3 id="私钥生成公钥">私钥生成公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -y -f [private-key-path] &gt; [output-path]</span><br></pre></td></tr></table></figure><p>比如，有一个文件名为 <code>id_rsa</code> 私钥，想用它生成 <code>id_rsa.pub</code> 公钥</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是ssh-genkey？&lt;/p&gt;
&lt;p&gt;ssh 公钥认证是ssh认证的方式之一。通过公钥认证可实现ssh免密码登陆，git的ssh方式也是通过公钥进行认证的。&lt;/p&gt;
&lt;p&gt;在用户目录的home目录下，有一个&lt;code&gt;.ssh&lt;/code&gt;的目录，和当前用户ssh配置认证相关的文件，几乎都在这个目录下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; 可用来生成ssh公钥认证所需的公钥和私钥文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ssh-genkey" scheme="https://www.fly97.cn/tags/ssh-genkey/"/>
    
  </entry>
  
  <entry>
    <title>Proxmox VE显卡直通</title>
    <link href="https://www.fly97.cn/p/pve-pci-passthrough/"/>
    <id>https://www.fly97.cn/p/pve-pci-passthrough/</id>
    <published>2021-01-12T05:21:00.000Z</published>
    <updated>2021-01-12T05:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是PVE？</p><p>Proxmox VE是一个既可以运行虚拟机也可以运行容器的虚拟化平台。Proxmox VE基于Debian Linux 开发，而且完全开源。处于灵活性的考虑，Proxmox VE同时支持两种虚拟化技术：KVM虚拟机和LXC容器。以下操作基于KVM虚拟机。</p><a id="more"></a><p><strong>任务背景：</strong>实验室有一台闲置的服务器，配置是64GB内存，10GB NVIDIA RTX 2080 Ti 显卡，i9-10900K 20核CPU。组内有师姐需要跑深度学习代码，而师兄的项目需要在服务器上运行数据库。为了实现数据隔离（生产环境不影响开发环境），考虑了一下两种方案：</p><p>1.Docker方案。服务器装ubuntu系统，每个任务运行一个docker 容器。优点是运行任务简单，直接<code>docker pull</code> 相应的容器即可。缺点对于不熟悉docker运维的人来说，维护相对复杂，有些任务需要持久化，需要将不同容器的不同目录映射到ubuntu下的目录。这样无法实现数据隔离，违背了初衷，而且无法实现<code>ip</code>直接访问，需要设置端口映射。遂放弃。</p><p>2.PVE-KVM方案。宿主机安装基于<code>debian</code>的<code>Proxmox VE</code>操作系统，不同的任务创建不同的客户机，根据<code>VM ID</code>和<code>ip</code>区分客户机。缺点是配置复杂。<strong><font color="red">不过生命在于折腾，生命不止，折腾不息。</font></strong></p><h4 id="准备工作">准备工作</h4><p>检查CPU是否支持VT-d ： https://ark.intel.com/content/www/cn/zh/ark.html</p><p><img src="https://ftp.fly97.cn/image/image-20210112135114468.png" /></p><h4 id="创建虚拟机">创建虚拟机</h4><p>千万注意不要设置自启动！！</p><p><img src="https://ftp.fly97.cn/image/image-20210112135351055.png" /></p><p>选择自己上传的系统镜像，这里以Ubuntu 2004为例。</p><p><img src="https://ftp.fly97.cn/image/image-20210112135506814.png" /></p><p>设置系统选项，注意使用<font color="red"><strong>EFI模式</strong></font></p><p><img src="https://ftp.fly97.cn/image/image-20210112140758741.png" /></p><p>选择CPU时，请根据你的CPU核心数选择。类别选择host。此种模式下客户机下可以看到当前CPU的型号，同时尽量保证虚拟机内的CPU指令集和宿主机内一致。</p><p><img src="https://ftp.fly97.cn/image/image-20210112140906881.png" /></p><p><strong>网络选择：</strong>一般情况下选择默认即可。默认是网桥接入。网桥相当于一个软件实现的物理交换机。所有虚拟机共享一个网桥。网桥接入模式下，可以在上一级网关设备查看当前客户机的IP地址。</p><p><img src="https://ftp.fly97.cn/image/image-20210112141534116.png" /></p><p>确认设置，<strong>先不要开启虚拟机</strong>。</p><p><img src="https://ftp.fly97.cn/image/image-20210112141614131.png" /></p><h4 id="配置显卡直通">配置显卡直通</h4><p>首先编辑GRUB配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/default/grub</span><br></pre></td></tr></table></figure><p>开启开启IOMMU支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet intel_iommu&#x3D;on video&#x3D;efifb:off&quot;</span><br></pre></td></tr></table></figure><p>如果是AMD的CPU：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet amd_iommu&#x3D;on video&#x3D;efifb:off&quot;</span><br></pre></td></tr></table></figure><p>我是Intel的CPU，因此修改为：</p><p><img src="https://ftp.fly97.cn/image/image-20210112142014140.png" /></p><p>更新GRUB：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>添加所需的系统模块（驱动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_iommu_type1&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_pci&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_virqfd&quot;</span> &gt;&gt; /etc/modules</span><br></pre></td></tr></table></figure><p>接着添加模块（驱动）黑名单，即让GPU设备在下次系统启动之后不使用这些驱动，把设备腾出来给<code>vfio</code>驱动用：</p><p>N卡/A卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist nouveau&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist nvidiafb&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist radeon&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br></pre></td></tr></table></figure><p>如果是N卡还需要加入下面的配置到kvm.conf（据老外说是避免一些莫名其妙的错误）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;options vfio_iommu_type1 allow_unsafe_interrupts&#x3D;1&quot; &gt; &#x2F;etc&#x2F;modprobe.d&#x2F;iommu_unsafe_interrupts.conf</span><br><span class="line">echo &quot;options kvm ignore_msrs&#x3D;1&quot; &gt; &#x2F;etc&#x2F;modprobe.d&#x2F;kvm.conf</span><br></pre></td></tr></table></figure><p>更新内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启上来之后检查模块是否正常加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep vfio</span><br></pre></td></tr></table></figure><p>成功的话有类似回显：</p><p><img src="https://ftp.fly97.cn/image/image-20210112142429876.png" /></p><p>查看GPU设备ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -nn | grep VGA</span><br></pre></td></tr></table></figure><p>会有类似的回显：</p><p><img src="https://ftp.fly97.cn/image/image-20210112142511212.png" /></p><p>再执行下面的命令<strong>(01:00.0请替换成你的显卡ID)</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -vvv -s 01:00.0</span><br></pre></td></tr></table></figure><p>会有类似的回显：</p><p><img src="https://ftp.fly97.cn/image/image-20210112152426155.png" /></p><p><img src="https://ftp.fly97.cn/image/image-20210112152400447.png" /></p><p>现在把需要直通给虚拟机的设备ID写到vfio.conf内，注意这次这里的ID不是01:00.0而是自己查看自己设备的ID，ID查看在上面回显里：</p><p><img src="https://ftp.fly97.cn/image/image-20210112152916014.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;options vfio-pci ids=10de:1e07&quot;</span> &gt;&gt; /etc/modprobe.d/vfio.conf</span><br></pre></td></tr></table></figure><p>然后应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br><span class="line">update-initramfs</span><br></pre></td></tr></table></figure><h4 id="更改虚拟机主机类型">更改虚拟机主机类型</h4><p>其中100 是VM ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm set 100 -machine pc-q35-3.1</span><br></pre></td></tr></table></figure><h4 id="添加显卡">添加显卡</h4><p>添加PCI设备，注意ID要选择你的电脑对应的显卡ID。注意不要添加成其他设备，如Audio device等。</p><p><img src="https://ftp.fly97.cn/image/image-20210112153802857.png" /></p><p><img src="https://ftp.fly97.cn/image/image-20210112154050976.png" /></p><h4 id="安装操作系统">安装操作系统</h4><p>此过程略</p><h4 id="伪装cpu">伪装CPU</h4><p>由于NVIDIA官方限制在虚拟机中使用显卡，通过修改CPU类型，可以达到欺骗NVIDIA显卡驱动的目的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pve/qemu-server/&lt;你的虚拟机的ID&gt;.conf</span><br></pre></td></tr></table></figure><p>找到CPU那一行，删掉，然后改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cpu: host,hidden&#x3D;1,flags&#x3D;+pcid</span><br><span class="line">args: -cpu &#39;host,+kvm_pv_unhalt,+kvm_pv_eoi,hv_vendor_id&#x3D;NV43FIX,kvm&#x3D;off&#39;</span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://ftp.fly97.cn/image/image-20210112154651328.png" /></p><h4 id="安装显卡驱动">安装显卡驱动</h4><p>以下操作是在<font color="red">客户机</font>上完成的，根据显卡选择合适的驱动安装。</p><p><img src="https://ftp.fly97.cn/image/image-20210112155127152.png" /></p><p>安装完毕，重启客户机。执行一下命令查看驱动是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>有下图所示回显说明安装成功：</p><p><img src="https://ftp.fly97.cn/image/image-20210112155315385.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是PVE？&lt;/p&gt;
&lt;p&gt;Proxmox VE是一个既可以运行虚拟机也可以运行容器的虚拟化平台。Proxmox VE基于Debian Linux 开发，而且完全开源。处于灵活性的考虑，Proxmox VE同时支持两种虚拟化技术：KVM虚拟机和LXC容器。以下操作基于KVM虚拟机。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PVE" scheme="https://www.fly97.cn/tags/PVE/"/>
    
    <category term="Proxmox VE" scheme="https://www.fly97.cn/tags/Proxmox-VE/"/>
    
  </entry>
  
  <entry>
    <title>Jetson Xavier 开发实录</title>
    <link href="https://www.fly97.cn/p/How-to-use-Jetson-Xavier/"/>
    <id>https://www.fly97.cn/p/How-to-use-Jetson-Xavier/</id>
    <published>2020-12-07T10:51:00.000Z</published>
    <updated>2020-12-07T10:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>最近实验室买了两块嵌入式NVIDIA Jetson Xavie NX 开发板，学长拿来让我折腾下，遂有了这篇文章。</p><p><strong>关键词：</strong>Jetson，NVIDIA，CUDA</p><a id="more"></a><h3 id="介绍">介绍</h3><p>略</p><h3 id="制作启动盘">制作启动盘</h3><p>NVIDIA Jetson Xavie NX镜像下载地址：https://developer.nvidia.com/zh-cn/embedded/downloads</p><p>板子使用的是SD卡作为引导盘和存储盘的，首先要格式化内存卡。使用<strong>SD Card Formatter</strong>格式化内存卡。<a href="https://www.sdcard.org/downloads/formatter/eula_windows/">SD Card Formatter下载地址</a></p><p>格式化时注意<strong>盘符</strong>，随后点击<strong>Format</strong>.</p><h4 id="烧录镜像到内存卡">烧录镜像到内存卡</h4><p>使用<strong>balenaEtcher</strong>软件烧录镜像。下载地址：https://www.balena.io/etcher/</p><p>选择下载好的<strong>jetson-nx-jp441-sd-card-image</strong>文件，点击Flash.</p><p>刷写完以后会有一个验证数据的操作，不建议跳过。</p><p>稍后片刻，等待完成。</p><h3 id="点亮主机">点亮主机</h3><p>把SD卡插入卡槽，将HDMI线连接到屏幕上，插入鼠标和键盘，启动电源。</p><h3 id="初始配置">初始配置</h3><h4 id="更改apt源">更改apt源</h4><p>感谢<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像</a>对开源软件的大力支持。</p><p>备份原有源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure><p>将以下内容粘贴到终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h4 id="风扇控制">风扇控制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 255 &gt; /sys/devices/pwm-fan/target_pwm</span><br><span class="line"><span class="comment">#范围0-255,风扇默认是不开的</span></span><br></pre></td></tr></table></figure><p>重启以后风扇是不转的，所以需要设置开机运行： 创建<code>/etc/rc.local</code>，并添加如下内容： （注：系统启动的时候会执行<code>/etc/rc.local</code>，如果已存在rc.local，则在<code>exit 0</code>之前加入那3句命令即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sleep 10</span><br><span class="line">sudo /usr/bin/jetson_clocks</span><br><span class="line">sudo sh -c <span class="string">&#x27;echo 255 &gt; /sys/devices/pwm-fan/target_pwm&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>添加执行权限： <code>sudo chmod 755 /etc/rc.local</code></p><p>以后重启就会自动开启最大性能并启动风扇了。</p><h4 id="远程桌面">远程桌面</h4><p>开机以后SSH默认是开启的。这里使用Nomachine作为远程桌面软件。Nomachine的专有NX协议在高延迟低带宽的链路上提供了近乎本地速度的响应能力。</p><p><a href="https://fly97.coding.net/p/github-projects/d/nomachine/git/raw/master/nomachine_6.12.3_5_arm64.deb">ARM64客户端下载链接</a></p><p><a href="https://fly97.coding.net/p/github-projects/d/nomachine/git/raw/master/nomachine_6.12.3_7.exe">Windows客户端下载链接</a></p><h4 id="设置分辨率">设置分辨率</h4><p>如果没有显示器连接，默认VNC 连接后的分辨率为640x480 ，将以下内容添加到<code>/etc/X11/xorg.conf</code>文件，将其设置为默认VNC分辨率设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Section <span class="string">&quot;Screen&quot;</span></span><br><span class="line">   Identifier    <span class="string">&quot;Default Screen&quot;</span></span><br><span class="line">   Monitor       <span class="string">&quot;Configured Monitor&quot;</span></span><br><span class="line">   Device        <span class="string">&quot;Tegra0&quot;</span></span><br><span class="line">   SubSection <span class="string">&quot;Display&quot;</span></span><br><span class="line">       Depth    24</span><br><span class="line">       Virtual 1024 768 <span class="comment"># Modify the resolution by editing these values</span></span><br><span class="line">   EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><h4 id="快捷设置代理">快捷设置代理</h4><p>在<code>/home</code>目录下，把一下内容加入到<code>.bashrc</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;export all_proxy=http://127.0.0.1:10809</span></span><br><span class="line"><span class="string">export https_proxy=http://127.0.0.1:10809</span></span><br><span class="line"><span class="string">export socks_proxy=socks5://127.0.0.1:10808&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;unset all_proxy https_proxy socks_proxy&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="安装jtop">安装Jtop</h4><p>Jtop（一个系统监视实用程序，可在终端上运行，并实时查看和控制 NVIDIA Jetson的状态 ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install jetson-stats </span><br><span class="line">sudo jtop</span><br></pre></td></tr></table></figure><h4 id="查看当前运行功率">查看当前运行功率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询当前状态</span></span><br><span class="line">sudo nvpmodel --query</span><br><span class="line"><span class="comment">#切换状态</span></span><br><span class="line">sudo nvpmodel -m <span class="comment">#Mode_ID</span></span><br><span class="line"><span class="comment">#查看处理器状态</span></span><br><span class="line">sudo jetson_clocks --show</span><br><span class="line"><span class="comment">#如果jetson_clocks 后没有参数，则直接开启static MAX 模式</span></span><br><span class="line">sudo jetson=_clocks</span><br></pre></td></tr></table></figure><h4 id="安装pytorch">安装Pytorch</h4><p><a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-7-0-now-available/72048">下载地址</a></p><p><a href="https://wf09.coding.net/p/jetson/d/Pytorch/git/raw/master/torch-1.7.0-cp36-cp36m-linux_aarch64.whl">备用地址</a></p><p>根据自己的Python环境下载whl文件.这里是Python 3.6.9，安装的版本是PyTorch v1.7。</p><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip libopenblas-base libopenmpi-dev </span><br><span class="line">pip3 install Cython</span><br><span class="line">pip3 install numpy torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure><h5 id="安装torchvision">安装torchvision</h5><p>以<strong>v0.8.1</strong>为例.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">git <span class="built_in">clone</span> --branch v0.8.1 https://e.coding.net/wf09/github-projects/torchvision.git   <span class="comment"># see below for version of torchvision to download</span></span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=v0.8.1  <span class="comment"># where 0.x.0 is the torchvision version  </span></span><br><span class="line">sudo python setup.py install     <span class="comment"># use python3 if installing for Python 3.6</span></span><br><span class="line"><span class="built_in">cd</span> ../  <span class="comment"># attempting to load torchvision from build dir will result in import error</span></span><br><span class="line">pip install <span class="string">&#x27;pillow&lt;7&#x27;</span> <span class="comment"># always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6</span></span><br></pre></td></tr></table></figure><p>对应版本：</p><ul><li>PyTorch v1.0 - torchvision v0.2.2</li><li>PyTorch v1.1 - torchvision v0.3.0</li><li>PyTorch v1.2 - torchvision v0.4.0</li><li>PyTorch v1.3 - torchvision v0.4.2</li><li>PyTorch v1.4 - torchvision v0.5.0</li><li>PyTorch v1.5 - torchvision v0.6.0</li><li>PyTorch v1.6 - torchvision v0.7.0</li><li>PyTorch v1.7 - torchvision v0.8.1</li></ul><h4 id="cuda">CUDA</h4><p>官网最新镜像文件自带cuda 版本为10.2，OpenCV4</p><p>将以下命令写入<code>~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-10.2</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-10.2/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-10.2/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>退出后保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>返回的文字如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_21:14:42_PDT_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure><h4 id="opencv">OpenCV</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv4 --modversion</span><br></pre></td></tr></table></figure><p>返回的文字如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.1.1</span><br></pre></td></tr></table></figure><h4 id="cudnn">cuDNN</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/cudnn_samples_v8/mnistCUDNN</span><br><span class="line">sudo make</span><br><span class="line">sudo chmod a+x mnistCUDNN</span><br><span class="line">./mnistCUDNN</span><br></pre></td></tr></table></figure><h4 id="更改桌面">更改桌面</h4><p>默认的桌面环境是Unity，此次更改成更轻量的<code>ubuntu-mate</code>.</p><p>注意：安装过程中请勿卸载现有的桌面登录管理器，以免出现无法登录进系统的尴尬。</p><p>安装更轻量的桌面登录管理器<strong>LightDM</strong>：LightDM是2010年开始的新项目，且被设计为轻量、小巧、快速。相较于GDM-GTK、KDM-Qt、LightDM实际上与界面无关，它仅支持本地图形界面获得最好兼容性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lightdm</span><br></pre></td></tr></table></figure><p>安装<code>ubuntu-mate-destop</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ubuntu-mate-core ubuntu-mate-desktop</span><br></pre></td></tr></table></figure><h5 id="lightdm设置自动登录">lightdm设置自动登录</h5><p>设置<strong>autologin-user</strong>来设置系统启动时自动登录某个帐户。设置<strong>autologin-user-timeout</strong>限制用户在设定秒内如果没有自动登录则不能自动登录。</p><p>编辑以下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;lightdm&#x2F;lightdm.conf </span><br></pre></td></tr></table></figure><p>设置<strong>autologin-user</strong>来设置系统启动时自动登录某个帐户。设置<strong>autologin-user-timeout</strong>限制用户在设定秒内如果没有自动登录则不能自动登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">autologin-user&#x3D;username</span><br><span class="line">autologin-user-timeout&#x3D;delay</span><br></pre></td></tr></table></figure><h5 id="lightdm修改默认会话"><strong>lightdm修改默认会话</strong></h5><p>默认会话设置保存在<strong>/usr/share/lightdm/lightdm.conf.d</strong>会话包中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">user-session&#x3D;name</span><br></pre></td></tr></table></figure><p>其中name代表<strong>/usr/share/xsessions/*.desktop</strong>中<name>.desktop。</p><p>转载自：https://www.cnblogs.com/EasonJim/p/7128317.html</p><h4 id="sudo无需输入密码">sudo无需输入密码</h4><p>切换到<code>root</code>用户，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>在最后一行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;用户名&gt; ALL&#x3D;(ALL) NOPASSWD: ALL </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;最近实验室买了两块嵌入式NVIDIA Jetson Xavie NX 开发板，学长拿来让我折腾下，遂有了这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;Jetson，NVIDIA，CUDA&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jetson" scheme="https://www.fly97.cn/tags/Jetson/"/>
    
    <category term="NVIDIA" scheme="https://www.fly97.cn/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降法</title>
    <link href="https://www.fly97.cn/p/What&#39;s-the-Gradient-descent/"/>
    <id>https://www.fly97.cn/p/What&#39;s-the-Gradient-descent/</id>
    <published>2020-12-07T10:51:00.000Z</published>
    <updated>2020-12-07T10:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>梯度下降法，是当今最流行的最优化（optimization）算法，亦是至今最常用的最优化神经网络的方法。与此同时，最新的深度学习程序库都包含了各种优化梯度下降的算法（可以参见如 Pytorch 程序库的说明文档）。但他们的算法则不被公开，都作为黑箱优化器被使用，这也就是为什么它们的优势和劣势往往难以被实际地解释。</p><p><strong>关键词：</strong>Deep Learning</p><a id="more"></a><h3 id="核心">核心</h3><p>梯度下降法的核心，是最小化目标函数。方法是在每一次迭代中，对每个变量，按照目标函数在该变量梯度的相反方向，更新对应的参数值，其中，学习率决定了函数到达局部最小值的迭代次数。<strong>我们在目标函数的超平面上，沿着斜率下降的方向前进，直到我们遇到了超平面构成的"谷底"。</strong></p><h3 id="梯度下降法的变体">梯度下降法的变体</h3><p>梯度下降法有三种变体，它们的区别在于用多少数据来计算目标函数的梯度。根据数据量的不同，我们需要权衡参数更新的准确性和执行一次所需要的时间。</p><h4 id="batch-gradient-descent-批量梯度下降">Batch gradient descent 批量梯度下降</h4><p>批量梯度下降又称<strong>Vanilla梯度下降法</strong>，也就是所谓的批量梯度下降法，在整个数据集上对每个参数求目标函数的偏导数。 <span class="math display">\[\theta=\theta-\eta{\nabla_\theta}J(\theta)\]</span> 翻译成白话文就是：用整个训练集计算目标函数的梯度参数。</p><p>由于我们需要计算整个数据集的梯度来执行一次更新，因此批量梯度下降可能非常缓慢。而且需要把数据集放入内存。批量梯度下降也不允许我们在线更新我们的的模型。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">    params = params - lr * params_grad</span><br></pre></td></tr></table></figure><p>对于预先定义的多个epoch，我们首先计算关于整个数据集的损失函数的梯度向量<code>param_grad</code>.当前的一些深度学习库提供了自动求导的函数，可以有效的计算一些参数梯度。</p><p>按照梯度的反方向更新参数，学习速率决定我们执行的更新的大小。保证了批梯度下降收敛于凸误差曲面的全局最小值和非凸曲面的全局最小值。</p><h4 id="stochastic-gradient-descent-随机梯度下降">Stochastic gradient descent 随机梯度下降</h4><p>相比之下，随机梯度下降(SGD)对每个训练示例和标号进行参数更新： <span class="math display">\[\theta=\theta-\eta{\nabla_\theta}J(\theta;x^{(i)};y^{(i)})\]</span> 批量梯度下降对大数据集会有一些冗余计算，因此它在每次参数更新前重新计算类似的梯度。</p><p><strong>随机梯度下降</strong>会以一个较大的方差执行频繁的更新，导致目标函数剧烈波动，如下图所示。</p><p><img src="https://ftp.fly97.cn/image/sgd_fluctuation.png" /></p><p>当批量梯度下降法收敛到参数的盆地时，SGD的波动一方面会使其跳跃到新的、可能的更好的局部极小值。另一方面，这最终会使让收敛到特定最小值的过程复杂化，因为该方法可能持续的波动而不停止。但是，当我们慢慢降低学习率时，SGD表现出了与批量梯度下降法相似的收敛过程，也就是说，对非凸函数和凸函数，必然会分别收敛到他们的极小值和最小值。</p><p>相比批量梯度下降法的代码，在如下的代码中，我们仅仅加入了一个循环，用以遍历所以的训练样本并求出相应的梯度值。值得注意的是，我们在每个阶段都要重新打乱训练数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">        params = params - lr * params_grad</span><br></pre></td></tr></table></figure><h4 id="mini-batch-gradient-descent-小批量梯度下降">Mini-batch gradient descent 小批量梯度下降</h4><p>小批量梯度下降具有以上两者的优点。在每次更新中，对<code>n</code>个样本构成的一批数据，计算损失函数，并对相应的参数求导： <span class="math display">\[\theta=\theta-\eta{\nabla_\theta}J(\theta;x^{(i:i+n)};y^{(i:i+n)})\]</span> 这种方法，1. 降低了参数更新的方差，使得收敛过程更加稳定；</p><pre><code>              2. ​  能够利用最新的深度学习程序库中高度优化的矩阵运算器，能够高效的求出每小批数据的梯度。通常一小批数据含有的样本数量在50至256之间，但对于不同的用途也会有所变化。例如，当你的显存不够时，就把`batch_size`调小。</code></pre><p>小批量梯度下降法，通常是我们训练神经网络的首选算法。同时，有时候我们也会使用<strong>随机梯度下降法</strong>，来称呼<strong>小批量梯度下降法</strong>。</p><p>在代码中，不再迭代每个示例，而是迭代大小为50的小批量样本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, batch, params) / batch_size</span><br><span class="line">        params = params - lr * params_grad</span><br></pre></td></tr></table></figure><h3 id="sgd的缺点">SGD的缺点</h3><p>然而，小批量梯度下降法并不能保证良好地收敛，仍然存在一些问题。</p><p>1.选择一个适当的学习率是一个难题太小的学习率会导致较慢的收敛速度，而太大的学习率则会阻碍收敛，并会引起损失函数在最小值处波动，甚至发散。 2. 学习率计划表(learning_rate_schedule)试图在训练过程中调整学习率，例如退火，即很具预先定义的计划表减少学习率，或当各时期之间的目标变换低于阈值时。但是，这些调度和阈值必须提前定义，因此无法适应数据集的特征。 3. 此外，我们对所有的参数都采用了相同的学习率。但如果我们的数据是稀疏的，同时特征有着不同的出现频率，那么我们不希望以相同的学习率来更新这些变量，我们希望对较少出现的特征有更大的学习率。 4. 会无数次的陷入最小值或<strong>鞍点</strong>。鞍点是在一个方向上斜率是正的、在一个方向上斜率是负的点。鞍点周围各个方向的梯度值都为0，所以<strong>SGD</strong>很难从这些鞍点中脱开。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;梯度下降法，是当今最流行的最优化（optimization）算法，亦是至今最常用的最优化神经网络的方法。与此同时，最新的深度学习程序库都包含了各种优化梯度下降的算法（可以参见如 Pytorch 程序库的说明文档）。但他们的算法则不被公开，都作为黑箱优化器被使用，这也就是为什么它们的优势和劣势往往难以被实际地解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;Deep Learning&lt;/p&gt;</summary>
    
    
    
    
    <category term="Deep Learning" scheme="https://www.fly97.cn/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>使用CLion开发Qt4</title>
    <link href="https://www.fly97.cn/p/How-To-Use-CLion-to-Develop-Qt4/"/>
    <id>https://www.fly97.cn/p/How-To-Use-CLion-to-Develop-Qt4/</id>
    <published>2020-11-29T07:00:00.000Z</published>
    <updated>2020-11-29T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>Qt 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。近期课程考核需要用到Qt，于是便有了这一篇文章。</p><p><strong>关键词：</strong>Qt，CLion，Mingw</p><a id="more"></a><h4 id="准备工作">准备工作</h4><ol type="1"><li>QT4.8.6安装包</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;Qt 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。近期课程考核需要用到Qt，于是便有了这一篇文章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;Qt，CLion，Mingw&lt;/p&gt;</summary>
    
    
    
    
    <category term="C++" scheme="https://www.fly97.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>线性回归中的基函数</title>
    <link href="https://www.fly97.cn/p/a-basis-function-in-linear-regression/"/>
    <id>https://www.fly97.cn/p/a-basis-function-in-linear-regression/</id>
    <published>2020-11-25T07:00:00.000Z</published>
    <updated>2020-11-25T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>最近再看<a href="https://www.zhihu.com/people/xpqiu">邱锡鹏</a>老师的《神经网络与深度学习》，学习过程中难免遇到问题。谨以此文作为记录，希望自己能坚持下去吧。</p><p><strong>关键词：</strong>线性回归，基函数</p><a id="more"></a><h4 id="线性基函数模型">线性基函数模型</h4><p>最简单的回归线性模型是输入变量的线性组合： <span class="math display">\[y(x,w) = w_0 + w_1x_1+ ... + w_Dx_D \tag{3.1}\]</span> 其中 <span class="math display">\[x = (x_1,...,x_D)^T\]</span> 这通常被叫做简单的线性回归。这个模型的关键属性是它是一个参数<span class="math inline">\(w_0,...,w_D\)</span>的一个线性函数，同时，它也是输入变量<span class="math inline">\(x_i\)</span>的一个线性函数，这给模型带来了<strong>极大的局限性</strong>。因此，我们将输入变量确定了的非线性函数进行线性组合来拓模型的类别： <span class="math display">\[y(x,w) = w_0 + \sum\limits_{j=1}^{M-1}w_j\phi_j(x) \tag{3.2}\]</span> 其中<span class="math inline">\(\phi_j(x)\)</span>被称为基函数。通过把下标<span class="math inline">\(j\)</span>的最大值记作<span class="math inline">\(M-1\)</span>，使得这个模型的参数总数为<span class="math inline">\(M\)</span>.</p><p>参数<span class="math inline">\(w_0\)</span>使得数据中可以存在任意的固定偏移，通常被称为偏置参数。这里请不要和统计观念下的偏置搞混淆。通常，定义一个额外的占位基函数是很方便的，以便把函数简化为： <span class="math display">\[y(x,w) = \sum\limits_{j=0}^{M-1}w_j\phi_j(x) = w^T\phi(x) \tag{3.3}\]</span> 其中<span class="math inline">\(w = (w_0,...,w_{M-1})^T , \phi = (\phi_0,...,\phi_{M-1})^T\)</span>。在很多模型识别的应用中，会在原始数据上应用固定形式的预处理或特征抽取。如果原始变量组成向量<span class="math inline">\(x\)</span>，那么特征可以表示为基函数<span class="math inline">\(\{\phi_j(x)\}\)</span>的项。</p><p>通过使用非线性的基函数，我们允许函数<span class="math inline">\(y(x,w)\)</span>是关于输入向量<span class="math inline">\(x\)</span>的非线性函数。由于式(3.2)是关于<span class="math inline">\(w\)</span>的线性函数，所以他被称为<font size="3" color="red">线性模型。</font>这种参数的线性性质极大地简化了这类模型的分析。不过，这也造成了一定的局限性。</p><p><font size="3" color="red">多项式拟合</font>也被称作多项式基函数是这类模型的一个特例，他有单个输入变量<span class="math inline">\(x\)</span>，基函数是<span class="math inline">\(x\)</span>的幂函数的形式，即<span class="math inline">\(\phi_j(x) = x^j\)</span>。多项式基函数的局限性是他们是输入变量的<strong>全局函数</strong>，所以一个区间内改变会影响所有区域。解决的办法是把输入空间切分成若干个区域，然后对于每个区域用不同的多项式函数拟合，这样的函数被称为<strong>样条函数</strong>。还有很多其他基函数的选择，如： <span class="math display">\[\phi_j(x) = exp\left\{-\frac{(x-\mu_j)^2}{2s^2}\right\} \tag{3.4}\]</span> 其中，<span class="math inline">\(\mu_j\)</span>控制着基函数在输入空间中的位置，参数<span class="math inline">\(s\)</span>控制着基函数的空间大小。这些通常被称为<font size="3" color="red">高斯基函数</font>。由于这些基函数会有一个调节参数<span class="math inline">\(w_j\)</span>相乘，所以标准化系数是不重要的。</p><h4 id="代码部分">代码部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multinomial_basis</span>(<span class="params">x, feature_num=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;多项式基函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">1</span>) <span class="comment"># shape(N, 1)</span></span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    feat = [x]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, feature_num+<span class="number">1</span>):</span><br><span class="line">        feat.append(x**i)</span><br><span class="line">    ret = np.concatenate(feat, axis = <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>输入<span class="math inline">\(x\)</span>是<code>numpy</code>的一维数组，使用 <code>np.expand_dims()</code> 函数将其扩展成大小为<code>(N，1)</code>向量。随后将矩阵包装到一个<code>list</code>里。然后将<span class="math inline">\(X^i\)</span>加入到<code>list</code>最后，循环10次，最后的得到的矩阵<strong>ret</strong>如下： <span class="math display">\[\begin{pmatrix} x^1 &amp; x^2 &amp; x^3 &amp; ... &amp;x^{10}  \\ \end{pmatrix}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_basis</span>(<span class="params">x, feature_num=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;高斯基函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    centers = np.linspace(<span class="number">0</span>, <span class="number">25</span>, feature_num)</span><br><span class="line">    width = <span class="number">1.0</span> * (centers[<span class="number">1</span>] - centers[<span class="number">0</span>])</span><br><span class="line">    x = np.expand_dims(x, axis = <span class="number">1</span>) <span class="comment"># shape(N, 1)</span></span><br><span class="line">    x = np.concatenate([x]*feature_num, axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    out = (x-centers)/width</span><br><span class="line">    ret = np.exp(<span class="number">-0.5</span> * out ** <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>首先确定高斯基函数的中心：在粗略估计了数据集的范围之后，在该范围内等分出若干点，点的数量由<code>feature_num</code>确定。等分的宽度记作<code>width</code>，然后将输入扩展成<code>(N，1)</code>向量，<code>[x]*feature_num</code>将扩展后的<code>(N，1)</code>向量先包装到一个<code>list</code>里，随后复制<code>feature_num</code>次。<code>np.concatenate()</code>将复制的若干个<code>list</code>按列堆叠起来，得到的<span class="math inline">\(x\)</span>的矩阵如下： <span class="math display">\[\begin{pmatrix} x &amp; x &amp; x &amp; ... &amp;x  \\ \end{pmatrix}\]</span> <code>centers</code>是一维数组，<code>x</code>是二维的矩阵。两个维度不同的numpy对象在做加减运算时，自动执行<font size="3" color="red">广播规则</font>。</p><h5 id="python中的广播规则">python中的广播规则</h5><p>举个例子：</p><p>假设<code>x</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[0, 0, 0, 0, 0],</span><br><span class="line">        [1, 1, 1, 1, 1],</span><br><span class="line">        [2, 2, 2, 2, 2],</span><br><span class="line">        [3, 3, 3, 3, 3],</span><br><span class="line">        [4, 4, 4, 4, 4]]</span><br></pre></td></tr></table></figure><p><code>centers</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 0.  ,  6.25, 12.5 , 18.75, 25.  ])</span><br></pre></td></tr></table></figure><p>在做<code>x-centers</code>运算时，首先要将<code>centers</code><strong>按行拓展</strong>到和<code>x</code>一样的维度，拓展后的<code>centers</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array([[ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ]]))</span><br></pre></td></tr></table></figure><p>扩展后的两个矩阵大小相等，这样就可以做加减法了。</p><p>最后，<code>out</code>等于<code>(x-centers)/width</code>，最后带入公式<span class="math inline">\((3.4)\)</span>，求得高斯基函数的输出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;最近再看&lt;a href=&quot;https://www.zhihu.com/people/xpqiu&quot;&gt;邱锡鹏&lt;/a&gt;老师的《神经网络与深度学习》，学习过程中难免遇到问题。谨以此文作为记录，希望自己能坚持下去吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;线性回归，基函数&lt;/p&gt;</summary>
    
    
    
    
    <category term="机器学习" scheme="https://www.fly97.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch中对图像的操作</title>
    <link href="https://www.fly97.cn/p/How-to-process-images-in-Pytorch/"/>
    <id>https://www.fly97.cn/p/How-to-process-images-in-Pytorch/</id>
    <published>2020-11-08T03:16:00.000Z</published>
    <updated>2020-11-08T03:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Pytorch中，数据加载可以通过自定义的数据集对象来实现。</p><a id="more"></a><h3 id="数据处理">数据处理</h3><h4 id="数据加载">数据加载</h4><p>在Pytorch中，数据加载可以通过自定义的数据集对象来实现。数据集对象被抽象为Dataset类，实现自定义的数据集需要继承Dataset，并实现两个Python魔法方法。</p><ul><li><code>__getitem__():返回一条数据或一个样本。obj[index]等价于obj.getitem__(index).</code></li><li><code>__len__():返回样本的数量.len(obj)等价于obj.__len__().</code></li></ul><p>这里我们以某学校结课项目为例，谈谈在PyTorch中处理图像的操作。</p><p><img src="https://ftp.fly97.cn/image/202011081130.png" style="zoom:50%;" /></p><p>第一步，首先要考虑的操作是将"绝缘子"文件夹下面的文件全部load到内存中，说干就干。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>(<span class="params">data.Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="comment"># 所有图片的绝对路径</span></span><br><span class="line">        <span class="comment"># 这里不实际加载图片, 只是指定路径</span></span><br><span class="line">        <span class="comment"># 当调用__getitem__才会真正读图片</span></span><br><span class="line">        self.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        img_path = self.imgs[index]</span><br><span class="line">        label = <span class="string">&#x27;jueyuanzi&#x27;</span>               <span class="comment">#这里的标签是随便指定的</span></span><br><span class="line">        pli_img = Image.open(img_path)</span><br><span class="line">        array = np.asarray(pli_img)</span><br><span class="line">        data = torch.from_numpy(array)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> len(self.imgs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dataset  = Data(<span class="string">&#x27;..\\绝缘子&#x27;</span>)</span><br><span class="line">img, label = dataset[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    print(img.size(), img.float().mean(), label)</span><br></pre></td></tr></table></figure><p>实验结果：</p><p><img src="https://ftp.fly97.cn/image/image-20201108113830607.png" /></p><p>通过上面的代码，我们学习了如何自定义自己的数据集，并可以依次获取。但是这里的数据不适合实际使用，其具有以下问题：</p><ol type="1"><li>返回的数据形状会因为样本的形状而变化，这里由于图片的大小是一致的，因此无需处理。<strong>但是如果每张图片的大小不一</strong>，返回的数据大小就会不一致，这对于需要取batch训练的神经网络来说非常不友好。</li><li>返回的样本数值较大，未归一化至<strong>[-1, 1]</strong>.</li></ol><p>针对上述问题，PyTorch提供了torchvision。它是一个视觉工具包，提供了很多视觉图像处理的工具，其中<code>tranforms</code>模块提供了对PIL Image和Tensor对象的常用操作。</p><p>对PIL Image 的常见操作如下：</p><ul><li>Resize：调整图片尺寸。</li><li>CenterCrop、RandCrop、RandomSizedCrop：裁剪图片。</li><li>Pad：填充。</li><li>ToTensor：将PIL Image对象转成Tensor，会自动将[0, 255]归一化至[0, 1]。</li></ul><p>对Tensor 的常见操作如下：</p><ul><li>Normalize：标准化，及减去均值，除以标准差。</li><li>ToPILImage：将Tensor转为PIL Image对象。</li></ul><p>如果对这些图片进行操作，可以通过Compose将这些操作拼接起来。请注意：这些操作帝国一后是以对象的形式存在，真正使用时需调用它的__call__方法，类似于nn.Module。具体实现请下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created on Sun Nov  8 10:05:04 2020</span><br><span class="line"></span><br><span class="line">@author: wf09</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import torch</span><br><span class="line">from torch.utils import data</span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from torchvision import utils</span><br><span class="line">from torchvision import transforms as T</span><br><span class="line"></span><br><span class="line">transform &#x3D; T.Compose([</span><br><span class="line">        T.Resize([375, 500]),   #缩放图片</span><br><span class="line">        T.CenterCrop([375, 500]), #从图片中间切出这个大小的图片</span><br><span class="line">        T.ToTensor(),             #将图片转换到Tensor, 归一化[0, 1]</span><br><span class="line">        T.Normalize(mean&#x3D;[.5, .5, .5], std &#x3D;[.5, .5, .5])  #标准化到[-1, 1]</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Data(data.Dataset):</span><br><span class="line">    def __init__(self, root, transforms&#x3D;None):</span><br><span class="line">        imgs &#x3D; os.listdir(root)</span><br><span class="line">        # 所有图片的绝对路径</span><br><span class="line">        # 这里不实际加载图片, 只是指定路径</span><br><span class="line">        # 当调用__getitem__才会真正读图片</span><br><span class="line">        self.imgs &#x3D; [os.path.join(root, img) for img in imgs]</span><br><span class="line">        self.transforms &#x3D; transforms</span><br><span class="line">        </span><br><span class="line">    def __getitem__(self, index):</span><br><span class="line">        img_path &#x3D; self.imgs[index]</span><br><span class="line">        label &#x3D; &#39;jueyuanzi&#39;</span><br><span class="line">#        pli_img &#x3D; Image.open(img_path)</span><br><span class="line">#        array &#x3D; np.asarray(pli_img)</span><br><span class="line">#        data &#x3D; torch.from_numpy(array)</span><br><span class="line">        data &#x3D; Image.open(img_path)</span><br><span class="line">        if self.transforms:</span><br><span class="line">            data &#x3D; self.transforms(data)</span><br><span class="line">        </span><br><span class="line">        return data, label</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.imgs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dataset  &#x3D; Data(&#39;..\\不同形态绝缘子&#39;, transform)</span><br><span class="line">img, label &#x3D; dataset[0]</span><br><span class="line"></span><br><span class="line">for img, label in dataset:</span><br><span class="line">    print(img.size(), img.float().mean(), label)</span><br><span class="line">    utils</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="未完待续">未完待续</h3><ul><li><input type="checkbox" disabled="" />如何将操作后的图片保存下来？</li><li><input type="checkbox" disabled="" />什么是Python中的魔法方法？</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Pytorch中，数据加载可以通过自定义的数据集对象来实现。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PyTorch" scheme="https://www.fly97.cn/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Python中的map函数</title>
    <link href="https://www.fly97.cn/p/how-map-functions-works-in-Python/"/>
    <id>https://www.fly97.cn/p/how-map-functions-works-in-Python/</id>
    <published>2020-11-08T03:16:00.000Z</published>
    <updated>2020-11-08T03:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python内建了map()函数。</p><a id="more"></a><p>Python内建了map()函数。</p><p>map函数接受了两个参数，一个是函数，一个是<strong>Iterable</strong>(可迭代对象)。map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><p>举个栗子，例如我们有一个函数f(x)=x^2，要把这个函数作用在一个list[1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map函数实现。</p><p>下面来看Python代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p><code>map()</code>传入的第一个参数是f，即函数对象本身。</p><p>返回结果r是一个<strong>Iterator</strong>(迭代器)，<strong>Iterator</strong>是一个<strong>惰性序列</strong>，因此通过<code>list()</code>函数让他把整个序列都计算出来并返回一个list。</p><p>那什么是惰性序列呢？首先我们要知道什么是惰性求值</p><p>引自维基百科：https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC</p><blockquote><p>在编程语言中，惰性求值又译为惰性计算、懒惰求值，也成为传需求调用。是一个计算机编程中的概念，目的是最小化计算机要做的工作。惰性求值的相反是及早求值，这是一个大多数编程所以拥有的普通计算方式。</p></blockquote><p>Python的惰性序列多指<strong>iterator</strong>，其特点如上文所述，具有惰性计算特点的序列被称为惰性序列。</p><p>我的理解：你不主动去遍历它，就不会计算其中元素的值。</p><p>如果你试图输出map对象，系统只会告诉你当前map对象在内存里的地址，而不会打印map对象自身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(r)</span><br><span class="line"><span class="comment">#&lt;map object at 0x7faa2ddd97c0&gt;</span></span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>继续说map函数。你可能会想，不需要map()函数，写一个循环，也可以计算出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">    L.append(f(n))</span><br><span class="line">print(L)</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>的确可以。但是，从上面的循环代码，能一眼看明白<strong>把f(x)作用在list的每一个元素并把结果生成一个新的list</strong>吗？</p><p>map作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x^2，还可以计算任意复杂的函数，比如，把这个list所有数字转成字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(map(str, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="comment">#[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><p>只需要一行代码。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python内建了map()函数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.fly97.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas学习小记(一)</title>
    <link href="https://www.fly97.cn/p/Pandas-learning-notes-01/"/>
    <id>https://www.fly97.cn/p/Pandas-learning-notes-01/</id>
    <published>2020-11-06T11:36:00.000Z</published>
    <updated>2020-11-06T11:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas是什么？</p><a id="more"></a><p>Pandas是一个强大的分析结构化数据的工具集；它的使用基础是Numpy（提供高性能的矩阵运算）；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p><h3 id="安装pandas">安装Pandas</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pandas -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h3 id="pandas简介">Pandas简介</h3><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series">Series</a>（一维数据）与 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a>（二维数据），这两种数据结构足以<strong>处理金融、统计、社会科学、工程</strong>等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/">NumPy</a> 开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li><li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li><li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li><li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li><li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 / 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：<strong>数据整理与清洗、数据分析与建模、数据可视化与制表</strong>，Pandas 是处理数据的理想工具。</p><p>其它说明：</p><ul><li>Pandas 速度<strong>很快</strong>。Pandas 的很多底层算法都用 <a href="https://cython.org/">Cython</a> 优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li><li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html">statsmodels</a> 的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li><li>Pandas 已广泛应用于金融领域</li></ul><h3 id="pandas中的数据结构">Pandas中的数据结构</h3><table><thead><tr class="header"><th>维数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Series</td><td>带标签的一维同构数组</td></tr><tr class="even"><td>2</td><td>DataFrame</td><td>带标签的，大小可变的，二维异构表格</td></tr></tbody></table><h3 id="为什么有多个数据结构">为什么有多个数据结构？</h3><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p><p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。多维数组存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用“更恰当”的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p><p>处理 DataFrame 等表格数据时，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    series = df[col]</span><br><span class="line">    <span class="comment"># do something with series</span></span><br></pre></td></tr></table></figure><h3 id="大小可变与数据复制"><a href="https://www.pypandas.cn/docs/getting_started/overview.html#大小可变与数据复制">大小可变与数据复制</a></h3><p>Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</p><p>Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<strong>不变</strong>更稳妥。</p><h3 id="十分钟入门pandas"><a href="https://www.pypandas.cn/docs/getting_started/10min.html#%E5%8D%81%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8-pandas">十分钟入门Pandas</a></h3><p>导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h4 id="生成对象">生成对象</h4><p>使用值列表生成Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s</span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">8.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>用含日期时间索引与标签的Numpy数组生成DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dates</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2013-01-01&#x27;</span>, <span class="string">&#x27;2013-01-02&#x27;</span>, <span class="string">&#x27;2013-01-03&#x27;</span>, <span class="string">&#x27;2013-01-04&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2013-01-05&#x27;</span>, <span class="string">&#x27;2013-01-06&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=list(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: df</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></table></figure><p>用Series字典对象生成DataFrame</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [9]: df2 &#x3D; pd.DataFrame(&#123;&#39;A&#39;: 1.,</span><br><span class="line">   ...:                     &#39;B&#39;: pd.Timestamp(&#39;20130102&#39;),</span><br><span class="line">   ...:                     &#39;C&#39;: pd.Series(1, index&#x3D;list(range(4)), dtype&#x3D;&#39;float32&#39;),</span><br><span class="line">   ...:                     &#39;D&#39;: np.array([3] * 4, dtype&#x3D;&#39;int32&#39;),</span><br><span class="line">   ...:                     &#39;E&#39;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]),</span><br><span class="line">   ...:                     &#39;F&#39;: &#39;foo&#39;&#125;)</span><br><span class="line">   ...: </span><br><span class="line"></span><br><span class="line">In [10]: df2</span><br><span class="line">Out[10]: </span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">3  1.0 2013-01-02  1.0  3  train  foo</span><br></pre></td></tr></table></figure><p>DataFrame的列有不同的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: df2.dtypes</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">A           float64</span><br><span class="line">B    datetime64[ns]</span><br><span class="line">C           float32</span><br><span class="line">D             int32</span><br><span class="line">E          category</span><br><span class="line">F            object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>IPython支持 tab 键自动补全列名与公共属性。下面是部分可自动补全的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: df2.&lt;TAB&gt;  <span class="comment"># noqa: E225, E999</span></span><br><span class="line">df2.A                  df2.bool</span><br><span class="line">df2.abs                df2.boxplot</span><br><span class="line">df2.add                df2.C</span><br><span class="line">df2.add_prefix         df2.clip</span><br><span class="line">df2.add_suffix         df2.clip_lower</span><br><span class="line">df2.align              df2.clip_upper</span><br><span class="line">df2.all                df2.columns</span><br><span class="line">df2.any                df2.combine</span><br><span class="line">df2.append             df2.combine_first</span><br><span class="line">df2.apply              df2.compound</span><br><span class="line">df2.applymap           df2.consolidate</span><br><span class="line">df2.D</span><br></pre></td></tr></table></figure><p>列 A、B、C、D 和 E 都可以自动补全；为简洁起见，此处只显示了部分属性。</p><h4 id="查看数据">查看数据</h4><p>下列代码说明了如何查看DataFrame头部和尾部的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: df.head()</span><br><span class="line">Out[<span class="number">13</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: df.tail(<span class="number">3</span>) <span class="comment">#后三行</span></span><br><span class="line">Out[<span class="number">14</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></table></figure><p>显示索引与列名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: df.index</span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2013-01-01&#x27;</span>, <span class="string">&#x27;2013-01-02&#x27;</span>, <span class="string">&#x27;2013-01-03&#x27;</span>, <span class="string">&#x27;2013-01-04&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2013-01-05&#x27;</span>, <span class="string">&#x27;2013-01-06&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: df.columns</span><br><span class="line">Out[<span class="number">16</span>]: Index([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 输出底层数据的 NumPy 对象。注意，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 的列由多种数据类型组成时，该操作耗费系统资源较大，这也是 Pandas 和 NumPy 的本质区别：<strong>NumPy 数组只有一种数据类型，DataFrame 每列的数据类型各不相同</strong>。调用 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 时，Pandas 查找支持 DataFrame 里所有数据类型的 NumPy 数据类型。还有一种数据类型是 <code>object</code>，可以把 DataFrame 列里的值强制转换为 Python 对象。</p><p>下面的 <code>df</code> 这个 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 里的值都是浮点数，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 的操作会很快，而且不复制数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: df.to_numpy()</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">array([[ <span class="number">0.4691</span>, <span class="number">-0.2829</span>, <span class="number">-1.5091</span>, <span class="number">-1.1356</span>],</span><br><span class="line">       [ <span class="number">1.2121</span>, <span class="number">-0.1732</span>,  <span class="number">0.1192</span>, <span class="number">-1.0442</span>],</span><br><span class="line">       [<span class="number">-0.8618</span>, <span class="number">-2.1046</span>, <span class="number">-0.4949</span>,  <span class="number">1.0718</span>],</span><br><span class="line">       [ <span class="number">0.7216</span>, <span class="number">-0.7068</span>, <span class="number">-1.0396</span>,  <span class="number">0.2719</span>],</span><br><span class="line">       [<span class="number">-0.425</span> ,  <span class="number">0.567</span> ,  <span class="number">0.2762</span>, <span class="number">-1.0874</span>],</span><br><span class="line">       [<span class="number">-0.6737</span>,  <span class="number">0.1136</span>, <span class="number">-1.4784</span>,  <span class="number">0.525</span> ]])</span><br></pre></td></tr></table></figure><p><code>df2</code> 这个 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 包含了多种类型，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 操作就会耗费较多资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df2.to_numpy()</span><br><span class="line">Out[<span class="number">18</span>]: </span><br><span class="line">array([[<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]], dtype=object)</span><br></pre></td></tr></table></figure><blockquote><p>提醒：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 的输出不包含行索引和列标签。</p></blockquote><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe">describe()</a> 可以快速查看数据的统计摘要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: df.describe()</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">              A         B         C         D</span><br><span class="line">count  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span></span><br><span class="line">mean   <span class="number">0.073711</span> <span class="number">-0.431125</span> <span class="number">-0.687758</span> <span class="number">-0.233103</span></span><br><span class="line">std    <span class="number">0.843157</span>  <span class="number">0.922818</span>  <span class="number">0.779887</span>  <span class="number">0.973118</span></span><br><span class="line">min   <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">25</span>%   <span class="number">-0.611510</span> <span class="number">-0.600794</span> <span class="number">-1.368714</span> <span class="number">-1.076610</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">0.022070</span> <span class="number">-0.228039</span> <span class="number">-0.767252</span> <span class="number">-0.386188</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">0.658444</span>  <span class="number">0.041933</span> <span class="number">-0.034326</span>  <span class="number">0.461706</span></span><br><span class="line">max    <span class="number">1.212112</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">1.071804</span></span><br></pre></td></tr></table></figure><p>转置数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: df.T</span><br><span class="line">Out[<span class="number">20</span>]: </span><br><span class="line">   <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-06</span></span><br><span class="line">A    <span class="number">0.469112</span>    <span class="number">1.212112</span>   <span class="number">-0.861849</span>    <span class="number">0.721555</span>   <span class="number">-0.424972</span>   <span class="number">-0.673690</span></span><br><span class="line">B   <span class="number">-0.282863</span>   <span class="number">-0.173215</span>   <span class="number">-2.104569</span>   <span class="number">-0.706771</span>    <span class="number">0.567020</span>    <span class="number">0.113648</span></span><br><span class="line">C   <span class="number">-1.509059</span>    <span class="number">0.119209</span>   <span class="number">-0.494929</span>   <span class="number">-1.039575</span>    <span class="number">0.276232</span>   <span class="number">-1.478427</span></span><br><span class="line">D   <span class="number">-1.135632</span>   <span class="number">-1.044236</span>    <span class="number">1.071804</span>    <span class="number">0.271860</span>   <span class="number">-1.087401</span>    <span class="number">0.524988</span></span><br></pre></td></tr></table></figure><p><strong>按轴排序：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">                   D         C         B         A</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-1.135632</span> <span class="number">-1.509059</span> <span class="number">-0.282863</span>  <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-1.044236</span>  <span class="number">0.119209</span> <span class="number">-0.173215</span>  <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">1.071804</span> <span class="number">-0.494929</span> <span class="number">-2.104569</span> <span class="number">-0.861849</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.271860</span> <span class="number">-1.039575</span> <span class="number">-0.706771</span>  <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-1.087401</span>  <span class="number">0.276232</span>  <span class="number">0.567020</span> <span class="number">-0.424972</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.524988</span> <span class="number">-1.478427</span>  <span class="number">0.113648</span> <span class="number">-0.673690</span></span><br></pre></td></tr></table></figure><p>按值排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: df.sort_values(by=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">Out[<span class="number">22</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br></pre></td></tr></table></figure><h4 id="选择">选择</h4><p>获取数据</p><p>选择单列，产生<code>Series</code>，与<code>df.A</code>等效：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: df[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>   <span class="number">-0.861849</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.424972</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">-0.673690</span></span><br><span class="line">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure><p>用[]切片行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>]</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br></pre></td></tr></table></figure><h4 id="按标签选择">按标签选择</h4><p>用标签提取一行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">Out[<span class="number">26</span>]: </span><br><span class="line">A    <span class="number">0.469112</span></span><br><span class="line">B   <span class="number">-0.282863</span></span><br><span class="line">C   <span class="number">-1.509059</span></span><br><span class="line">D   <span class="number">-1.135632</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>用标签选择多列数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df.loc[:, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span></span><br></pre></td></tr></table></figure><p>用标签切片，包含行与列结束点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: df.loc[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">28</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br></pre></td></tr></table></figure><p>返回对象降维：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: df.loc[<span class="string">&#x27;20130102&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">29</span>]: </span><br><span class="line">A    <span class="number">1.212112</span></span><br><span class="line">B   <span class="number">-0.173215</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>提取标量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: df.loc[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></table></figure><p>快速访问标量，与上述方法等效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></table></figure><h4 id="按位置选择">按位置选择</h4><p>选择第三行的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: df.iloc[<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">A    <span class="number">0.721555</span></span><br><span class="line">B   <span class="number">-0.706771</span></span><br><span class="line">C   <span class="number">-1.039575</span></span><br><span class="line">D    <span class="number">0.271860</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>类似于Numpy/Python，用整数切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></span><br></pre></td></tr></table></figure><p>类似于Numpy/Python，用整数列表按位置切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">                   A         C</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-0.494929</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.276232</span></span><br></pre></td></tr></table></figure><p>显式整行切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: df.iloc[<span class="number">1</span>:<span class="number">3</span>, :]</span><br><span class="line">Out[<span class="number">35</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br></pre></td></tr></table></figure><p>显式整列切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">36</span>]: </span><br><span class="line">                   B         C</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span></span><br></pre></td></tr></table></figure><p>显示提取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df.iloc[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">37</span>]: <span class="number">-0.17321464905330858</span></span><br></pre></td></tr></table></figure><p>快速访问标量，与上述方法等效：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: df.iat[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">38</span>]: <span class="number">-0.17321464905330858</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pandas是什么？&lt;/p&gt;</summary>
    
    
    
    
    <category term="PandasPandas" scheme="https://www.fly97.cn/tags/PandasPandas/"/>
    
  </entry>
  
  <entry>
    <title>ROS系统学习小记(二)</title>
    <link href="https://www.fly97.cn/p/ROS-system-learning-notes-02/"/>
    <id>https://www.fly97.cn/p/ROS-system-learning-notes-02/</id>
    <published>2020-10-19T11:36:00.000Z</published>
    <updated>2020-10-19T11:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p><p><strong>关键词：</strong>ROS</p><a id="more"></a><h3 id="ros试用练习">ROS试用练习</h3><h4 id="ros文件系统">ROS文件系统</h4><p>我们通过命令行工具来浏览ROS的文件系统。</p><p>为了获得功能包和功能包集的信息,比如,其路径、依赖关系等，我们将使用<strong>rospack</strong>、<strong>rosstack</strong>命令进入功能包和功能包集，并列出其中 的内容。</p><p>例如，如果你想要找<strong>turtlesim</strong>包的路径，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack find turtlesim </span><br></pre></td></tr></table></figure><p>你将要获得以下信息：</p><figure><img src="https://ftp.fly97.cn/image/image-20201019194410801.png" alt="image-20201019194410801" /><figcaption>image-20201019194410801</figcaption></figure><p>如果你想要找到已经在系统安装过的某个<strong>元功能包</strong>，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack find ros_comm</span><br></pre></td></tr></table></figure><p>你将获得ros-comm元功能包的路径：<img src="https://ftp.fly97.cn/image/image-20201019194825060.png" alt="image-20201019194825060" /></p><p><em>注意：功能包是rospack ，元功能包是rosstack，要注意区分。</em></p><p>要获得功能包或者功能包集下面的文件列表，需要使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosls turtlesim</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20201019195209283.png" alt="image-20201019195209283" /><figcaption>image-20201019195209283</figcaption></figure><p>更改当前目录，尤其是进入某个文件夹，可以使用roscd命令完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscd turtlesim</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>将获得以下新路径：</p><figure><img src="https://ftp.fly97.cn/image/image-20201019195406492.png" alt="image-20201019195406492" /><figcaption>image-20201019195406492</figcaption></figure><h4 id="创建工作空间">创建工作空间</h4><p>我们会在工作空间完成本书使用的所有代码。</p><p>要查看ROS正在使用的工作空间，请使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure><p>会看到如下类似信息：<img src="https://ftp.fly97.cn/image/image-20201019195658744.png" alt="image-20201019195658744" /></p><p>我们将要创建的文件夹位于<code>/root/dev/catkin_ws/src</code>中。要新建文件夹，使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/dev/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure><p>当创建工作空间文件夹后，里面并没有功能包，只有CMakeList.txt文件。使用下面的命令来<strong>编译工作空间</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>你将看到类似信息：<img src="https://ftp.fly97.cn/image/image-20201019200504031.png" alt="image-20201019200504031" /></p><p>现在输入<code>ls</code>命令，可以看到创建的新文件夹，分别是build和devel文件夹。</p><p>输入以下命令，再次初始化ros环境，至此，工作空间创建完毕。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure><p>这一步只重新加载了setup.bash文件，如果关闭并打开一个新的命令行窗口，也将得到同样的效果。</p><p>输入以下命令，将ROS的初始化脚本加入到bash的配置文件中，这样，每次打开一个新的bash shell窗口时，就自动完成了ROS的初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="创建ros功能包和元功能包">创建ROS功能包和元功能包</h4><p>使用以下命令在之前建立的工作空间中创建新的功能包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_create_pkg TEST std_msgs roscpp</span><br></pre></td></tr></table></figure><p>此命令的格式包括包的名称和依赖项。在这个示例中，依赖项包括 <strong>std_msgs</strong> 和 <strong>roscpp</strong>.</p><p>如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg name [dependencies [dependencies ...]]</span><br><span class="line">positional arguments:</span><br><span class="line">  name                  The name for the package</span><br><span class="line">  dependencies          Catkin package Dependencies</span><br></pre></td></tr></table></figure><p>这些依赖项主要包括以下几个：</p><ul><li>std_msgs：包含了常见的消息类型，表示基本数据类型和其他基本的消息构造，如多维数组。</li><li>roscpp：使用C++实现了ROS的各种功能。它提供了一个客户端库，让C++程序员能够调用这些接口快速完成与ROS的主题、服务和参数相关的开发工作。</li></ul><p>如果所有步骤一切顺利，结果如下图所示：</p><figure><img src="https://ftp.fly97.cn/image/image-20201019202650647.png" alt="image-20201019202650647" /><figcaption>image-20201019202650647</figcaption></figure><p>正如我们看到的，可以使用rospack、roscd和rosls命令来获取新的功能包信息。下面是可以执行的一些操作。</p><ul><li>rospack profile：此命令用于通知用户ROS中新添加的内容。在安装任何功能包之后使用它。</li><li>rospack find TEST：此命令用于查看依赖关系。</li><li>rosls TEST：此命令用于查看内容</li><li>roscd TEST：此命令会切换到TEST功能包所在的路径。</li></ul><h4 id="编译ros功能包">编译ROS功能包</h4><p>编译功能包的的时候，主要是代码的编译过程，不仅包括用户添加的代码，还包括由消息和服务生成的代码。</p><p>为了编译功能包，可以使用<code>catin_make</code>工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>如果没有看到错误提示信息，说明功能包编译成功。</p><p>必须在<code>workspace</code>文件夹中运行catkin_make命令。如果在其他文件这样做，命令将无法执行！</p><p>当你在TEST文件夹中试图使用catkin_make编译工具包时，你会看到如下错误：</p><figure><img src="https://ftp.fly97.cn/image/image-20201019204443411.png" alt="image-20201019204443411" /><figcaption>image-20201019204443411</figcaption></figure><p>当你在<code>catkin_ws</code>文件夹中执行catkin_make命令时，则会编译成功。</p><p>如果编译单个工具包，可以使用如下格式的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make --pkg &lt;package name&gt;</span><br></pre></td></tr></table></figure><h4 id="使用ros节点">使用ROS节点</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;概述：&lt;/strong&gt;以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;ROS&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://www.fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter NoteBook的快捷键使用指南</title>
    <link href="https://www.fly97.cn/p/jupyter-notebook-keyboard-shortcut/"/>
    <id>https://www.fly97.cn/p/jupyter-notebook-keyboard-shortcut/</id>
    <published>2020-10-18T07:09:00.000Z</published>
    <updated>2020-10-18T07:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述：</strong>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</p><p>此文简单介绍了 Jupyter Notebook 的快捷键用法。</p><p><strong>关键词：</strong>Jupyter Notebook</p><a id="more"></a><p><strong>Jupyter Notebook</strong> 有两种键盘输入模式。即命令模式和编辑模式，这与 <a href="http://www.vim.org/">Vim</a> 有些类似。</p><p>在<strong>编辑模式</strong>下，可以往单元中键入代码或文本，<u>此时单元格被绿色的框线包围，且命令模式下的快捷键不生效。</u></p><p>在<strong>命令模式</strong>下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，<u>此时的单元格被灰色的框线包围，且编辑模式下的快捷键不生效。</u></p><p>从命令模式进入编辑模式需按 <code>Enter</code> 键，从编辑模式切换到命令模式需按 <code>Esc</code> 键。</p><p>以下两表分别是对命令和编辑两种模式下快捷键的简单说明：</p><h3 id="命令模式">命令模式</h3><p><strong>快捷键（按 Esc 键开启）:</strong></p><table><thead><tr class="header"><th>快捷键</th><th style="text-align: center;">作用</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td><strong>Enter</strong></td><td style="text-align: center;">转入编辑模式</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Shift-Enter</strong></td><td style="text-align: center;">运行本单元，选中下个单元</td><td style="text-align: center;">新单元默认为命令模式</td></tr><tr class="odd"><td><strong>Ctrl-Enter</strong></td><td style="text-align: center;">运行本单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Alt-Enter</strong></td><td style="text-align: center;">运行本单元，在其下插入新单元</td><td style="text-align: center;">新单元默认为编辑模式</td></tr><tr class="odd"><td><strong>Y</strong></td><td style="text-align: center;">单元转入代码状态</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>M</strong></td><td style="text-align: center;">单元转入 <strong>markdown</strong> 状态</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>R</strong></td><td style="text-align: center;">单元转入 raw 状态</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>1</strong></td><td style="text-align: center;">设定 1 级标题</td><td style="text-align: center;">仅在 markdown 状态下时建议使用标题相关快捷键，如果单元处于其他状态，则会强制切换到 markdown 状态</td></tr><tr class="odd"><td><strong>2</strong></td><td style="text-align: center;">设定 2 级标题</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>3</strong></td><td style="text-align: center;">设定 3 级标题</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>4</strong></td><td style="text-align: center;">设定 4 级标题</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>5</strong></td><td style="text-align: center;">设定 5 级标题</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>6</strong></td><td style="text-align: center;">设定 6 级标题</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Up</strong></td><td style="text-align: center;">选中上方单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>K</strong></td><td style="text-align: center;">选中上方单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Down</strong></td><td style="text-align: center;">选中下方单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>J</strong></td><td style="text-align: center;">选中下方单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Shift-K</strong></td><td style="text-align: center;">连续选择上方单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Shift-J</strong></td><td style="text-align: center;">连续选择下方单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>A</strong></td><td style="text-align: center;">在上方插入新单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>B</strong></td><td style="text-align: center;">在下方插入新单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>X</strong></td><td style="text-align: center;">剪切选中的单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>C</strong></td><td style="text-align: center;">复制选中的单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Shift-V</strong></td><td style="text-align: center;">粘贴到上方单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>V</strong></td><td style="text-align: center;">粘贴到下方单元</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Z</strong></td><td style="text-align: center;">恢复删除的最后一个单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>D,D</strong></td><td style="text-align: center;">删除选中的单元</td><td style="text-align: center;">连续按两个 D 键</td></tr><tr class="even"><td><strong>Shift-M</strong></td><td style="text-align: center;">合并选中的单元</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Ctrl-S</strong></td><td style="text-align: center;">保存当前 NoteBook</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>S</strong></td><td style="text-align: center;">保存当前 NoteBook</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>L</strong></td><td style="text-align: center;">开关行号</td><td style="text-align: center;">编辑框的行号是可以开启和关闭的</td></tr><tr class="even"><td><strong>O</strong></td><td style="text-align: center;">转换输出</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Shift-O</strong></td><td style="text-align: center;">转换输出滚动</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Esc</strong></td><td style="text-align: center;">关闭页面</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Q</strong></td><td style="text-align: center;">关闭页面</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>H</strong></td><td style="text-align: center;">显示快捷键帮助</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>I,I</strong></td><td style="text-align: center;">中断 NoteBook 内核</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>0,0</strong></td><td style="text-align: center;">重启 NoteBook 内核</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Shift</strong></td><td style="text-align: center;">忽略</td><td style="text-align: center;"></td></tr><tr class="even"><td><strong>Shift-Space </strong></td><td style="text-align: center;">向上滚动</td><td style="text-align: center;"></td></tr><tr class="odd"><td><strong>Space</strong></td><td style="text-align: center;">向下滚动</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="编辑模式">编辑模式</h3><p><strong>快捷键（ 按 Enter 键启动）:</strong></p><table><thead><tr class="header"><th style="text-align: left;">快捷键</th><th style="text-align: left;">作用</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>Tab</strong></td><td style="text-align: left;">代码补全或缩进</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Shift-Tab</strong></td><td style="text-align: left;">提示</td><td style="text-align: left;">输出帮助信息，部分函数、类、方法等会显示其定义原型，如果在其后加 <code>?</code> 再运行会显示更加详细的帮助</td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-]</strong></td><td style="text-align: left;">缩进</td><td style="text-align: left;">向右缩进</td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-[</strong></td><td style="text-align: left;">解除缩进</td><td style="text-align: left;">向左缩进</td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-A</strong></td><td style="text-align: left;">全选</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Z</strong></td><td style="text-align: left;">撤销</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-Shift-Z</strong></td><td style="text-align: left;">重做</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Y</strong></td><td style="text-align: left;">重做</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-Home</strong></td><td style="text-align: left;">跳到单元开头</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Up</strong></td><td style="text-align: left;">跳到单元开头</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-End</strong></td><td style="text-align: left;">跳到单元末尾</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Down</strong></td><td style="text-align: left;">跳到单元末尾</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-Left</strong></td><td style="text-align: left;">跳到左边一个字首</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Right</strong></td><td style="text-align: left;">跳到右边一个字首</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-Backspace</strong></td><td style="text-align: left;">删除前面一个字</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Delete</strong></td><td style="text-align: left;">删除后面一个字</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Esc</strong></td><td style="text-align: left;">切换到命令模式</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-M</strong></td><td style="text-align: left;">切换到命令模式</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Shift-Enter</strong></td><td style="text-align: left;">运行本单元，选中下一单元</td><td style="text-align: left;">新单元默认为命令模式</td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Enter</strong></td><td style="text-align: left;">运行本单元</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Alt-Enter</strong></td><td style="text-align: left;">运行本单元，在下面插入一单元</td><td style="text-align: left;">新单元默认为编辑模式</td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-Shift--</strong></td><td style="text-align: left;">分割单元</td><td style="text-align: left;">按光标所在行进行分割</td></tr><tr class="odd"><td style="text-align: left;"><strong>Ctrl-Shift-Subtract</strong></td><td style="text-align: left;">分割单元</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-S</strong></td><td style="text-align: left;">保存当前 NoteBook</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Shift</strong></td><td style="text-align: left;">忽略</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Up</strong></td><td style="text-align: left;">光标上移或转入上一单元</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><strong>Down</strong></td><td style="text-align: left;">光标下移或转入下一单元</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><strong>Ctrl-/</strong></td><td style="text-align: left;">注释整行/撤销注释</td><td style="text-align: left;">仅代码状态有效</td></tr></tbody></table><p><strong>注：</strong> 如果快捷键被系统中的其它应用占用，则可能会失效</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;概述：&lt;/strong&gt;Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。&lt;/p&gt;
&lt;p&gt;此文简单介绍了 Jupyter Notebook 的快捷键用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;Jupyter Notebook&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jupyter" scheme="https://www.fly97.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>数值分析第一章作业</title>
    <link href="https://www.fly97.cn/p/Chapter-01-of-Numerical-Analysis/"/>
    <id>https://www.fly97.cn/p/Chapter-01-of-Numerical-Analysis/</id>
    <published>2020-10-13T12:00:00.000Z</published>
    <updated>2020-10-13T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《数值分析》课后作业练习题及答案。</p><p><strong>关键词：</strong>研一，数值分析</p><a id="more"></a><figure><img src="https://ftp.fly97.cn/image/image-20201013093358782.png" alt="image-20201013093358782" /><figcaption>image-20201013093358782</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201013102937713.png" alt="image-20201013102937713" /><figcaption>image-20201013102937713</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201013104909315.png" alt="image-20201013104909315" /><figcaption>image-20201013104909315</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201013104922645.png" alt="image-20201013104922645" /><figcaption>image-20201013104922645</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201013104953613.png" alt="image-20201013104953613" /><figcaption>image-20201013104953613</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201013110136891.png" alt="image-20201013110136891" /><figcaption>image-20201013110136891</figcaption></figure><p><img src="https://ftp.fly97.cn/image/image-20201013110806596.png" alt="image-20201013110806596" /> <span class="math display">\[2^{256}=2^{16} \times 2^{16}=[(2^{4})^{2}]^{2}\]</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《数值分析》课后作业练习题及答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;研一，数值分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="研一" scheme="https://www.fly97.cn/tags/%E7%A0%94%E4%B8%80/"/>
    
    <category term="现代信号分析" scheme="https://www.fly97.cn/tags/%E7%8E%B0%E4%BB%A3%E4%BF%A1%E5%8F%B7%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>现代信号分析第四章作业</title>
    <link href="https://www.fly97.cn/p/Chapter-02-of-Modern-Signal-Analysis/"/>
    <id>https://www.fly97.cn/p/Chapter-02-of-Modern-Signal-Analysis/</id>
    <published>2020-10-12T12:00:00.000Z</published>
    <updated>2020-10-12T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p><p><strong>关键词：</strong>研一，现代信号分析</p><a id="more"></a><figure><img src="https://ftp.fly97.cn/image/image-20201012134854422.png" alt="image-20201012134854422" /><figcaption>image-20201012134854422</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012135051489.png" alt="image-20201012135051489" /><figcaption>image-20201012135051489</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012135105822.png" alt="image-20201012135105822" /><figcaption>image-20201012135105822</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012135149144.png" alt="image-20201012135149144" /><figcaption>image-20201012135149144</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012140126858.png" alt="image-20201012140126858" /><figcaption>image-20201012140126858</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012140338034.png" alt="image-20201012140338034" /><figcaption>image-20201012140338034</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201012141112290.png" alt="image-20201012141112290" /><figcaption>image-20201012141112290</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;研一，现代信号分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="研一" scheme="https://www.fly97.cn/tags/%E7%A0%94%E4%B8%80/"/>
    
    <category term="现代信号分析" scheme="https://www.fly97.cn/tags/%E7%8E%B0%E4%BB%A3%E4%BF%A1%E5%8F%B7%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>现代信号分析第二章作业</title>
    <link href="https://www.fly97.cn/p/Chapter-01-of-Modern-Signal-Analysis/"/>
    <id>https://www.fly97.cn/p/Chapter-01-of-Modern-Signal-Analysis/</id>
    <published>2020-10-11T12:00:00.000Z</published>
    <updated>2020-10-11T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p><p><strong>关键词：</strong>研一，现代信号分析</p><a id="more"></a><figure><img src="https://ftp.fly97.cn/image/image-20200928193703316.png" alt="image-20200928193703316" /><figcaption>image-20200928193703316</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203228683.png" alt="image-20201011203228683" /><figcaption>image-20201011203228683</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203330808.png" alt="image-20201011203330808" /><figcaption>image-20201011203330808</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20200928193714036.png" alt="image-20200928193714036" /><figcaption>image-20200928193714036</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203626045.png" alt="image-20201011203626045" /><figcaption>image-20201011203626045</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203639917.png" alt="image-20201011203639917" /><figcaption>image-20201011203639917</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203658032.png" alt="image-20201011203658032" /><figcaption>image-20201011203658032</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203716172.png" alt="image-20201011203716172" /><figcaption>image-20201011203716172</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203748238.png" alt="image-20201011203748238" /><figcaption>image-20201011203748238</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203823320.png" alt="image-20201011203823320" /><figcaption>image-20201011203823320</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203917101.png" alt="image-20201011203917101" /><figcaption>image-20201011203917101</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011203848593.png" alt="image-20201011203848593" /><figcaption>image-20201011203848593</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20200928193737091.png" alt="image-20200928193737091" /><figcaption>image-20200928193737091</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204004991.png" alt="image-20201011204004991" /><figcaption>image-20201011204004991</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204054961.png" alt="image-20201011204054961" /><figcaption>image-20201011204054961</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204157647.png" alt="image-20201011204157647" /><figcaption>image-20201011204157647</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20200928193754540.png" alt="image-20200928193754540" /><figcaption>image-20200928193754540</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204330872.png" alt="image-20201011204330872" /><figcaption>image-20201011204330872</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204359072.png" alt="image-20201011204359072" /><figcaption>image-20201011204359072</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20201011204438075.png" alt="image-20201011204438075" /><figcaption>image-20201011204438075</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;研一，现代信号分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="研一" scheme="https://www.fly97.cn/tags/%E7%A0%94%E4%B8%80/"/>
    
    <category term="现代信号分析" scheme="https://www.fly97.cn/tags/%E7%8E%B0%E4%BB%A3%E4%BF%A1%E5%8F%B7%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ROS系统学习小记(一)</title>
    <link href="https://www.fly97.cn/p/ROS-system-learning-notes-01/"/>
    <id>https://www.fly97.cn/p/ROS-system-learning-notes-01/</id>
    <published>2020-09-23T12:46:25.000Z</published>
    <updated>2020-09-23T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p><p><strong>关键词：</strong>ROS</p><a id="more"></a><h3 id="ros架构及概念">ROS架构及概念</h3><p>ROS的架构经过设计并划分为三部分，每一部分都代表一个层级的概念：</p><ul><li>文件系统级（Filesystem level)</li><li>计算图级(Computation Graph level)</li><li>社区级(Community level)</li></ul><p>第一级是文件系统级。在这一级，我们会使用一组概念来解释ROS的内部构成、文件夹结构，以及工作所需要的核心文件。</p><p>第二级是计算图级，体现的是进程和系统之间的通信。在相关小节中，我们将学习ROS的各个概念和功能，包括建立系统、处理各类进程、与多台机器通信等。</p><p>第三级是社区级，我们将解释一系列的工具和概念，包括在开发人员之间如何共享知识、算法和代码。由于强大社区的支持，不仅提高了初学者理解复杂软件的能力，还解决了最常见的问题。</p><h4 id="理解ros文件系统级">理解ROS文件系统级</h4><figure><img src="https://ftp.fly97.cn/image/image-20200923190637341.png" alt="image-20200923190637341" /><figcaption>image-20200923190637341</figcaption></figure><p>与其他操作系统类似，一个ROS程序的不同组件要放在不同的文件夹下，这些文件夹是根据功能的不同来对文件进行组织的。</p><ol type="1"><li>功能包（Package）：功能包构成ROS中的原子级。一个功能包具有创建ROS程序最小结构和最少内容。它可以包含ROS运行时进程（节点）、配置文件等。</li><li>功能包清单（Package Manifest）：功能包清单提供关于功能包、许可证、依赖关系、编译标志等的信息。包清单又一个名为<strong>package.xml</strong>的文件管理。</li><li>元功能包（Metapackage）：如果你希望将几个具有<strong>某些功能的包组织在一起</strong>，那么你将使用一个元功能包。这种包的组织形式<strong>之前被称</strong>为功能包集（Stack ）。功能包集被废除，现在使用元功能包实现这个功能。在ROS中，存在大量不同用途的元功能包，例如<strong>导航功能包集</strong>。</li><li>元功能包清单（Metapackage manifest）：元功能包清单（package.xml）类似普通功能包但又一个XML格式的导出标记，他在结构上也有一定的限制。</li><li>消息类型（Message（msg）type）：消息是一个进程发送到其他进程的消息。ROS 的消息类型的说明存储在<strong>my_package/msg/MyMessageType.msg</strong>中。</li><li>服务类型（Service (srv) Type）：服务描述说明存储在<strong>my_package/srv/MyServiceType.srv</strong>中，为ROS中由每个进程提供的服务定义请求和响应数据结构。</li></ol><p>下面的截图说明了<strong>turtlesim</strong>功能包的内容。所看到的是一系列文件和文件夹，包含代码、图片、启动文件服务和消息。以下只是文件的一个简短列表。</p><figure><img src="https://ftp.fly97.cn/image/image-20200923193232140.png" alt="image-20200923193232140" /><figcaption>image-20200923193232140</figcaption></figure><h5 id="工作空间">工作空间</h5><p>工作空间包含功能包，功能包包含源文件和环境和工作空间，是集中开发的一种好方式。</p><p>下图所示是一个典型的工作空间。<img src="https://ftp.fly97.cn/image/image-20200924144159317.png" alt="image-20200924144159317" /></p><p>主要包含一下内容：</p><ul><li>源文件空间（Source space）：在源空间（src文件夹）中，放置了功能包、项目、复制的包等。<strong>最重要文件：CMakeLists.txt</strong>。当在工作空间配置包时，通过cmake调用CMakeLists.txt。这个文件是通过<strong>catkin_init_workspace</strong>命令创建的。</li><li>编译空间（build space）：在build文件夹里，cmake和catkin为功能包和项目保存缓存信息、配置和其他中间文件。</li><li>开发空间（Development （devel）space）：devel文件夹用来保存编译后的程序，这些是无需安装就能用来测试的程序。</li></ul><p>用catkin编译包有两个选项。第一个是使用标准CMake工作流程。通过使用此方式。可以一次编译一个包，见以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake packageToBuild/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>如果想编译所有的包，可以用<strong>catkin_make</strong>命令行，见以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>在ROS配置的编译空间目录中，这两个命令编译出可执行文件。</p><p>ROS支持覆盖（overlay）。当你正在使用ROS功能包例如（<strong>Turtlesim</strong>）时，可以使用安装版本，也可以下载源文件并编译它来使用你修改后的版本。</p><p>ROS允许使用自己版本的功能包去替代安装版本。下一章我们将使用这个功能来创建自己的插件。</p><h5 id="功能包">功能包</h5><p>包指的是一种特定结构的文件和文件夹组合。</p><table><thead><tr class="header"><th>目录</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>include/package_name</td><td>此目录包含了需要的库的头文件</td></tr><tr class="even"><td>msg/</td><td>如果开发需要<strong>非标准</strong>的消息，请把文件放在这里。</td></tr><tr class="odd"><td>script/</td><td>其中包含Bash、Python或者任何其他脚本语言的可执行脚本。</td></tr><tr class="even"><td>src/</td><td>存储程序源文件。可以为节点创建一个文件夹或按照希望的方式组织它。</td></tr><tr class="odd"><td>srv/</td><td>（srv）服务类型</td></tr><tr class="even"><td>CMakeLists.txt</td><td>CMake的生成文件</td></tr><tr class="odd"><td>package.xml</td><td>功能包清单文件</td></tr></tbody></table><p>ROS提供的工具（命令）</p><table><thead><tr class="header"><th>命令</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>rospack</td><td>使用此命令来获取信息或在系统中查找包</td></tr><tr class="even"><td>catkin_create_pkg</td><td>使用此命令创建一个新的功能包</td></tr><tr class="odd"><td>catin_make</td><td>使用此命令来编译工作空间</td></tr><tr class="even"><td>rosdep</td><td>使用此命令按照功能包的系统依赖项</td></tr><tr class="odd"><td>rqt_dep</td><td>使用此命令来查看包的依赖关系图</td></tr></tbody></table><p>如果要在文件夹和功能包之间移动文件，ROS提供了非常有用的<strong>rosbash</strong>，功能包，其中包含的非常类似Linux命令的命令。</p><table><thead><tr class="header"><th>命令</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>roscd</td><td>此命令用于更改目录，相当于Linux中的cd命令</td></tr><tr class="even"><td>rosed</td><td>此命令用来编辑文件</td></tr><tr class="odd"><td>roscp</td><td>此命令用于从功能包复制文件。</td></tr><tr class="even"><td>rosls</td><td>此命令列出功能包下的文件，类似Linux中的ls命令。</td></tr></tbody></table><p>文件<strong>package.xml</strong>必须在每个功能包中，它用来说明此包相关的各类信息。如果你发现在某个文件夹内包含此文件，那么这个文件夹很可能是<strong>一个包或者元功能包</strong>。</p><p>打开<strong>package.xml</strong>文件，可以看到包的名称、依赖关系等信息。功能包清单的作用就是为了方便安装和分发这些功能包。</p><p>在<strong>package.xml</strong>文件中使用的两个典型标记是<strong><build_depend></strong>和<strong><run_depend></strong>.</p><p><strong><build_depend></strong>标记会显示当前功能包安装之前必须先安装哪些功能包。这是因为新的功能包会使用其他包的一些功能。</p><p><strong><run_depend></strong>标记显示运行功能包中代码所需要的包。以下是package.xml文件的示例。</p><figure><img src="https://ftp.fly97.cn/image/image-20200924154802735.png" alt="image-20200924154802735" /><figcaption>image-20200924154802735</figcaption></figure><h5 id="元功能包">元功能包</h5><p>元包中只有一个文件，这个文件就是<strong>package.xml</strong>。它不包含其他文件，如代码等。</p><p>元功能包用于指代其他按照类似功能特性分组的包，例如导航功能包集，ros_tutorials等。</p><p>使用迁移的特定规则，可以讲ROS Fuerte中的功能包和功能包集转换为Kinetic等。具体参见http://wiki.ros.org/catkin/migrating_from_rosbuild。</p><p>在下图中。可以看到在ros_tutorials元功能包中package.xml的内容。可以看到 &lt;export&gt;标记和&lt;run_depend&gt;标记。这些事功能包清单中必不可缺少的，在下图中也可以看到这些标记。</p><figure><img src="https://ftp.fly97.cn/image/image-20200924160401768.png" alt="image-20200924160401768" /><figcaption>image-20200924160401768</figcaption></figure><p>如果你想定位<strong>ros_tutorials</strong>元功能包，可以使用下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosstack find ros_tutorials</span><br></pre></td></tr></table></figure><p>显示路径为：</p><figure><img src="https://ftp.fly97.cn/image/image-20200924161034651.png" alt="image-20200924161034651" /><figcaption>image-20200924161034651</figcaption></figure><p>查看里面的代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/ros/kinetic/share/ros_tutorials/package.xml</span><br></pre></td></tr></table></figure><p>注意：Kinetic使用元功能包，不是功能包集，但是<strong>rosstack find</strong> 命令也可以用于查找元功能包。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;概述：&lt;/strong&gt;以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;ROS&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://www.fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Python科学计算库Numpy</title>
    <link href="https://www.fly97.cn/p/an-introduction-to-numpy/"/>
    <id>https://www.fly97.cn/p/an-introduction-to-numpy/</id>
    <published>2020-09-20T07:00:00.000Z</published>
    <updated>2020-09-20T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>Numpy是一个开源的Python科学计算库，它是Python科学计算库的基础库，许多其他著名的科学计算库如Pandas、Scikit-learn等，都要用的Numpy库的一些功能。</p><p><strong>关键词：</strong>科学计算，Numpy</p><a id="more"></a><p>Numpy是Python快速处理大型矩阵的科学计算库，Numpy允许你在Python中做向量矩阵的运算，而且很多底层的函数都是用C语言写的，将获得在普通Python中无法达到的运算速度。</p><p>什么是科学计算？科学计算是一个与定量分析、数学模型构建以及利用计算机分析和解决科学问题相关的相关领域。 <strong>查看Numpy版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line"></span><br><span class="line">print(numpy.__version__)</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920154143301.png" alt="image-20200920154143301" /><figcaption>image-20200920154143301</figcaption></figure><h3 id="初识numpy">初识Numpy</h3><p><strong>Numpy</strong>的主要对象是同质多维数组，也就是在一个元素(通常是数字)表中，元素的类型都是相同的，其中可以通过正整数的元组来对元素进行索引。</p><p>在Numpy中，数组的维度被称为轴(axes)，轴的数量被称为秩(rank)。例如在三维空间中一个点的坐标【1，2，1】就是秩为1的数组，因为它只有一个轴，这个轴的长度为3。</p><p><strong>Numpy</strong>的数组类称为<strong>ndarray</strong>，别名为array。<strong>numpy.array</strong>与标准Python库类<strong>array.array</strong>不同。标准库类中只能处理一维数组而且功能相对较少。下面我们来认识下<strong>ndarray</strong>对象的常见属性。</p><table><colgroup><col style="width: 11%" /><col style="width: 88%" /></colgroup><thead><tr class="header"><th>属性</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>T</td><td>转置，与self.transpose()相同，如果维度小于2，返回self</td></tr><tr class="even"><td>size</td><td>数组中元素个数，等于shape元素的乘积</td></tr><tr class="odd"><td>itemsize</td><td>一个类型为float64的元素的数组itemsize为8=(64/8)，而一个complex32的数组itersize为4=(32/8). 该属性等价于ndarray.dtype.itemsize</td></tr><tr class="even"><td>dtype</td><td>数组元素的数据类型对象。可以用标准Python类型来创建或指定dtype，或者在后面加上Numpy的类型：numpy.int32，numpy.int16，numpy.float64等等</td></tr><tr class="odd"><td>ndim</td><td>数组的轴（维度）的数量。在Python中，维度的数量通常被称为rank</td></tr><tr class="even"><td>shape</td><td>数组的维度，为一个整数元组。表示每个维度上的大小。对于一个m行n列的矩阵来说，shape就是(n, m)</td></tr><tr class="odd"><td>data</td><td>该缓冲区中包含了数组的实际元素，通常情况下不需要使用这个属性因为我们会使用<strong>索引</strong>的方式来访问数组中的元素。</td></tr><tr class="even"><td>Flat</td><td>返回数组的一维迭代器</td></tr><tr class="odd"><td>imag</td><td>返回数组的虚部</td></tr><tr class="even"><td>real</td><td>返回数组的实部</td></tr><tr class="odd"><td>nbytes</td><td>数组中所有元素的字节长度</td></tr></tbody></table><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">4</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164603559.png" alt="image-20200920164603559" /><figcaption>image-20200920164603559</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164658559.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920165038789.png" alt="image-20200920165038789" /><figcaption>image-20200920165038789</figcaption></figure><p>以上说明，通过np.random.random(4)生成的一个浮点数组，类型为numpy.ndarray，a.shape显示的<strong>长度</strong>为4。</p><p>【这里的数组可以理解为一维数组】</p><h3 id="numpy数据类型">Numpy数据类型</h3><p>对于科学计算来说，Python自带的整型，浮点数和复数类型还远远不够。因此Numpy添加了许多数据类型， 在实际应用中，我们需要不同精度的数据类型，它们占用的内存空间也是不同的，在numpy中，大部分数据类型是以数字结尾的，这个数字表示其在内存中占用的位数。</p><table><thead><tr class="header"><th>类型</th><th>描述规则</th></tr></thead><tbody><tr class="odd"><td>bool</td><td>用一位存储的bool类型</td></tr><tr class="even"><td>inti</td><td>由所在平台决定其精度的整数（一般为int32或者int64）</td></tr><tr class="odd"><td>int8</td><td>整数，范围为-128至127</td></tr><tr class="even"><td>int16</td><td>整数，范围为-32768至32767</td></tr><tr class="odd"><td>int32</td><td>整数，范围为-2<sup>31至2</sup>31-1</td></tr><tr class="even"><td>int64</td><td>整数，范围为-2<sup>63至2</sup>63</td></tr><tr class="odd"><td>uint8</td><td>无符号整数，范围为0至255</td></tr><tr class="even"><td>uint16</td><td>无符号整数，范围为0至65535</td></tr><tr class="odd"><td>uint32</td><td>无符号整数，范围为0至2^32-1</td></tr><tr class="even"><td>uint64</td><td>无符号整数，范围为0至2^64</td></tr><tr class="odd"><td>float16</td><td>半精度浮点数(16位)，其中一位表示正负号，5位表示指数，10位表示尾数</td></tr><tr class="even"><td>float32</td><td>单精度浮点数(32位)，其中一位表示正负号，8位表示指数，23位表示尾数</td></tr><tr class="odd"><td>float64或float</td><td>双精度浮点数(64位)，其中一位表示正负号，11位表示指数，52位表示位数</td></tr><tr class="even"><td>complex64</td><td>复数，分别用两个32位浮点数表示实部和虚部</td></tr><tr class="odd"><td>complex128或complex</td><td>复数，分别用两个64位浮点数表示实部和虚部</td></tr></tbody></table><p>在使用numpy过程中，可以通过dtype来指定数据类型，通常这个参数是可选的。也可以通过astype()来指定。同样，每一种数据类型均有对应的类型转换函数。在Python中，通常不要求内存控制指定。</p><p><strong>Numpy数据类型操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定数据类型</span></span><br><span class="line">print(np.array(<span class="number">5</span>, dtype = int))</span><br><span class="line"></span><br><span class="line">print(np.array(<span class="number">5</span>).astype(float))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line">print(float(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(bool(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(float(<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182149479.png" alt="image-20200920182149479" /><figcaption>image-20200920182149479</figcaption></figure><p><strong>查看Numpy数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(set(np.typeDict.values()))</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182353862.png" alt="image-20200920182353862" /><figcaption>image-20200920182353862</figcaption></figure><h3 id="numpy创建数组">Numpy创建数组</h3><h4 id="通过列表或者元组转化">通过列表或者元组转化</h4><p>在Python内建对象中，数组有三种形式：列表（list）、元组（tuple）、字典（dict）。具体形式如下：</p><ul><li>list: [1, 2, 3]</li><li>tuple: (1, 2, 3)</li><li>dict: {a:1, b:2}</li></ul><p>使用np.array将<strong>列表或元组</strong>转换成narray数组。其方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.array(object, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, </span><br><span class="line">         order=<span class="string">&#x27;K&#x27;</span>, subook= <span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>相关参数如下：</p><ul><li>object：输入对象列表、元组等。</li><li>dtype：数据类型。如果没有给出，则类型被保存为所需对象的最小类型。</li><li>copy：布尔类型，默认为<strong>True</strong>，表示复制对象。</li><li>order：顺序。</li><li>subok：布尔类型，表示子类是否被传递。</li></ul><p><strong>使用np.array创建数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;, type of a:&#123;&#125;&quot;</span>.format(a, type(a)))</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920184454753.png" alt="image-20200920184454753" /><figcaption>image-20200920184454753</figcaption></figure><h4 id="np.arange函数创建数组">np.arange()函数创建数组</h4><p>np.arange()的功能是在给定区间内创建<strong>等差数组</strong>。arange类似range函数，接触过Python的人或许对range函数比较熟悉。例如在for循环中，经常用到range。下面通过range来学习arange，主要区别是<strong>返回值类型不同</strong>。</p><p>range返回的是list，np.arange返回的是narray数组。</p><ol type="1"><li>range函数为 range(start, stop[, step])，根据start和stop指定的范围以及step设定的步长，生成一个序列，函数返回的是一个range object。这里的[start, stop]是一个<strong>前闭后开</strong>区间。</li></ol><ul><li>start：计数从start开始，默认是从0开始，例如range(5)等价于range(0, 5)</li><li>stop：计数从stop结束，但不包括stop，例如range(0, 5)=[0, 1, 2, 3, 4]</li><li>step：每次跳跃的间距，默认为1且<strong>不支持步长为小数</strong>，例如range(0, 5)等价于range(0, 5, 1)</li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = range(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">b = range(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">a1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">b1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> b]</span><br><span class="line">print(<span class="string">&quot;type of a:&#123;0&#125;, a:&#123;1&#125;, b:&#123;2&#125;,  a1:&#123;3&#125;, b1:&#123;4&#125;&quot;</span>.format(type(a), a, b, a1, b1))</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920190839464.png" alt="image-20200920190839464" /><figcaption>image-20200920190839464</figcaption></figure><ol start="2" type="1"><li>arange函数为arange(start=None, stop=None, step=None, dtype=None), 根据<strong>start</strong>与<strong>stop</strong>指定的范围以及<strong>step</strong>设定的步长，生成一个<strong>ndarry</strong></li></ol><ul><li>start与stop参数同range。</li><li>step：步长用于设置值之间的间隔，支持<strong>步长为小数</strong>。</li><li>dtype：可选参数，可以设置返回ndarray的值类型。</li></ul><p><strong>np.arange()案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">a2 = np.arange(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;,a2:&#123;&#125;&quot;</span>.format(a,a2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920191959047.png" alt="image-20200920191959047" /><figcaption>image-20200920191959047</figcaption></figure><h4 id="np.linspace生成等差数列">np.linspace()生成等差数列</h4><p>np.linspace方法也可以像np.arange方法一样，创建数值有规律的数组。linespace用于在指定区域返回间隔均匀的值，其方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linespace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, restep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><p>start：序列的起始值。</p></li><li><p>stop：序列的结束值。</p></li><li><p>num：生成的样本数，默认为50。</p></li><li><p>endpoint：布尔值，若为True，则最后一个样本包含在序列内。</p></li><li><p>restep：布尔值，若为True，返回间距。</p></li><li><p>dtype：数组的类型。</p></li></ul><h4 id="np.concatenate数组拼接">np.concatenate()数组拼接</h4><p>numpy提供了numpy.concatenate()函数，能够一次完成多个数组的拼接。</p><p>实例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])</span><br><span class="line">c = np.array([<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>])</span><br><span class="line">np.concatenate((a,b,c),axis=<span class="number">0</span>)     <span class="comment">#axis=0是默认值</span></span><br><span class="line"><span class="comment"># array([1,2,3,11,22,33,44,55,66]) #对于一维数组拼接，axis的值不影响最后的结果</span></span><br></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">np.concatenate((a,b),axis=<span class="number">0</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;array([[ 1,  2,  3],          #对应列拼接</span></span><br><span class="line"><span class="string">       [ 4,  5,  6],</span></span><br><span class="line"><span class="string">       [11, 21, 31],</span></span><br><span class="line"><span class="string">       [ 7,  8,  9]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">np.concatenate((a,b),axis=<span class="number">1</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 1,  2,  3, 11, 21, 31],  #对应行拼接</span></span><br><span class="line"><span class="string">       [ 4,  5,  6,  7,  8,  9]])  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>oncatenate()效率更高，适合大规模的数据拼接。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;Numpy是一个开源的Python科学计算库，它是Python科学计算库的基础库，许多其他著名的科学计算库如Pandas、Scikit-learn等，都要用的Numpy库的一些功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;科学计算，Numpy&lt;/p&gt;</summary>
    
    
    
    
    <category term="Numpy" scheme="https://www.fly97.cn/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>NLTK简介</title>
    <link href="https://www.fly97.cn/p/an-introduction-to-NLTK/"/>
    <id>https://www.fly97.cn/p/an-introduction-to-NLTK/</id>
    <published>2020-09-17T11:43:00.000Z</published>
    <updated>2020-09-17T11:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了NLTK语言工具包。</p><p><strong>摘要：</strong>自然语言处理（NLP）是计算机科学领域与人工智能的一个重要方向。他研究实现人与计算机之间用自然语言进行有效的通信的各种领域和方法，涉及所有用计算机对自然语言处理进行的操作。以下例子是基于Python语言和一个名为NLTK的自然语言工具包的开源库实现的。</p><p><strong>关键词：</strong>自然语言处理，NLP，NLTK</p><a id="more"></a><p>NLTK创建于2001年，最初是宾夕法尼亚州立大学计算机与信息科学系计算语言学课程的一部分。从那以后，在数十名贡献者的帮助下不断发展壮大，如今，它已被数十所大学的课程所采纳，并作为许多项目研究的基础。</p><h3 id="第一章-语言处理与python">第一章 语言处理与Python</h3><p>提出问题：</p><ol type="1"><li>通过将技术性较为简单的程序与大规模文本结合起来，我们能实现什么？</li><li>如何自动的提取处关键字和词组，用来总结文本的风格和内容？</li><li>Python编程语言为上述工作提供了哪些工具和技术？</li><li>自然语言处理中有哪些有趣的挑战呢？</li></ol><h4 id="语言计算文本和词汇">语言计算：文本和词汇</h4><h5 id="安装nltk">安装nltk</h5><p>使用pip进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure><p>输入以下命令来安装数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.download()</span><br></pre></td></tr></table></figure><p>或者直接点击以下链接进行下载：<a href="https://github.com/nltk/nltk_data/archive/gh-pages.zip">点击下载</a></p><p>这里使用第二种方法。</p><p>下载完毕以后得到如图所示的压缩文件</p><figure><img src="https://ftp.fly97.cn/image/image-20200917210303624.png" alt="image-20200917210303624" /><figcaption>image-20200917210303624</figcaption></figure><p>解压并打开文件夹</p><figure><img src="https://ftp.fly97.cn/image/image-20200917210405366.png" alt="image-20200917210405366" /><figcaption>image-20200917210405366</figcaption></figure><p>打开packages，复制路径，添加<code>NLTK_DATA</code>到环境变量</p><figure><img src="https://ftp.fly97.cn/image/image-20200917210518955.png" alt="image-20200917210518955" /><figcaption>image-20200917210518955</figcaption></figure><p>测试是否安装成功</p><figure><img src="https://ftp.fly97.cn/image/image-20200917210938768.png" alt="image-20200917210938768" /><figcaption>image-20200917210938768</figcaption></figure><p>输入以下命令加载一些我们需要的文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200917211222091.png" alt="image-20200917211222091" /><figcaption>image-20200917211222091</figcaption></figure><p>无论什么时候想要找到这些文本，只需要在Python提示符后面输入它的名字即可</p><figure><img src="https://ftp.fly97.cn/image/image-20200917211343198.png" alt="image-20200917211343198" /><figcaption>image-20200917211343198</figcaption></figure><h5 id="搜索文本">搜索文本</h5><p>除了简单地阅读文本之外，还有很多方法可以用来查看文本内容。词语索引视图可以显示指定单词地出现情况，同时可以显示一些上下文。</p><p>使用以下方法搜索<code>text1</code>文本中的<code>monstrous</code>单词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text1.concordance(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure><p>搜索结果</p><figure><img src="https://ftp.fly97.cn/image/image-20200917212148198.png" alt="image-20200917212148198" /><figcaption>image-20200917212148198</figcaption></figure><p>小试牛刀：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text2.concordance(<span class="string">&#x27;lived&#x27;</span>)</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200917212629370.png" alt="image-20200917212629370" /><figcaption>image-20200917212629370</figcaption></figure><p>关键词索引可以让我们看到上下文中的词，例如，可以看到monstrous出现在文章中，如the __ pictures 和 the __ size，<strong>还有那些词出现在相似地上下文</strong>中？可以通过以下函数查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text1.similar(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/image/image-20200917220851114.png" /></p><p>使用以下函数研究<strong>共用两个或者两个以上的词汇的上下文</strong>，如monstrous 和 very. 使用方括号和圆括号讲这些词括起来，中间用逗号分割。</p><p>【在<strong>text2</strong>找到用法、意义与该单词集合相似的词 】</p><p>【用来识别2个关键词相似的词语。】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text2.common_contexts([&quot;monstrous&quot;, &quot;very&quot;])</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200917223058920.png" alt="image-20200917223058920" /><figcaption>image-20200917223058920</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了NLTK语言工具包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;自然语言处理（NLP）是计算机科学领域与人工智能的一个重要方向。他研究实现人与计算机之间用自然语言进行有效的通信的各种领域和方法，涉及所有用计算机对自然语言处理进行的操作。以下例子是基于Python语言和一个名为NLTK的自然语言工具包的开源库实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;自然语言处理，NLP，NLTK&lt;/p&gt;</summary>
    
    
    
    
    <category term="自然语言处理" scheme="https://www.fly97.cn/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python的一些高级用法</title>
    <link href="https://www.fly97.cn/p/Some-advanced-usages-of-Python/"/>
    <id>https://www.fly97.cn/p/Some-advanced-usages-of-Python/</id>
    <published>2020-09-10T07:00:00.000Z</published>
    <updated>2020-09-10T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文介绍了一些Python的一些常见的高级用法。</p><a id="more"></a><h4 id="format格式化字符串">format格式化字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br></pre></td></tr></table></figure><h5 id="按照位置来填充">按照位置来填充</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918213811743.png" alt="image-20200918213811743" /><figcaption>image-20200918213811743</figcaption></figure><h6 id="同一个参数可以填充多次">同一个参数可以填充多次</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;0&#125;---&#123;0&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918214059634.png" alt="image-20200918214059634" /><figcaption>image-20200918214059634</figcaption></figure><h5 id="通过索引来填充">通过索引来填充</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;[0]&#125;&quot;</span>.format(s1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(l1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(t1))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918215314962.png" alt="image-20200918215314962" /><figcaption>image-20200918215314962</figcaption></figure><p>另外一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;p[1]&#125;&quot;</span>.format(p=s1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=l1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=t1))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918215656093.png" alt="image-20200918215656093" /><figcaption>image-20200918215656093</figcaption></figure><h4 id="三元运算符">三元运算符</h4><p>固定格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[on_true]  if  [expression]  else [on_false]</span><br></pre></td></tr></table></figure><p>上式表达的语义为：若<strong>表达式expression</strong>的结果为<strong>真</strong>，该式的结果是<strong>[on_true]</strong>；若<strong>表达式expression</strong>的结果为<strong>假</strong>，则该式的结果是<strong>[on_false]</strong></p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a-b <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> a+b</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918221607752.png" alt="image-20200918221607752" /><figcaption>image-20200918221607752</figcaption></figure><h4 id="lambda表达式">Lambda表达式</h4><p>Python使用Lambda表达式创建匿名函数</p><ul><li>Lambda只是一个表达式，函数体比def简单的多</li><li>Lambda的主体是一个表达式，而不是一个代码块，只能在lambda表达式中封装有限的逻辑进去</li><li>Lambda函数拥有自己的名字空间，且不能访问自有参数列表之外或全局名字空间里的参数。</li><li>虽然lamda函数看起来只能写一行，却不等于C或C++的内联函数，后者是调用小函数时不占用内存，从而提升运行效率。</li></ul><p>Lambda表达式语法：<code>lambda argument_list: expression</code></p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">summary = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(<span class="string">&quot;summary=&#123;&#125;&quot;</span>.format(summary(<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918230330027.png" alt="image-20200918230330027" /><figcaption>image-20200918230330027</figcaption></figure><p>上述lambda表达式与以下函数等价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summary</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918231354891.png" alt="image-20200918231354891" /><figcaption>image-20200918231354891</figcaption></figure><h4 id="map函数">map函数</h4><p>map是Python的高级函数，为函数式编程提供便利。</p><p>形式为<code>map(func, *iterables)</code>：第一个参数func是一个函数的名字；第二个参数为一个可迭代对象。map将函数func应用于列表的所有元素。</p><p>在Python3之前，map用于返回一个列表，其中结果列表的每个元素都是应用于列表或元组序列相应元素上的func结果。</p><p>在Python3中，map返回一个迭代器。</p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">F = list(map(<span class="keyword">lambda</span> x:x*x, seq_list))</span><br><span class="line">print(F)</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200918233144997.png" alt="image-20200918233144997" /><figcaption>image-20200918233144997</figcaption></figure><p>map可以用于多个列表，列表不必有相同的长度。map会将<code>lambda函数</code>应用于参数列表的元素，即它首先应用于具有第0个索引的元素，然后应用于具有第一个索引的元素，直到第n个索引。</p><p>如果一个列表的元素少于其他元素，当最短列表消耗完时，map结束迭代。</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">c = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用到多个列表</span></span><br><span class="line">ab = list(map(<span class="keyword">lambda</span> x,y:x + y, a, b))</span><br><span class="line">print(ab)</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200920142041359.png" alt="image-20200920142041359" /><figcaption>image-20200920142041359</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若其中一个列表的元素少于其他元素, 当最短列表消耗完时, map停止迭代</span></span><br><span class="line">ac = list(map(<span class="keyword">lambda</span> x,y:x + y, a, c))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200920142144318.png" alt="image-20200920142144318" /><figcaption>image-20200920142144318</figcaption></figure><h4 id="filter函数">Filter函数</h4><p>filter也是Python的高级函数，为函数式编程提供便利。其作用是对序列中元素进行筛选，最终获得符合条件的序列。其一般形式为<strong>filter(function, iterable)</strong>，函数提供了一种优雅的方式来过滤掉序列中那个的所有元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 找到序列中的偶数</span></span><br><span class="line">double_number = list(filter(<span class="keyword">lambda</span> x:x % <span class="number">2</span> ==<span class="number">0</span>, number))</span><br></pre></td></tr></table></figure><figure><img src="https://ftp.fly97.cn/image/image-20200920144322294.png" alt="image-20200920144322294" /><figcaption>image-20200920144322294</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;此文介绍了一些Python的一些常见的高级用法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.fly97.cn/tags/Python/"/>
    
  </entry>
  
</feed>
