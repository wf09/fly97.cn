<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>2021.cyou</title>
  
  
  <link href="https://2021.cyou/atom.xml" rel="self"/>
  
  <link href="https://2021.cyou/"/>
  <updated>2021-05-31T02:08:00.000Z</updated>
  <id>https://2021.cyou/</id>
  
  <author>
    <name>fly97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用cloudflare wrap为只有ipv4地址的服务器解锁ipv6</title>
    <link href="https://2021.cyou/p/use-wrap-unlock-ipv6/"/>
    <id>https://2021.cyou/p/use-wrap-unlock-ipv6/</id>
    <published>2021-05-31T02:08:00.000Z</published>
    <updated>2021-05-31T02:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>使用cloudflare wrap为只有ipv4地址的服务器解锁ipv6</p><p><strong>关键词</strong>：cloudflare ，wrap</p><a id="more"></a><h3 id="准备工作">准备工作</h3><ul><li>一台Deian 系的服务器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl sudo lsb-release -y</span><br></pre></td></tr></table></figure><h4 id="debian安装">debian安装</h4><ol type="1"><li>安装版本高于 5.6 的内核</li><li>安装 wireguard 内核模块</li><li>安装 wireguard-go</li></ol><h5 id="添加backports源">添加backports源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://deb.debian.org/debian <span class="subst">$(lsb_release -sc)</span>-backports main&quot;</span> | sudo tee /etc/apt/sources.list.d/backports.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>先执行 <code>uname -r</code> 命令查看内核版本。如果是 5.6 以上内核则已经集成了 Wire­Guard ，就不需要安装了。</p><h5 id="安装网络工具包">安装网络工具包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools iproute2 openresolv dnsutils -y</span><br></pre></td></tr></table></figure><p>安装 <strong><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL1dpcmVHdWFyZC93aXJlZ3VhcmQtdG9vbHM">wireguard-tools</a></strong> (Wire­Guard 配置工具：<code>wg</code>、<code>wg-quick</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wireguard-tools --no-install-recommends</span><br></pre></td></tr></table></figure><h5 id="安装内核">安装内核</h5><p>为了稳定性推荐安装 back­ports 仓库中的内核 (截止发文版本为 5.10)。以下是一把梭命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -t $(lsb_release -sc)-backports install linux-image-$(dpkg --print-architecture) linux-headers-$(dpkg --print-architecture) --install-recommends -y</span><br></pre></td></tr></table></figure><p>安装完重启，并执行 <code>uname -r</code> 命令查看内核版本来确认新内核是否被启用。</p><h4 id="debian安装动态内核模块">debian安装动态内核模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wireguard-dkms -y</span><br></pre></td></tr></table></figure><p>安装后执行 <code>modprobe wireguard</code> 命令加载 Wire­Guard 内核模块。</p><h4 id="debian安装wireguard-go">debian安装wireguard-go</h4><p>OpenVZ/LXC VPS 或者不想折腾内核的小伙伴可以安装 <code>wireguard-go</code>，只不过网络性能较低。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL git.io/wireguard-go.sh | sudo bash</span><br></pre></td></tr></table></figure><p>PS：对于 OpenVZ/LXC 的 VPS 需要执行<code>lsmod | grep tun</code>命令来检查 TUN 模块是否正常加载，若没有请自行咕鸽搜索开启方法，否则是不能正常使用的。</p><h4 id="ubuntu安装">ubuntu安装</h4><p>WireGuard可从默认的Ubuntu存储库中获得。 要安装它，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install wireguard</span><br></pre></td></tr></table></figure><p>这将安装WireGuard模块和工具。WireGuard作为内核模块运行。</p><h3 id="配置warp">配置WARP</h3><h4 id="安装wgcf">安装wgcf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL git.io/wgcf.sh | sudo bash</span><br></pre></td></tr></table></figure><h4 id="注册-warp-账户-将生成-wgcf-account.toml-文件保存账户信息">注册 WARP 账户 (将生成 <code>wgcf-account.toml</code> 文件保存账户信息)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf register</span><br></pre></td></tr></table></figure><h4 id="生成wireguard配置文件wgcf-profile.conf">生成WireGuard配置文件(wgcf-profile.conf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf generate</span><br></pre></td></tr></table></figure><p>生成的两个文件记得备份好，尤其是 <code>wgcf-profile.conf</code>，万一未来工具失效、重装系统后可能还用得着。</p><h4 id="编辑wireguard配置文件">编辑WireGuard配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim wgcf-profile.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey &#x3D; *</span><br><span class="line">Address &#x3D; *</span><br><span class="line">Address &#x3D; *</span><br><span class="line">DNS &#x3D; 2001:4860:4860::8888</span><br><span class="line">MTU &#x3D; 1280</span><br><span class="line">[Peer]</span><br><span class="line">PublicKey &#x3D; *</span><br><span class="line">AllowedIPs &#x3D; ::&#x2F;0</span><br><span class="line">Endpoint &#x3D; [2606:4700:d0::a29f:c001]:2408</span><br></pre></td></tr></table></figure><p>默认的<code>Endpoint</code>为 <code>engage.cloudflareclient.com</code>，解析成ip一般是以下两个结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">162.159.192.1</span><br><span class="line">2606:4700:d0::a29f:c001</span><br></pre></td></tr></table></figure><p>如果想优先使用<code>warp</code>的ipv4地址访问外部网络，则<code>Endpoint</code> 需要设置为ipv4的地址；ipv6依次类推。</p><p>DNS也是一样，如果想用ipv4地址，则需要设置一个ipv4的DNS地址，如<code>8.8.8.8</code>；ipv6则是<code>2001:4860:4860::8888</code>.</p><h4 id="将修改好的配置文件移动到指定目录">将修改好的配置文件移动到指定目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</span><br></pre></td></tr></table></figure><h4 id="开启网络接口">开启网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick up wgcf</span><br></pre></td></tr></table></figure><h5 id="有可能遇到的问题">有可能遇到的问题</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/wg-quick: line 31: resolvconf: <span class="built_in">command</span> not found [WireGuard | Debian]</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/resolvectl /usr/<span class="built_in">local</span>/bin/resolvconf</span><br></pre></td></tr></table></figure><h4 id="关闭网络接口">关闭网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg-quick down wgcf</span><br></pre></td></tr></table></figure><h4 id="正式启用网络接口">正式启用网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用守护进程</span></span><br><span class="line">sudo systemctl start wg-quick@wgcf</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> wg-quick@wgcf</span><br></pre></td></tr></table></figure><h3 id="使用warp">使用WARP+</h3><h4 id="如何获得更多的warp流量">如何获得更多的Warp+流量</h4><p>自动化脚本：https://github.com/navaneethkm004/warp-plus/raw/main/main.py</p><p>需要Python3，执行之前请运行：<code>chmod +x main.py</code></p><p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_01.png" /></p><p>ID获取方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat wgcf-account.toml</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_02.png" /></p><p>输入ID以后，程序开始运行</p><p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_03.png" /></p><p>查看增加的流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf update &amp;&amp; wgcf status</span><br></pre></td></tr></table></figure><h4 id="多个设备共享">多个设备共享</h4><p>将多台设备的<code>license_key</code>设置为同一个，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wgcf update &amp;&amp; wgcf status</span><br></pre></td></tr></table></figure><h4 id="检测warp是否启用">检测warp+是否启用</h4><p>服务器端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -6 https://cloudflare.com/cdn-cgi/trace</span><br></pre></td></tr></table></figure><figure><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20210603163540000.png" alt="image-20210603163540000" /><figcaption>image-20210603163540000</figcaption></figure><p>若<code>warp=plus</code>则说明启用成功。</p><p>若<code>warp=on</code>则需要指向以下操作：</p><ol type="1"><li><p>执行<code>wgcf register</code>重新生成一个账户；</p></li><li><p>修改生成的<code>wgcf-account.toml</code>，绑定<code>license_key</code>；</p></li><li><p>执行<code>wgcf generate</code>生成WireGuard VPN配置文件；</p></li><li><p>执行<code>sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</code>；</p></li><li><p>启动网络接口，<code>sudo wg-quick up wgcf</code>；</p></li><li><p>执行<code>curl -6 https://cloudflare.com/cdn-cgi/trace</code>.</p></li></ol><p>如果<code>warp</code>的值没有发生变化，需要重新执行1-6步骤。</p><h3 id="end">END</h3><p>感谢：</p><p>https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html</p><p>https://hiram.wang/cloudflare-wrap-vps/#2021-03%E6%9B%B4%E6%96%B0-%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%8D%9F%E5%8F%8C%E6%A0%88</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;使用cloudflare wrap为只有ipv4地址的服务器解锁ipv6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：cloudflare ，wrap&lt;/p&gt;</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://2021.cyou/tags/cloudflare/"/>
    
    <category term="wrap" scheme="https://2021.cyou/tags/wrap/"/>
    
  </entry>
  
  <entry>
    <title>screw_system项目文档</title>
    <link href="https://2021.cyou/p/screw_system-project-documentation/"/>
    <id>https://2021.cyou/p/screw_system-project-documentation/</id>
    <published>2021-05-31T02:08:00.000Z</published>
    <updated>2021-05-31T02:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词</strong>：Python，screw</p><a id="more"></a><h3 id="qt相关">Qt相关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mainDialog</span>(<span class="params">QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=None</span>):</span></span><br><span class="line">        super(mainDialog, self).__init__(parent)</span><br><span class="line">        self.label_logo = QLabel()</span><br><span class="line">        self.label_task_step = QLabel()</span><br><span class="line">        self.btn_create = QPushButton(<span class="string">&quot;编辑任务&quot;</span>, self)</span><br><span class="line">        self.btn_display = QPushButton(<span class="string">&quot; 工作台 &quot;</span>, self)</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 设置窗口标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置对象名</span></span><br><span class="line">        self.setObjectName(<span class="string">&quot;initWindow&quot;</span>)</span><br><span class="line">        <span class="comment"># 自定义前景色和背景色</span></span><br><span class="line">        self.setStyleSheet(<span class="string">&quot;#initWindow&#123;background-color: &quot;</span> + config.get(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        main_x = CREATE_X*<span class="number">2</span></span><br><span class="line">        main_y = CREATE_Y*<span class="number">2</span></span><br><span class="line">        <span class="comment"># 顶端页面</span></span><br><span class="line">        icon = QPixmap()</span><br><span class="line">        <span class="comment"># 读取base64图片</span></span><br><span class="line">        icon.loadFromData(danfoss_logo_data)</span><br><span class="line">        <span class="comment"># 设置图片缩放</span></span><br><span class="line">        danfoss_logo = icon.scaled(main_x * <span class="number">0.25</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 在QLabel上显示图片</span></span><br><span class="line">        self.label_logo.setPixmap(danfoss_logo)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># danfoss_logo = QtGui.QPixmap(&#x27;logo_2.png&#x27;).scaled(screen_height * 0.25, screen_height * 0.06)</span></span><br><span class="line">        <span class="comment"># self.label_logo.setPixmap(danfoss_logo)</span></span><br><span class="line">        <span class="comment"># 设置小部件的宽度和高度</span></span><br><span class="line">        self.label_logo.setFixedSize(main_x * <span class="number">0.25</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 设置空间文字</span></span><br><span class="line">        self.label_task_step.setText(<span class="string">&#x27;欢迎来到智能螺丝刀系统&#x27;</span>)</span><br><span class="line">        <span class="comment"># 自定义QLabel部件的宽度和高度</span></span><br><span class="line">        self.label_task_step.setFixedSize(main_x * <span class="number">0.75</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 自定义QLabel的样式</span></span><br><span class="line">        self.label_task_step.setStyleSheet(STYLE_TITLE_TOP)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置QPushButton的宽度和高度</span></span><br><span class="line">        self.btn_create.setFixedSize(main_x/<span class="number">2</span>, main_y)</span><br><span class="line">        <span class="comment"># 设置QPushButton的样式表</span></span><br><span class="line">        self.btn_create.setStyleSheet(STYLE_MAIN_BTN)</span><br><span class="line">        <span class="comment"># 绑定open_createUI()函数</span></span><br><span class="line">        self.btn_create.clicked.connect(self.open_createUI)</span><br><span class="line">        <span class="comment"># 设置QPushButton的宽度和高度</span></span><br><span class="line">        self.btn_display.setFixedSize(main_x/<span class="number">2</span>, main_y)</span><br><span class="line">        <span class="comment"># 设置QPushButton的样式表</span></span><br><span class="line">        self.btn_display.setStyleSheet(STYLE_MAIN_BTN)</span><br><span class="line">        <span class="comment"># 绑定open_mainUI()函数</span></span><br><span class="line">        self.btn_display.clicked.connect(self.open_mainUI)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建水平布局hbox_btn</span></span><br><span class="line">        hbox_btn = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置默认的外边框边距为0</span></span><br><span class="line">        hbox_btn.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 添加编辑任务按钮</span></span><br><span class="line">        hbox_btn.addWidget(self.btn_create)</span><br><span class="line">        <span class="comment"># 添加工作台按钮</span></span><br><span class="line">        hbox_btn.addWidget(self.btn_display)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建水平布局</span></span><br><span class="line">        hbox_top = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置四周边框</span></span><br><span class="line">        hbox_top.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把QLabel添加到水平布局hbox_top</span></span><br><span class="line">        hbox_top.addWidget(self.label_task_step)</span><br><span class="line">        <span class="comment"># 创建一个空框</span></span><br><span class="line">        hbox_top.addSpacing(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把QLabel添加到水平布局hbox_top</span></span><br><span class="line">        hbox_top.addWidget(self.label_logo)</span><br><span class="line">        <span class="comment"># 创建一个垂直布局vbox</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        <span class="comment"># 把水平布局hbox_top添加到垂直布局vbox</span></span><br><span class="line">        vbox.addLayout(hbox_top)</span><br><span class="line">        <span class="comment"># 把水平布局hbox_btn添加到垂直布局vbox</span></span><br><span class="line">        vbox.addLayout(hbox_btn)</span><br><span class="line">        <span class="comment"># 把垂直布局vbox添加到QDialog</span></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 设置无边框窗口样式</span></span><br><span class="line">        <span class="comment"># self.setWindowFlags(Qt.FramelessWindowHint)</span></span><br><span class="line">        <span class="comment"># 从屏幕上((screen_width - main_x) / 2, (screen_height - main_y) / 2))位置开始, 显示一个(宽:main_x, 高:main_x) </span></span><br><span class="line">        self.setGeometry((screen_width - main_x) / <span class="number">2</span>,</span><br><span class="line">                         (screen_height - main_y) / <span class="number">2</span>,</span><br><span class="line">                         main_x,</span><br><span class="line">                         main_y)</span><br><span class="line">        <span class="comment"># 非模态对话框</span></span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_createUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.create_window = createUI.EditorWindow()</span><br><span class="line">        self.create_window.showFullScreen()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_mainUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.create_window = mainUI.MainWindow()</span><br><span class="line">        self.create_window.showFullScreen()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="createui.py">createUI.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint, QMetaObject</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QPixmap, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QWidget, QApplication, QLabel, QLineEdit, QTableWidget, \</span><br><span class="line">    QAbstractItemView, QTableWidgetItem, QFileDialog, QMessageBox, QHeaderView, QTextEdit, QVBoxLayout, QHBoxLayout, \</span><br><span class="line">    QGridLayout</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> py_MySQL</span><br><span class="line"><span class="keyword">from</span> display <span class="keyword">import</span> importStepDialog</span><br><span class="line"><span class="keyword">from</span> display.config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;table.csv&quot;</span></span><br><span class="line"></span><br><span class="line">coordinate_x = [<span class="number">0</span>] * eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line">coordinate_y = [<span class="number">0</span>] * eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line"></span><br><span class="line">current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))):</span><br><span class="line">    table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggableButton</span>(<span class="params">QPushButton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, parent</span>):</span></span><br><span class="line">        super().__init__(title, parent)</span><br><span class="line">        self.iniDragCor = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        self.num = int(title)</span><br><span class="line">        <span class="comment"># print(self.num)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="comment"># print(&quot;click&quot;, e.pos())</span></span><br><span class="line">        self.iniDragCor[<span class="number">0</span>] = e.x()</span><br><span class="line">        self.iniDragCor[<span class="number">1</span>] = e.y()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        x = e.x() - self.iniDragCor[<span class="number">0</span>]</span><br><span class="line">        y = e.y() - self.iniDragCor[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        cor = QPoint(x, y)</span><br><span class="line">        self.move(self.mapToParent(cor))  <span class="comment"># 需要mapToParent一下才可以的,否则只是相对位置。</span></span><br><span class="line">        <span class="comment"># print(&#x27;drag button event,&#x27;, time.time(), e.pos(), e.x(), e.y())</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line">        coordinate_x[self.num - <span class="number">1</span>] = self.geometry().x()</span><br><span class="line">        coordinate_y[self.num - <span class="number">1</span>] = self.geometry().y()</span><br><span class="line">        self.setText(str(self.num))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">1</span>] = self.num</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">6</span>] = coordinate_x[self.num - <span class="number">1</span>]</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">7</span>] = coordinate_y[self.num - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def getDialogSignal(self, connect):</span></span><br><span class="line">    <span class="comment">#     # screw = list(str(self.num))</span></span><br><span class="line">    <span class="comment">#     screw = connect.split(&#x27;,&#x27;)</span></span><br><span class="line">    <span class="comment">#     # screw = screw + data</span></span><br><span class="line">    <span class="comment">#     table[self.num - 1][1] = screw[0]</span></span><br><span class="line">    <span class="comment">#     table[self.num - 1][2] = screw[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditorWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        <span class="comment"># 按钮样式</span></span><br><span class="line">        self.table_widget = QTableWidget(self)</span><br><span class="line">        self.btn_open = QPushButton(<span class="string">&quot;新建步骤&quot;</span>, self)</span><br><span class="line">        self.btn_import = QPushButton(<span class="string">&quot;导入步骤&quot;</span>, self)</span><br><span class="line">        self.btn_change_pic = QPushButton(<span class="string">&quot;修改图片&quot;</span>, self)</span><br><span class="line">        self.label_code = QLabel(<span class="string">&quot;电子条形码:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_code</span></span><br><span class="line">        self.edit_code = QLineEdit(self)</span><br><span class="line">        self.label_product = QLabel(<span class="string">&quot;产品:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_product</span></span><br><span class="line">        self.edit_product = QLineEdit(self)</span><br><span class="line">        self.label_task = QLabel(<span class="string">&quot;任务:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_product</span></span><br><span class="line">        self.edit_task = QLineEdit(self)</span><br><span class="line">        self.label_step = QLabel(<span class="string">&quot;步骤:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_step</span></span><br><span class="line">        self.edit_step = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_del_step = QPushButton(&quot;删除步骤&quot;, self)</span></span><br><span class="line">        self.btn_save = QPushButton(<span class="string">&quot;保存步骤&quot;</span>, self)</span><br><span class="line">        self.btn_exit = QPushButton(<span class="string">&quot;  退出  &quot;</span>, self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.label_top = QLabel(self)</span></span><br><span class="line">        <span class="comment"># 创建多行文本框控件textedit_keypoint, textedit_sequence</span></span><br><span class="line">        self.textedit_keypoint = QTextEdit(self)</span><br><span class="line">        self.textedit_sequence = QTextEdit(self)</span><br><span class="line">        <span class="comment"># 创建QLabel:label_keypoint_title</span></span><br><span class="line">        self.label_keypoint_title = QLabel(self)</span><br><span class="line">        <span class="comment"># 创建QLabel:label_sequence_title</span></span><br><span class="line">        self.label_sequence_title = QLabel(self)</span><br><span class="line">        </span><br><span class="line">        self.label_pic = QLabel(self)</span><br><span class="line"></span><br><span class="line">        self.codes = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># returnPressed：按下返回或者回车时会发送此信号</span></span><br><span class="line">        self.edit_code.returnPressed.connect(self.edit_code_add)</span><br><span class="line">        <span class="comment"># self.cb_base_mode = QCheckBox(&quot;精简模式&quot;, self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 顶部的红色背景</span></span><br><span class="line">        self.label_tips = QLabel(self)</span><br><span class="line">        <span class="comment"># 顶部的Logo</span></span><br><span class="line">        self.label_logo = QLabel(self)</span><br><span class="line">        self.btn_refresh = QPushButton(<span class="string">&quot;刷新表格&quot;</span>, self)</span><br><span class="line">        self.btn_del_screw = QPushButton(<span class="string">&quot;删除螺丝&quot;</span>, self)</span><br><span class="line">        self.list_task_sequence = []  <span class="comment"># task_sequence 表格数据</span></span><br><span class="line">        <span class="comment"># self.list_draggable_button = []  # 单个页面中的按钮</span></span><br><span class="line">        self.tasks_table = <span class="literal">None</span></span><br><span class="line">        self.task_sequence = <span class="literal">None</span></span><br><span class="line">        self.step, self.img, self.codes = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.product, self.task, self.step = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.keypoint, self.sequence = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.mac_address = self.get_mac_address()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.list_draggable_button = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;新建任务&quot;</span>)</span><br><span class="line">        self.setObjectName(<span class="string">&quot;EditorWindow&quot;</span>)</span><br><span class="line">        self.setStyleSheet(<span class="string">&quot;#EditorWindow&#123;background-color: &quot;</span> + config.get(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;BACKGROUND_COLOR&quot;</span>) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="comment"># screen = QDesktopWidget().screenGeometry()</span></span><br><span class="line">        <span class="comment"># 手动设置全屏</span></span><br><span class="line">        self.setGeometry(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height)</span><br><span class="line">        <span class="comment"># 设置字体字号</span></span><br><span class="line">        self.font_label = QtGui.QFont()</span><br><span class="line">        self.font_label.setFamily(<span class="string">&quot;黑体&quot;</span>)  <span class="comment"># 括号里可以设置成自己想要的其它字体</span></span><br><span class="line">        <span class="comment"># 获得字体大小</span></span><br><span class="line">        pointsize = self.font_label.pointSize()</span><br><span class="line">        <span class="comment"># 设置字体像素大小</span></span><br><span class="line">        self.font_label.setPixelSize(pointsize * screen_width / <span class="number">1920</span> * <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 顶端页面</span></span><br><span class="line">        icon = QPixmap()</span><br><span class="line">        <span class="comment"># 读取base64照片</span></span><br><span class="line">        icon.loadFromData(danfoss_logo_data)</span><br><span class="line">        <span class="comment"># 设置图片缩放</span></span><br><span class="line">        danfoss_logo = icon.scaled(screen_height * <span class="number">0.25</span>, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        self.label_logo.setPixmap(danfoss_logo)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># danfoss_logo = QtGui.QPixmap(&#x27;logo_2.png&#x27;).scaled(screen_height * 0.25, screen_height * 0.06)</span></span><br><span class="line">        <span class="comment"># 固定窗口大小</span></span><br><span class="line">        self.label_logo.setFixedSize(screen_height * <span class="number">0.25</span>, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># self.label_task_step.setText(</span></span><br><span class="line">        <span class="comment">#     &quot;    工位:&quot; + self.station + &quot;    产品:&quot; + self.product + &quot;    任务:&quot; + self.task + &quot;   步骤：&quot; + str(</span></span><br><span class="line">        <span class="comment">#         self.stepNo + 1))</span></span><br><span class="line">        self.label_tips.setFixedSize(screen_width, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        self.label_tips.setStyleSheet(STYLE_TITLE_TOP)</span><br><span class="line">        <span class="comment"># self.label_task_step.setFont(font_label)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 垂直布局</span></span><br><span class="line">        vbox_btn = QVBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        vbox_btn.setContentsMargins(margin_x, margin_y * <span class="number">1.5</span>, margin_x * <span class="number">0.8</span>, margin_y * <span class="number">4.8</span>)</span><br><span class="line">        <span class="comment"># 按比例分配剩余空间</span></span><br><span class="line">        <span class="comment"># vbox_btn.addStretch(1)</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_open)</span><br><span class="line">        vbox_btn.addWidget(self.btn_import)</span><br><span class="line">        vbox_btn.addWidget(self.btn_change_pic)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">5</span>)</span><br><span class="line">        vbox_btn.addWidget(self.label_code)</span><br><span class="line">        vbox_btn.addWidget(self.edit_code)</span><br><span class="line">        vbox_btn.addWidget(self.label_product)</span><br><span class="line">        vbox_btn.addWidget(self.edit_product)</span><br><span class="line">        vbox_btn.addWidget(self.label_task)</span><br><span class="line">        vbox_btn.addWidget(self.edit_task)</span><br><span class="line">        vbox_btn.addWidget(self.label_step)</span><br><span class="line">        vbox_btn.addWidget(self.edit_step)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># vbox_btn.addWidget(self.cb_base_mode)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除螺丝按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_del_screw)</span><br><span class="line">        <span class="comment"># 刷新表格按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_refresh)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 保存步骤按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_save)</span><br><span class="line">        <span class="comment"># 退出按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_exit)</span><br><span class="line">        <span class="comment"># vbox_btn.addStretch(5)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 操作要点</span></span><br><span class="line">        hbox_keypoint = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        hbox_keypoint.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_keypoint.addWidget(self.label_keypoint_title)</span><br><span class="line">        hbox_keypoint.setSpacing(<span class="number">0</span>)</span><br><span class="line">        hbox_keypoint.addWidget(self.textedit_keypoint)</span><br><span class="line">        <span class="comment"># 操作步骤</span></span><br><span class="line">        hbox_sequence = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        hbox_sequence.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_sequence.addWidget(self.label_sequence_title)</span><br><span class="line">        hbox_sequence.setSpacing(<span class="number">0</span>)</span><br><span class="line">        hbox_sequence.addWidget(self.textedit_sequence)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 格栅布局grid</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        <span class="comment"># (0, 0)左上</span></span><br><span class="line">        grid.addWidget(self.label_pic, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># (1, 0)左下</span></span><br><span class="line">        grid.addLayout(hbox_keypoint, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># (0, 1)右上</span></span><br><span class="line">        grid.addWidget(self.table_widget, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># (0, 1)右下</span></span><br><span class="line">        grid.addLayout(hbox_sequence, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 控制各个控件之间的上下边距</span></span><br><span class="line">        grid.setSpacing(margin_x * <span class="number">0.5</span>)</span><br><span class="line">        grid.setContentsMargins(<span class="number">0</span>, margin_y, <span class="number">0</span>, margin_y * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        hbox_top = QHBoxLayout()</span><br><span class="line">        hbox_top.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_top.addWidget(self.label_tips)</span><br><span class="line">        hbox_top.addWidget(self.label_logo)</span><br><span class="line">        <span class="comment"># hbox_top.addStretch(1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># hbox_top.addWidget(self.label_tips)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左右布局QHBoxLayout</span></span><br><span class="line">        hbox_main = QHBoxLayout()</span><br><span class="line">        hbox_main.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_main.addLayout(vbox_btn)</span><br><span class="line">        hbox_main.addLayout(grid)</span><br><span class="line">        hbox_main.addStretch(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上下布局QHBoxLayout</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addLayout(hbox_top)</span><br><span class="line"></span><br><span class="line">        vbox.addLayout(hbox_main)</span><br><span class="line">        <span class="comment"># vbox.addStretch(10)</span></span><br><span class="line">        vbox.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左侧按钮(vbox1)</span></span><br><span class="line"></span><br><span class="line">        self.btn_open.clicked.connect(self.open_pic)</span><br><span class="line">        self.btn_open.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_open.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.btn_import.clicked.connect(self.import_step)</span><br><span class="line">        self.btn_import.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_import.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.btn_change_pic.clicked.connect(self.change_pic)</span><br><span class="line">        self.btn_change_pic.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_change_pic.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.label_code.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_code.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_product.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_product.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_task.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_task.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_step.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_step.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.cb_base_mode.move(10, 700)</span></span><br><span class="line">        <span class="comment"># self.cb_base_mode.setStyleSheet(</span></span><br><span class="line">        <span class="comment">#     &quot;QCheckBox&#123;color:rgba(251,178,23,255);border-width: &quot;</span></span><br><span class="line">        <span class="comment">#     &quot;1px;border-radius: 10px;&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># self.cb_base_mode.setFont(self.font_btn)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_save.move(20, 830)</span></span><br><span class="line">        self.btn_save.clicked.connect(self.save)</span><br><span class="line">        self.btn_save.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_save.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_exit.move(20, 890)</span></span><br><span class="line">        self.btn_exit.clicked.connect(self.exit)</span><br><span class="line">        self.btn_exit.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_exit.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_refresh.move(self.screen.width() - 150, 20)</span></span><br><span class="line">        self.btn_refresh.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line">        self.btn_refresh.clicked.connect(self.refresh)</span><br><span class="line">        self.btn_refresh.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_del_screw.move(self.screen.width() - 300, 20)</span></span><br><span class="line">        self.btn_del_screw.clicked.connect(self.del_row)</span><br><span class="line">        self.btn_del_screw.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_del_screw.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 图片显示框</span></span><br><span class="line">        self.label_pic.setText(<span class="string">&quot;    请点击新建步骤&quot;</span>)</span><br><span class="line">        self.label_pic.setFixedSize(PICSIZE_WIDTH, PICSIZE_HEIGHT)</span><br><span class="line">        self.label_pic.setStyleSheet(STYLE_LABEL_TEXT)</span><br><span class="line">        <span class="comment"># 右侧表格</span></span><br><span class="line"></span><br><span class="line">        self.row_flag = <span class="number">-1</span>  <span class="comment"># 当前被选中的行索引</span></span><br><span class="line">        self.result = []</span><br><span class="line"></span><br><span class="line">        self.table_widget.setColumnCount((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>))))</span><br><span class="line">        self.table_widget.setRowCount(<span class="number">20</span>)</span><br><span class="line">        self.table_widget.setFixedHeight(TABLE_WIDGET_HEIGHT)</span><br><span class="line">        self.table_widget.setFixedWidth(TABLE_WIDGET_WIDTH)</span><br><span class="line">        self.table_widget.setSelectionBehavior(QAbstractItemView.SelectRows)  <span class="comment"># 设置表格的选取方式是行选取</span></span><br><span class="line">        self.table_widget.setSelectionMode(QAbstractItemView.SingleSelection)  <span class="comment"># 设置选取方式为单个选取</span></span><br><span class="line">        self.table_widget.setHorizontalHeaderLabels(</span><br><span class="line">            [<span class="string">&quot;步骤&quot;</span>, <span class="string">&quot;螺丝\n编号&quot;</span>, <span class="string">&quot;螺丝\n型号&quot;</span>, <span class="string">&quot;螺丝\n长度&quot;</span>, <span class="string">&quot;螺丝刀\n型号&quot;</span>, <span class="string">&quot;标准\n扭矩&quot;</span>, <span class="string">&quot;坐标x&quot;</span>, <span class="string">&quot;坐标y&quot;</span>])  <span class="comment"># 设置行表头</span></span><br><span class="line">        self.table_widget.horizontalHeader().setStyleSheet(STYLE_TABLE)</span><br><span class="line">        self.table_widget.verticalHeader().setVisible(<span class="literal">False</span>)  <span class="comment"># 隐藏列表头</span></span><br><span class="line">        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.table_widget.itemSelectionChanged.connect(self.chioce)  <span class="comment"># 单元格选择改变</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.table_widget.cellChanged.connect(self.save_edit_item)  <span class="comment"># 连接信号槽</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.create_draggable_button()</span><br><span class="line">        <span class="comment"># 左下文字框</span></span><br><span class="line">        self.textedit_keypoint.setText(<span class="string">&#x27;单击此处添加keypoint&#x27;</span>)</span><br><span class="line">        self.textedit_keypoint.setFixedSize(TEXTEDIT_KEYPOINT_WIDTH, TEXTEDIT_KEYPOINT_HEIGHT)</span><br><span class="line">        <span class="comment"># self.textedit_keypoint.setStyleSheet(STYLE_TEXT_WHITE)</span></span><br><span class="line">        self.textedit_keypoint.setFont(self.font_label)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左下文字框标题</span></span><br><span class="line">        self.label_keypoint_title.setFixedSize(LABEL_TITLE_WIDTH, TEXTEDIT_KEYPOINT_HEIGHT)</span><br><span class="line">        self.label_keypoint_title.setStyleSheet(STYLE_TITLE)</span><br><span class="line">        self.label_keypoint_title.setText(<span class="string">&quot;操\n\n作\n\n要\n\n点&quot;</span>)</span><br><span class="line">        self.label_keypoint_title.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 右下文字框</span></span><br><span class="line">        self.textedit_sequence.setText(<span class="string">&#x27;单击此处添加sequence&#x27;</span>)</span><br><span class="line">        self.textedit_sequence.setFixedSize(TEXTEDIT_SEQUENCE_WIDTH, TEXTEDIT_SEQUENCE_HEIGHT)</span><br><span class="line">        <span class="comment"># self.textedit_sequence.setStyleSheet(STYLE_TEXT_WHITE)</span></span><br><span class="line">        self.textedit_sequence.setFont(self.font_label)</span><br><span class="line">        <span class="comment"># 右下文字框标题</span></span><br><span class="line">        self.label_sequence_title.setFixedSize(LABEL_TITLE_WIDTH, TEXTEDIT_SEQUENCE_HEIGHT)</span><br><span class="line">        self.label_sequence_title.setStyleSheet(STYLE_TITLE)</span><br><span class="line">        self.label_sequence_title.setText(<span class="string">&quot;操\n\n作\n\n步\n\n骤&quot;</span>)</span><br><span class="line">        self.label_sequence_title.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        QMetaObject.connectSlotsByName(self)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @pyqtSlot()</span></span><br><span class="line">    <span class="comment"># def on_keypoint_textChanged(self):</span></span><br><span class="line">    <span class="comment">#     # text = self.textedit_keypoint.toPlainText()</span></span><br><span class="line">    <span class="comment">#     # print(text)</span></span><br><span class="line">    <span class="comment">#     self.textedit_keypoint.setFont(self.font_label)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># @pyqtSlot()</span></span><br><span class="line">    <span class="comment"># def on_sequence_textChanged(self):</span></span><br><span class="line">    <span class="comment">#     # text = self.textedit_sequence.toPlainText()</span></span><br><span class="line">    <span class="comment">#     # print(text)</span></span><br><span class="line">    <span class="comment">#     self.textedit_sequence.setFont(self.font_label)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_draggable_button</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 动态推拽按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># button[i] = DraggableButton(str(i + 1), self)</span></span><br><span class="line">            self.list_draggable_button[i] = DraggableButton(str(i + <span class="number">1</span>), self)</span><br><span class="line"></span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setStyleSheet(STYLE_DRAGGABLE_BTN)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_pic</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初始化表格</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>)))):</span><br><span class="line">            table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">        self.edit_code.clear()</span><br><span class="line">        self.textedit_keypoint.clear()</span><br><span class="line">        self.textedit_sequence.clear()</span><br><span class="line">        self.table_widget.setRowCount(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        self.change_pic()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_pic</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        imgName, imgType = QFileDialog.getOpenFileName(self, <span class="string">&quot;打开图片&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;*.png;;*.jpg;;All Files(*)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 导入图片</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fp = open(imgName, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">            self.img = fp.read()</span><br><span class="line">            fp.close()</span><br><span class="line">            photo = QtGui.QPixmap(imgName).scaled(self.label_pic.width(), self.label_pic.height())</span><br><span class="line">            self.label_pic.setPixmap(photo)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;未选择图片！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">import_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.import_step_dialog = importStepDialog.ImportStepDialog()</span><br><span class="line">        self.import_step_dialog.mySignal2.connect(self.get_dialog_signal)</span><br><span class="line">        self.import_step_dialog.exec_()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_edit_item</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                <span class="keyword">if</span> self.table_widget.item(row, col):</span><br><span class="line">                    <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                    <span class="keyword">if</span> col == <span class="number">4</span>:</span><br><span class="line">                        <span class="comment"># 判断是否为整数</span></span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col).text().isdigit():</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;螺丝刀型号请输入整数！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                    <span class="keyword">elif</span> col == <span class="number">3</span> <span class="keyword">or</span> col == <span class="number">5</span>:</span><br><span class="line">                        <span class="comment"># 判断是否为小数</span></span><br><span class="line">                        <span class="keyword">if</span> re.compile(<span class="string">r&#x27;^[-+]?[-0-9]\d*\.\d*|[-+]?\.?[0-9]\d*$&#x27;</span>).match(</span><br><span class="line">                                self.table_widget.item(row, col).text()):</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;螺丝长度和标准扭矩请输入数字！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                    <span class="keyword">elif</span> col == <span class="number">2</span>:</span><br><span class="line">                        table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_row</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">&#x27;删除一行任务记录&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> self.row_flag == <span class="number">-1</span>:</span><br><span class="line">                QMessageBox.about(self, <span class="string">&#x27;提醒&#x27;</span>, <span class="string">&#x27;未选择要删除的行！&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.table_widget.removeRow(self.row_flag)  <span class="comment"># 删除指定行</span></span><br><span class="line"></span><br><span class="line">                self.row_flag = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                    <span class="keyword">if</span> self.table_widget.item(row, <span class="number">1</span>):</span><br><span class="line">                        self.table_widget.setItem(row, <span class="number">1</span>, QTableWidgetItem(str(row + <span class="number">1</span>)))</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col):</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            table[row][col] = <span class="number">0</span></span><br><span class="line">                self.refresh()</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> range(self.table_show.__len__()):</span><br><span class="line">                    self.list_draggable_button[row].setGeometry(int(self.table_show[row][<span class="number">6</span>]),</span><br><span class="line">                                                                int(self.table_show[row][<span class="number">7</span>]),</span><br><span class="line">                                                                <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">                self.list_draggable_button[self.table_show.__len__()].setGeometry(BTN_WIDTH * <span class="number">0.5</span>,</span><br><span class="line">                                                                                  screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">                self.list_draggable_button[self.table_show.__len__()].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&#x27;删除后&#x27;</span>, self.table_show)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;删除螺丝钉失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chioce</span>(<span class="params">self</span>):</span>  <span class="comment"># 修改被选中的行索引</span></span><br><span class="line">        self.row_flag = self.table_widget.currentRow()</span><br><span class="line">        print(<span class="string">f&#x27;选中第<span class="subst">&#123;self.row_flag + <span class="number">1</span>&#125;</span>行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        self.table_show = []</span><br><span class="line">        <span class="comment"># self.stepID = self.edit_task.text() + SOP_SEPARATOR + self.edit_step.text().rjust(2, &#x27;0&#x27;)  # 整数补零&#x27;798&#x27;.rjust(32,&#x27;0&#x27;)</span></span><br><span class="line">        self.product, self.task, self.step = self.edit_product.text(), self.edit_task.text(), self.edit_step.text()  <span class="comment"># 整数补零&#x27;798&#x27;.rjust(32,&#x27;0&#x27;)</span></span><br><span class="line">        self.keypoint, self.sequence = self.textedit_keypoint.toPlainText(), self.textedit_sequence.toPlainText()</span><br><span class="line">        self.table_widget.setRowCount(config.getint(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line">        <span class="comment"># 表格展示数据(global table  -&gt; table_show  -&gt;  表格)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                <span class="keyword">if</span> str(table[row][<span class="number">1</span>]) == str(row + <span class="number">1</span>):</span><br><span class="line">                    table[row][<span class="number">0</span>] = str(self.step)</span><br><span class="line">                    self.table_show.append(table[row])</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                        temp = QTableWidgetItem(str(self.table_show[row][col]))</span><br><span class="line">                        <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == <span class="number">1</span> <span class="keyword">or</span> col == <span class="number">6</span> <span class="keyword">or</span> col == <span class="number">7</span>:</span><br><span class="line">                            temp.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)</span><br><span class="line"></span><br><span class="line">                        self.table_widget.setItem(row, col, temp)</span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col):  <span class="comment"># 设置颜色</span></span><br><span class="line">                            self.table_widget.item(row, col).setForeground(QBrush(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)))</span><br><span class="line">                            <span class="keyword">if</span> row % <span class="number">2</span>:</span><br><span class="line">                                self.table_widget.item(row, col).setBackground(QBrush(QColor(<span class="number">1</span>, <span class="number">77</span>, <span class="number">103</span>)))</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                self.table_widget.item(row, col).setBackground(QBrush(QColor(<span class="number">96</span>, <span class="number">143</span>, <span class="number">159</span>)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;刷新表格失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入步骤信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dialog_signal</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        <span class="comment"># 输入的步骤号</span></span><br><span class="line">        <span class="comment"># self.mydata = message</span></span><br><span class="line">        <span class="comment"># print(&#x27;mydata&#x27;, self.mydata)</span></span><br><span class="line">        <span class="comment"># self.task_list = self.mydata.split(&#x27;_&#x27;)[0].split(SOP_SEPARATOR)</span></span><br><span class="line">        self.product = message[<span class="string">&#x27;product&#x27;</span>]</span><br><span class="line">        self.task = message[<span class="string">&#x27;task&#x27;</span>]</span><br><span class="line">        self.step = message[<span class="string">&#x27;step&#x27;</span>]</span><br><span class="line">        <span class="comment"># self.product = self.task_list[0]</span></span><br><span class="line">        <span class="comment"># self.task = self.task_list[1] + SOP_SEPARATOR + self.task_list[2]</span></span><br><span class="line">        <span class="comment"># self.step = self.task_list[-1]</span></span><br><span class="line"></span><br><span class="line">        self.skilled = message[<span class="string">&#x27;skilled&#x27;</span>]</span><br><span class="line">        stepNo = self.step - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># 初始化表格 清空表格</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>)))):</span><br><span class="line">            table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">        self.table_widget.clearContents()</span><br><span class="line"></span><br><span class="line">        sql_tasks_table = <span class="string">&quot;SELECT * FROM tasks_table WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">        self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.tasks_table = py_MySQL.sql_query_table(sql_tasks_table, args)  # (class,image)</span></span><br><span class="line">        self.tasks_table = py_MySQL.query_sqlite(sql_tasks_table)  <span class="comment"># (class,image)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 展示图片,使用jpg出现问题，改变成为png，修复问题</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># for task_table in self.tasks_table:</span></span><br><span class="line">            <span class="comment">#     fout = open(</span></span><br><span class="line">            <span class="comment">#         str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;,</span></span><br><span class="line">            <span class="comment">#         &#x27;wb&#x27;)</span></span><br><span class="line">            <span class="comment">#     fout.write(task_table[&#x27;image&#x27;])</span></span><br><span class="line">            <span class="comment">#     fout.close()</span></span><br><span class="line">            <span class="keyword">for</span> task_table <span class="keyword">in</span> self.tasks_table:</span><br><span class="line">                <span class="keyword">if</span> task_table[<span class="string">&#x27;step&#x27;</span>] == stepNo + <span class="number">1</span>:</span><br><span class="line">                    self.img = task_table[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">                    qimg = QtGui.QImage.fromData(task_table[<span class="string">&#x27;image&#x27;</span>]).scaled(self.label_pic.width(),</span><br><span class="line">                                                                                      self.label_pic.height())</span><br><span class="line">                    photo = QtGui.QPixmap.fromImage(qimg)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># photo = QtGui.QPixmap(str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(</span></span><br><span class="line">                    <span class="comment">#     task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;).scaled(self.label_pic.width(),</span></span><br><span class="line">                    <span class="comment">#                                          self.label_pic.height())</span></span><br><span class="line">                    self.label_pic.setPixmap(photo)</span><br><span class="line">                    <span class="comment"># fp = open(str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(</span></span><br><span class="line">                    <span class="comment">#     task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line">                    <span class="comment"># self.img = fp.read()</span></span><br><span class="line">                    <span class="comment"># fp.close()</span></span><br><span class="line">                    <span class="comment"># 此处有bug ！！！</span></span><br><span class="line">                    <span class="comment"># 依次读出步骤信息</span></span><br><span class="line">                    self.edit_code.setText(task_table[<span class="string">&#x27;codes&#x27;</span>])</span><br><span class="line">                    self.textedit_keypoint.setText(task_table[<span class="string">&#x27;key_point_description&#x27;</span>])</span><br><span class="line">                    self.textedit_sequence.setText(task_table[<span class="string">&#x27;sequence&#x27;</span>])</span><br><span class="line">                    self.edit_product.setText(task_table[<span class="string">&#x27;product&#x27;</span>])</span><br><span class="line">                    self.edit_task.setText(task_table[<span class="string">&#x27;task&#x27;</span>])</span><br><span class="line">                    self.edit_step.setText(str(stepNo + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            print(e)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;图片不存在！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.skilled == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># self.cb_base_mode.setChecked(True)</span></span><br><span class="line"></span><br><span class="line">                sql_task_sequence = <span class="string">&quot;SELECT * FROM task_sequence WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># self.task_sequence = py_MySQL.sql_query_table(sql_task_sequence, args)  # (class,image)</span></span><br><span class="line">                self.task_sequence = py_MySQL.query_sqlite(sql_task_sequence)  <span class="comment"># (class,image)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(&quot;----------&#123;0&#125;------&quot;.format(self.task_sequence))</span></span><br><span class="line">                <span class="comment"># 模拟数据</span></span><br><span class="line">                fetched_step_data = []</span><br><span class="line">                <span class="keyword">for</span> task_sequence <span class="keyword">in</span> self.task_sequence:</span><br><span class="line">                    <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                    sequence = [task_sequence[<span class="string">&#x27;step&#x27;</span>], task_sequence[<span class="string">&#x27;screw_no&#x27;</span>], task_sequence[<span class="string">&#x27;screw_type&#x27;</span>],</span><br><span class="line">                                task_sequence[<span class="string">&#x27;screw_length&#x27;</span>], int(task_sequence[<span class="string">&#x27;screw_driver&#x27;</span>]) + <span class="number">1</span>,</span><br><span class="line">                                task_sequence[<span class="string">&#x27;torque&#x27;</span>],</span><br><span class="line">                                int(task_sequence[<span class="string">&#x27;position_x&#x27;</span>] * screen_width),</span><br><span class="line">                                int(task_sequence[<span class="string">&#x27;position_y&#x27;</span>] * screen_height)]</span><br><span class="line">                    fetched_step_data.append(sequence)</span><br><span class="line">                <span class="comment"># fetched_step_data = [[&#x27;SOP-403-1&#x27;, 1, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;500&#x27;, &#x27;300&#x27;],</span></span><br><span class="line">                <span class="comment">#                  [&#x27;SOP-403-1&#x27;, 2, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;700&#x27;, &#x27;300&#x27;],</span></span><br><span class="line">                <span class="comment">#                  [&#x27;SOP-403-1&#x27;, 3, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;600&#x27;, &#x27;600&#x27;]]</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(fetched_step_data.__len__()):</span><br><span class="line">                    self.list_draggable_button[i].setText(str(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">                    self.list_draggable_button[i].setGeometry(int(fetched_step_data[i][<span class="number">6</span>]),</span><br><span class="line">                                                              int(fetched_step_data[i][<span class="number">7</span>]),</span><br><span class="line">                                                              <span class="number">30</span>,</span><br><span class="line">                                                              <span class="number">30</span>)</span><br><span class="line">                    self.list_draggable_button[i].setStyleSheet(STYLE_DRAGGABLE_BTN)</span><br><span class="line">                    table[i] = fetched_step_data[i]</span><br><span class="line">                self.refresh()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                filename = sys._getframe().f_code.co_filename</span><br><span class="line">                function = sys._getframe().f_code.co_name</span><br><span class="line">                lineno = sys._getframe().f_lineno</span><br><span class="line">                exception = str(e)</span><br><span class="line">                log.printing(filename, function, lineno, exception)</span><br><span class="line">                QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;导入螺丝钉信息失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_code_add</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获得输入框的内容</span></span><br><span class="line">        <span class="keyword">if</span> len(self.edit_code.text()) &gt;= <span class="number">8</span>:</span><br><span class="line">            self.codes = self.edit_code.text()[:<span class="number">8</span>]</span><br><span class="line">        <span class="comment"># print(self.codes)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mac_address</span>(<span class="params">self</span>):</span></span><br><span class="line">        mac_address = uuid.UUID(int=uuid.getnode()).hex[<span class="number">-12</span>:]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;:&quot;</span>.join([mac_address[e:e + <span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.edit_step.text().isdigit():</span><br><span class="line">                self.refresh()</span><br><span class="line">                self.product, self.task, self.step = self.edit_product.text(), self.edit_task.text(), self.edit_step.text()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 读出tasks_table、task_sequence信息</span></span><br><span class="line">                sql_tasks_table = <span class="string">&quot;SELECT count(*) FROM tasks_table WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                sql_task_sequence = <span class="string">&quot;SELECT count(*) FROM task_sequence WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                <span class="comment"># args = [self.product, self.task, self.step, 1]</span></span><br><span class="line">                <span class="comment"># self.tasks_table_count = py_MySQL.sql_query_table(sql_tasks_table, args)  # (class,image)</span></span><br><span class="line">                <span class="comment"># self.task_sequence_count = py_MySQL.sql_query_table(sql_task_sequence, args)  # (class,image)</span></span><br><span class="line">                self.tasks_table_count = py_MySQL.query_sqlite(sql_tasks_table)  <span class="comment"># (class,image)</span></span><br><span class="line">                self.task_sequence_count = py_MySQL.query_sqlite(sql_task_sequence)  <span class="comment"># (class,image)</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                res = QMessageBox.Yes</span><br><span class="line">                <span class="keyword">if</span> self.tasks_table_count[<span class="number">0</span>][<span class="string">&#x27;count(*)&#x27;</span>] != <span class="number">0</span> <span class="keyword">and</span> self.task_sequence_count[<span class="number">0</span>][<span class="string">&#x27;count(*)&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">                    res = QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤已存在，请确认是否覆盖步骤！&#x27;</span>, QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                               QMessageBox.Yes)</span><br><span class="line">                <span class="keyword">if</span> res == QMessageBox.Yes:</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 绑定 工控机 到数据库中</span></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    sql = <span class="string">&quot;update tasks_table set active=&#x27;%s&#x27; WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                    <span class="number">0</span>, self.product, self.task, self.step, <span class="number">1</span>)</span><br><span class="line">                    args = [[]]</span><br><span class="line">                    py_MySQL.update_sqlite(sql, args)</span><br><span class="line">                    sql = <span class="string">&quot;update task_sequence set active=&#x27;%s&#x27; WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                    <span class="number">0</span>, self.product, self.task, self.step, <span class="number">1</span>)</span><br><span class="line">                    args = [[]]</span><br><span class="line">                    py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                    current_row = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> str(table[i][<span class="number">1</span>]) == str(<span class="number">0</span>):</span><br><span class="line">                            current_row = current_row + <span class="number">1</span></span><br><span class="line">                    self.list_task_sequence = []</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">for</span> row <span class="keyword">in</span> range(current_row):</span><br><span class="line">                            data = []</span><br><span class="line">                            data.append(self.edit_task.text())</span><br><span class="line">                            <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                                <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                                <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == <span class="number">1</span> <span class="keyword">or</span> col == <span class="number">4</span>:  <span class="comment"># 步骤号、螺丝编号、螺丝刀型号</span></span><br><span class="line">                                    data.append(int(self.table_widget.item(row, col).text()))</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">6</span>:  <span class="comment"># x 坐标</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()) / screen_width)</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">7</span>:  <span class="comment"># y 坐标</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()) / screen_height)</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">2</span>:  <span class="comment"># 螺丝型号、标准转角</span></span><br><span class="line">                                    data.append(self.table_widget.item(row, col).text())</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">3</span> <span class="keyword">or</span> col == <span class="number">5</span>:  <span class="comment"># 标准扭矩</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()))</span><br><span class="line">                            <span class="comment"># prin(&#x27;保存data&#x27;, data)</span></span><br><span class="line">                            self.list_task_sequence.append(data)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        print(e)</span><br><span class="line">                        filename = sys._getframe().f_code.co_filename</span><br><span class="line">                        function = sys._getframe().f_code.co_name</span><br><span class="line">                        lineno = sys._getframe().f_lineno</span><br><span class="line">                        exception = str(e)</span><br><span class="line">                        log.printing(filename, function, lineno, exception)</span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;请确认输入数据类型后点击保存步骤&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># csv_write.writerow(data)</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 自动识别精简模式</span></span><br><span class="line">                    <span class="comment"># if self.cb_base_mode.isChecked():</span></span><br><span class="line">                    <span class="keyword">if</span> self.list_task_sequence:</span><br><span class="line">                        skilled = <span class="number">1</span></span><br><span class="line">                        print(<span class="string">&#x27;精简模式&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">&#x27;不是精简模式&#x27;</span>)</span><br><span class="line">                        skilled = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    <span class="keyword">if</span> len(self.edit_code.text()) &gt;= <span class="number">8</span>:</span><br><span class="line">                        self.codes = self.edit_code.text()[:<span class="number">8</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 有条形码存入</span></span><br><span class="line">                        timestamp = str(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line">                        sql = <span class="string">&quot;REPLACE into tasks_table &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;(product, task, step, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;sequence, key_point_description, image, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;skilled, codes, mac_address, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;update_timestamp, active)&quot;</span> \</span><br><span class="line">                              <span class="string">&quot;values(?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?);&quot;</span></span><br><span class="line">                        args = [[self.product, self.task, self.step,</span><br><span class="line">                                 self.sequence, self.keypoint,</span><br><span class="line">                                 self.img, skilled, self.codes,</span><br><span class="line">                                 self.mac_address, timestamp, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 有条形码存入</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(sql, args)</span></span><br><span class="line">                        py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># # 先删后添，有风险</span></span><br><span class="line">                        <span class="comment"># sql = &quot;DELETE FROM task_sequence WHERE product=%s AND task=%s AND step=%s;&quot;</span></span><br><span class="line">                        <span class="comment"># args = []</span></span><br><span class="line">                        <span class="comment"># arg = []</span></span><br><span class="line">                        <span class="comment"># arg.append(self.product)</span></span><br><span class="line">                        <span class="comment"># arg.append(self.task)</span></span><br><span class="line">                        <span class="comment"># arg.append(self.step)</span></span><br><span class="line">                        <span class="comment"># args.append(arg)</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(conn, sql, args)</span></span><br><span class="line">                        <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">                        sql = <span class="string">&quot;REPLACE into task_sequence &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;(product, task, step, screw_no, screw_type, screw_length, screw_driver, torque, position_x, position_y, code, active)&quot;</span> \</span><br><span class="line">                              <span class="string">&quot;values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);&quot;</span></span><br><span class="line">                        args = self.list_task_sequence</span><br><span class="line">                        <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">                            arg.insert(<span class="number">0</span>, self.product)</span><br><span class="line">                            arg.append(self.codes)</span><br><span class="line">                            arg.append(<span class="number">1</span>)</span><br><span class="line">                            arg[<span class="number">6</span>] -= <span class="number">1</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(sql, args)</span></span><br><span class="line">                        py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># sql = &quot;DELETE FROM task_sequence WHERE step = %s AND screw_no = %s;&quot;</span></span><br><span class="line">                        <span class="comment"># args = []</span></span><br><span class="line">                        <span class="comment"># args.append(self.stepID)</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(conn, sql, args)</span></span><br><span class="line"></span><br><span class="line">                        self.codes = <span class="string">&quot;&quot;</span></span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤已新建！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                        <span class="comment"># self.initUI()</span></span><br><span class="line">                        <span class="comment"># self.close()</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        print(e)</span><br><span class="line">                        filename = sys._getframe().f_code.co_filename</span><br><span class="line">                        function = sys._getframe().f_code.co_name</span><br><span class="line">                        lineno = sys._getframe().f_lineno</span><br><span class="line">                        exception = str(e)</span><br><span class="line">                        log.printing(filename, function, lineno, exception)</span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤新建失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;您输入的步骤不是整数，请重新输入！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤新建失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># file = table[0][0] + &#x27;.csv&#x27;</span></span><br><span class="line">        <span class="comment"># if not os.path.exists(file):</span></span><br><span class="line">        <span class="comment">#     reply = QMessageBox.question(self, &#x27;提示&#x27;, &#x27;请确认是否保存?&#x27;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span></span><br><span class="line">        <span class="comment">#     if reply == QMessageBox.Yes:</span></span><br><span class="line">        <span class="comment">#         self.save()</span></span><br><span class="line"></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = EditorWindow()</span><br><span class="line">    ex.showFullScreen()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：Python，screw&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="screw" scheme="https://2021.cyou/tags/screw/"/>
    
  </entry>
  
  <entry>
    <title>Intel Realsense T265使用教程</title>
    <link href="https://2021.cyou/p/Intel-Realsense-T265-in-ubuntu/"/>
    <id>https://2021.cyou/p/Intel-Realsense-T265-in-ubuntu/</id>
    <published>2021-05-08T06:31:00.000Z</published>
    <updated>2021-05-08T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：英特尔® 实感™ 追踪摄像头 T265 是一款全新的独立同步定位与建图设备，可用于机器人、无人机等领域。本文主要介绍了如何在ubuntu系统上安装Intel Realsense T265追踪摄像头。</p><p><strong>关键词</strong>：T265，ROS</p><a id="more"></a><h3 id="t265参数">T265参数</h3><ol type="1"><li>T265采用了2视觉处理单元（VPU），V-SLAM算法可以直接在VPU上运行，可直接输出相机位姿；</li><li>T265使用了双目鱼眼相机，分辨率848*800，刷新频率30Hz，可以生成单色图像，视场角163(±5°)；</li><li>惯性测量单元（IMU）型号为BM1055；</li><li>相机与IMU的参数都保存了传感器中，可以通过示例直接读取相机的内参和相机与IMU之间的外参；</li><li>相机外形尺寸108x24.5x12.5mm</li></ol><p><img src="https://ftp.fly97.cn/blog/images/20210508/t265.png" /></p><h3 id="t265开发环境搭建">T265开发环境搭建</h3><h4 id="注册公钥">注册公钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</span><br></pre></td></tr></table></figure><h4 id="添加库">添加库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb https:&#x2F;&#x2F;librealsense.intel.com&#x2F;Debian&#x2F;apt-repo $(lsb_release -sc) main&quot; -u</span><br></pre></td></tr></table></figure><h4 id="安装库">安装库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br></pre></td></tr></table></figure><p>以上两行将部署 librealsense2 udev 规则，构建并激活内核模块，运行时库以及可执行的演示和工具。</p><h4 id="安装开发库可选">安装开发库（可选）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dev</span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><p>安装了dev软件包后，可以使用<code>g++ -std=c++11 filename.cpp -lrealsense2</code>或者在IDE中使用<code>librealsense2</code>编译应用程序。</p><h4 id="检查安装是否成功">检查安装是否成功</h4><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realsense-viewer</span><br></pre></td></tr></table></figure><p>系统会自动打开一个窗口</p><p><img src="https://ftp.fly97.cn/blog/images/20210508/realsense-viewer.png" /></p><p>一旦速度过快，T265输出的位姿就会飞掉。</p><h3 id="读取t265内外参数信息">读取T265内外参数信息</h3><p>T265在出厂前就对相机进行了标定，每个相机内部都带有相机的内参和外参，终端输入以下命令，即可读取T265的配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs-enumerate-devices</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210508/rs-enumerate-devices.png" /></p><p>如果需要读取相机内参和外参，以及IMU的参数可以使用如下命令（添加 -c 参数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs-enumerate-devices -c</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210508/rs-enumerate-devices-c.png" /></p><h3 id="使用ros包读取t265数据">使用ROS包读取T265数据</h3><p>使用环境ROS melodic 版本</p><h4 id="安装依赖">安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-<span class="variable">$ROS_DISTRO</span>-ddynamic-reconfigure</span><br></pre></td></tr></table></figure><h4 id="下载安装ros包-realsense-ros">下载安装ROS包 realsense-ros</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IntelRealSense/realsense-ros.git</span><br><span class="line"><span class="built_in">cd</span> realsense-ros/</span><br><span class="line">git checkout `git tag | sort -V | grep -P <span class="string">&quot;^2.\d+\.\d+&quot;</span> | tail -1`</span><br><span class="line"><span class="built_in">cd</span>  ~/catkin_ws/</span><br><span class="line">catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><h4 id="启动测试demo即可看到t265的位姿数据">启动测试demo，即可看到T265的位姿数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch realsense2_camera demo_t265.launch</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210508/demo_t265.jpg" /></p><p>如果需要查看鱼眼相机图像数据，则需要对<code>rs_t265.launch</code>文件进行修改，使能图像输出</p><p><img src="https://ftp.fly97.cn/blog/images/20210508/rs_t265.png" /></p><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera demo_t265.launch</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210508/demo_t265_2.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;：英特尔® 实感™ 追踪摄像头 T265 是一款全新的独立同步定位与建图设备，可用于机器人、无人机等领域。本文主要介绍了如何在ubuntu系统上安装Intel Realsense T265追踪摄像头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：T265，ROS&lt;/p&gt;</summary>
    
    
    
    
    <category term="T265" scheme="https://2021.cyou/tags/T265/"/>
    
    <category term="ROS" scheme="https://2021.cyou/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Jetson Xavier nx实现串口通信</title>
    <link href="https://2021.cyou/p/serial-communication-on-jetson-xavier-nx/"/>
    <id>https://2021.cyou/p/serial-communication-on-jetson-xavier-nx/</id>
    <published>2021-05-07T06:09:00.000Z</published>
    <updated>2021-05-07T06:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用Jetson Xavier和传感器模块进行串口通信</p><a id="more"></a><h3 id="硬件连接">硬件连接</h3><p>默认情况下，Jetson Xavier NX分配I2C和UART引脚，所有其他引脚（电源和接地除外）均分配为GPIO，建议使用下面标有其他功能的引脚。</p><p>这里我们用的是UART1，设备地址<code>/dev/ttyTHS0</code>.</p><p><img src="https://ftp.fly97.cn/blog/images/20210508/jetson_data_sheet.png" /></p><p>其中，第8和10引脚就是我们需要的TXD和RXD引脚。</p><p><img src="https://ftp.fly97.cn/blog/images/20210508/jetson_xavier_nx.jpg" /></p><p><strong>注意：和电脑连接调试时需要注意，USB转TTL的RXD引脚需和板子的TXD引脚连接，USB转TTL的TXD引脚需和板子的RXD引脚相连。两者的GND引脚也要连起来。</strong></p><h3 id="相关代码">相关代码</h3><h4 id="安装相关依赖">安装相关依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyserial</span><br></pre></td></tr></table></figure><h4 id="测试代码">测试代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;UART Demonstration Program&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serial_port = serial.Serial(</span><br><span class="line">    port=<span class="string">&quot;/dev/ttyTHS1&quot;</span>,                                      <span class="comment">#串口设备地址</span></span><br><span class="line">    baudrate=<span class="number">115200</span>,                                          <span class="comment">#信号波特率</span></span><br><span class="line">    bytesize=serial.EIGHTBITS,                                <span class="comment">#数据位</span></span><br><span class="line">    parity=serial.PARITY_NONE,      <span class="comment">#是否启用奇偶校验</span></span><br><span class="line">    stopbits=serial.STOPBITS_ONE,                             <span class="comment">#停止位</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># Wait a second to let the port initialize</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Send a simple header</span></span><br><span class="line">    serial_port.write(<span class="string">&quot;UART Demonstration Program\r\n&quot;</span>.encode())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> serial_port.inWaiting() &gt; <span class="number">0</span>:</span><br><span class="line">            data = serial_port.read()</span><br><span class="line">            print(data)</span><br><span class="line">            serial_port.write(data)</span><br><span class="line">            <span class="comment"># if we get a carriage return, add a line feed too</span></span><br><span class="line">            <span class="comment"># \r is a carriage return; \n is a line feed</span></span><br><span class="line">            <span class="comment"># This is to help the tty program on the other end </span></span><br><span class="line">            <span class="comment"># Windows is \r\n for carriage return, line feed</span></span><br><span class="line">            <span class="comment"># Macintosh and Linux use \n</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">&quot;\r&quot;</span>.encode():</span><br><span class="line">                <span class="comment"># For Windows boxen on the other end</span></span><br><span class="line">                serial_port.write(<span class="string">&quot;\n&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">&quot;Exiting Program&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exception_error:</span><br><span class="line">    print(<span class="string">&quot;Error occurred. Exiting Program&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Error: &quot;</span> + str(exception_error))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    serial_port.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210508/uart_demo.png" /></p><p>参考资料：</p><p>https://www.jetsonhacks.com/2019/10/10/jetson-nano-uart/</p><p>https://github.com/JetsonHacksNano/UARTDemo</p><p>https://github.com/pyserial/pyserial</p><p>​</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用Jetson Xavier和传感器模块进行串口通信&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jetson" scheme="https://2021.cyou/tags/Jetson/"/>
    
    <category term="CUDA" scheme="https://2021.cyou/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>Python3中decode和encode的区别</title>
    <link href="https://2021.cyou/p/how-to-use-requests-in-python/"/>
    <id>https://2021.cyou/p/how-to-use-requests-in-python/</id>
    <published>2021-05-07T02:00:00.000Z</published>
    <updated>2021-05-07T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>聊聊Python3中decode和encode的区别</p><a id="more"></a><h3 id="decode和encode的区别">decode和encode的区别</h3><p>字符串编码常用类型：utf-8,gb2312,cp936,gbk等。</p><p>Python3中，取消了unicode类型，代替它的是使用unicode字符的字符串类型(str)，字符串类型(str)成为了基础类型，编码后的类型成为了字节类型(bytes)</p><p>bytes----(decode)----&gt;str-----(encode)-----&gt;bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u = <span class="string">&#x27;中文&#x27;</span>                 <span class="comment">#指定字符串类型对象u</span></span><br><span class="line">s = u.encode(<span class="string">&#x27;gb2312&#x27;</span>)     <span class="comment">#以gb2312编码对u进行编码, 获得bytes类型对象s</span></span><br><span class="line">u1 = s.decode(<span class="string">&#x27;gb2312&#x27;</span>)    <span class="comment">#以gb2312编码对s进行解码, 获得str类型对象u</span></span><br><span class="line">u2 = s.decode(<span class="string">&#x27;utf-8&#x27;</span>)     <span class="comment">#以utf-8编码对s进行解码, 将无法获得还原原来的字符串内容</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;聊聊Python3中decode和encode的区别&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="decode" scheme="https://2021.cyou/tags/decode/"/>
    
    <category term="encode" scheme="https://2021.cyou/tags/encode/"/>
    
  </entry>
  
  <entry>
    <title>Python3中的正则表达式</title>
    <link href="https://2021.cyou/p/how-to-use-re-in-python/"/>
    <id>https://2021.cyou/p/how-to-use-re-in-python/</id>
    <published>2021-05-07T02:00:00.000Z</published>
    <updated>2021-05-07T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：这个模块提供了正则表达式匹配操作。模式和被搜索的字符串既可以是unicode字符串(str类型)，也可以是8位字节串。但是两者不能混用。当进行替换操作时，替换字符串的类型也必须与所用的模式和搜索的字符串类型一致。</p><p>关键字：Python，正则表达式</p><a id="more"></a><p>正则表达式使用反斜杠字符来表示特殊形式或是允许在使用特殊字符时不引发他们的特殊含义。例如，要匹配一个反斜杠字面值，用户可能必须写成 <code>'\\\\'</code> 来作为模式字符串，因为正则表达式必须为 <code>\\</code>，而每个反斜杠在普通 Python 字符串字面值中又必须表示为 <code>\\</code>。</p><p>解决办法时对于正则表达式样式使用Python的原始字符串表达法；在带有<code>'r'</code>前缀的字符串字面值中，反斜杠不必做任何特殊处理。</p><p>因此<code>r''\n</code>表示包含<code>\</code>和<code>n</code>的两个字符的字符串，而""则表示只包含一个换行符的字符串。样式在Python代码中通常都会使用这种原始字符串表示法来表示。</p><p>绝大多数正则表达式操作都提供模块函数和方法，在编译正则表达式这些函数是一个途径，不需要先编译一个正则对象，但是损失了一些优化参数。</p><h3 id="正则表达式语法">正则表达式语法</h3><p>一个正则表达式指定了一系列与之匹配的字符串；模块内的函数可以检查某个字符串是否跟跟定的正则表达式相匹配（或者一个正则表达式是否匹配到一个字符串）。</p><p>正则表达式可以拼接；如果A和B都是正则表达式，那么AN</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：这个模块提供了正则表达式匹配操作。模式和被搜索的字符串既可以是unicode字符串(str类型)，也可以是8位字节串。但是两者不能混用。当进行替换操作时，替换字符串的类型也必须与所用的模式和搜索的字符串类型一致。&lt;/p&gt;
&lt;p&gt;关键字：Python，正则表达式&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="re" scheme="https://2021.cyou/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Python3 requests如何定制header</title>
    <link href="https://2021.cyou/p/how-to-customize-headers-for-python-requests/"/>
    <id>https://2021.cyou/p/how-to-customize-headers-for-python-requests/</id>
    <published>2021-05-06T05:32:00.000Z</published>
    <updated>2021-05-06T05:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>聊聊Python的request库</p><a id="more"></a><h3 id="定制请求头">定制请求头</h3><p>如果想为请求添加HTTP头部，只需要简单传递一个<code>dict</code>给<code>headers</code>参数即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;&quot;</span><br><span class="line">payload &#x3D; &#123;&#39;some&#39;:&#39;data&#39;&#125;</span><br><span class="line">headers &#x3D; &#123;&#39;content-type&#39;:&#39;application&#x2F;json&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(url, data&#x3D;json.dumps(payload), headers&#x3D;headers)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;聊聊Python的request库&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="requests" scheme="https://2021.cyou/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器abstractmethod</title>
    <link href="https://2021.cyou/p/how-to-use-python-abstractmethod/"/>
    <id>https://2021.cyou/p/how-to-use-python-abstractmethod/</id>
    <published>2021-05-05T07:45:00.000Z</published>
    <updated>2021-05-05T07:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用Python装饰器abstractmethod实现纯虚函数</p><a id="more"></a><p><code>@abstractmethod</code>用于程序接口的控制，含有<code>@abstractmethod</code>修饰的父类不能被实例化，且继承的子类必须实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadTools</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_urls</span>(<span class="params">self</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpyunTools</span>(<span class="params">UploadTools</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am upyuntools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am upload method in UpyunTools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am delete method in UpyunTools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am delete method in UpyunTools&quot;</span>)</span><br><span class="line">    <span class="comment"># def get_urls(self) -&gt; str:</span></span><br><span class="line">    <span class="comment">#     print(&quot;I am get_urls method in UpyunTools.&quot;)</span></span><br><span class="line">    <span class="comment">#     return None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upyun_tools = UpyunTools()</span><br><span class="line">    upyun_tools.upload()</span><br><span class="line">    upyun_tools.get_urls()</span><br><span class="line">    upyun_tools.delete()</span><br></pre></td></tr></table></figure><p>将子类get_urls方法注释后无法运行：</p><p><img src="https://ftp.fly97.cn/blog/images/20210505/abstractmethod_02.png" /></p><p>将子类的<code>get_urls</code>方法修改后可以运行：</p><p><img src="https://ftp.fly97.cn/blog/images/20210505/abstractmethod_01.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用Python装饰器abstractmethod实现纯虚函数&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="abstractmethod" scheme="https://2021.cyou/tags/abstractmethod/"/>
    
  </entry>
  
  <entry>
    <title>理解Python</title>
    <link href="https://2021.cyou/p/how-to-use-python-abstractmethod/"/>
    <id>https://2021.cyou/p/how-to-use-python-abstractmethod/</id>
    <published>2021-05-05T07:45:00.000Z</published>
    <updated>2021-05-05T07:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>聊聊Python的装饰器</p><a id="more"></a><p>谈装饰器之前，首先要明白一件事，Python中的函数和Java，C++不太一样，Python中的函数可以通过普通变量一样当作参数传入另一个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">print(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">func</span>):</span></span><br><span class="line">func()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">bar(foo)</span><br></pre></td></tr></table></figure><p>装饰器本质上是一个Pythob函数或者类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。他经常用于有切面需求的场景，比如：插入日志，性能测试，事务处理，缓存，权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器继续重用。</p><p>一句话，<strong>装饰器就是为已经存在的对象添加额外的功能</strong>。</p><p>一个简单例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在有一个新需求，希望可以记录下函数的执行日志，于是在函数中添加日志代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;foo is runing&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果函数bar()，bar()也有类似的需求，怎么做？再写一个logging日志在bar函数里？这样就造成了大量雷同代码，为了减少业务量，我们需要重新定义一个新的函数，专门处理日志，日志处理完再执行真正的业务代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    use_logging(foo)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;聊聊Python的装饰器&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="abstractmethod" scheme="https://2021.cyou/tags/abstractmethod/"/>
    
  </entry>
  
  <entry>
    <title>Dedian10使用Rclone同步ondrive</title>
    <link href="https://2021.cyou/p/rclone-on-debian/"/>
    <id>https://2021.cyou/p/rclone-on-debian/</id>
    <published>2021-05-05T05:48:00.000Z</published>
    <updated>2021-05-05T05:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dedian10 使用Rclone同步onedrive</p><a id="more"></a><h3 id="安装rclone">安装Rclone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure><h3 id="rclone连接onedrive">Rclone连接Onedrive</h3><h4 id="获取token">获取Token</h4><p>在本地Windows电脑上<a href="https://rclone.org/downloads/">下载</a>，进入文件夹，资源管理器路径那一栏输入<code>cmd</code>,会在当前目录打开cmd命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone authorize <span class="string">&quot;onedrive&quot;</span></span><br></pre></td></tr></table></figure><p>接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：</p><p><img src="https://ftp.fly97.cn/blog/images/20210505/rclone.png" />包含access_token的{}保存好，稍后安装rclone的时候会用到。</p><h3 id="配置-rclone">配置 Rclone</h3><p>输入 <code>rclone config</code> 命令，会出现以下信息，参照以下进行操作。</p><p>其中，id和机密可以进入https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">admin@ip-172-26-5-120:~$ rclone config</span><br><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br><span class="line">name&gt; e5</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">&quot;fichier&quot;</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">&quot;alias&quot;</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">&quot;amazon cloud drive&quot;</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS</span><br><span class="line">   \ <span class="string">&quot;s3&quot;</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">&quot;b2&quot;</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">&quot;box&quot;</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">&quot;cache&quot;</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">&quot;sharefile&quot;</span></span><br><span class="line"> 9 / Compress a remote</span><br><span class="line">   \ <span class="string">&quot;compress&quot;</span></span><br><span class="line">10 / Dropbox</span><br><span class="line">   \ <span class="string">&quot;dropbox&quot;</span></span><br><span class="line">11 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">&quot;crypt&quot;</span></span><br><span class="line">12 / Enterprise File Fabric</span><br><span class="line">   \ <span class="string">&quot;filefabric&quot;</span></span><br><span class="line">13 / FTP Connection</span><br><span class="line">   \ <span class="string">&quot;ftp&quot;</span></span><br><span class="line">14 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">&quot;google cloud storage&quot;</span></span><br><span class="line">15 / Google Drive</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line">16 / Google Photos</span><br><span class="line">   \ <span class="string">&quot;google photos&quot;</span></span><br><span class="line">17 / Hadoop distributed file system</span><br><span class="line">   \ <span class="string">&quot;hdfs&quot;</span></span><br><span class="line">18 / Hubic</span><br><span class="line">   \ <span class="string">&quot;hubic&quot;</span></span><br><span class="line">19 / In memory object storage system.</span><br><span class="line">   \ <span class="string">&quot;memory&quot;</span></span><br><span class="line">20 / Jottacloud</span><br><span class="line">   \ <span class="string">&quot;jottacloud&quot;</span></span><br><span class="line">21 / Koofr</span><br><span class="line">   \ <span class="string">&quot;koofr&quot;</span></span><br><span class="line">22 / Local Disk</span><br><span class="line">   \ <span class="string">&quot;local&quot;</span></span><br><span class="line">23 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">&quot;mailru&quot;</span></span><br><span class="line">24 / Mega</span><br><span class="line">   \ <span class="string">&quot;mega&quot;</span></span><br><span class="line">25 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">&quot;azureblob&quot;</span></span><br><span class="line">26 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line">27 / OpenDrive</span><br><span class="line">   \ <span class="string">&quot;opendrive&quot;</span></span><br><span class="line">28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">&quot;swift&quot;</span></span><br><span class="line">29 / Pcloud</span><br><span class="line">   \ <span class="string">&quot;pcloud&quot;</span></span><br><span class="line">30 / Put.io</span><br><span class="line">   \ <span class="string">&quot;putio&quot;</span></span><br><span class="line">31 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">&quot;qingstor&quot;</span></span><br><span class="line">32 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">&quot;sftp&quot;</span></span><br><span class="line">33 / Sugarsync</span><br><span class="line">   \ <span class="string">&quot;sugarsync&quot;</span></span><br><span class="line">34 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">&quot;tardigrade&quot;</span></span><br><span class="line">35 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">&quot;chunker&quot;</span></span><br><span class="line">36 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">&quot;union&quot;</span></span><br><span class="line">37 / Webdav</span><br><span class="line">   \ <span class="string">&quot;webdav&quot;</span></span><br><span class="line">38 / Yandex Disk</span><br><span class="line">   \ <span class="string">&quot;yandex&quot;</span></span><br><span class="line">39 / Zoho</span><br><span class="line">   \ <span class="string">&quot;zoho&quot;</span></span><br><span class="line">40 / http Connection</span><br><span class="line">   \ <span class="string">&quot;http&quot;</span></span><br><span class="line">41 / premiumize.me</span><br><span class="line">   \ <span class="string">&quot;premiumizeme&quot;</span></span><br><span class="line">42 / seafile</span><br><span class="line">   \ <span class="string">&quot;seafile&quot;</span></span><br><span class="line">Storage&gt; onedrive</span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">OAuth Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_id&gt; <span class="comment">####&lt;client_id&gt;</span></span><br><span class="line">OAuth Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_secret&gt; <span class="comment">####&lt;client_secret&gt;</span></span><br><span class="line">Choose national cloud region <span class="keyword">for</span> OneDrive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;global&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ <span class="string">&quot;global&quot;</span></span><br><span class="line"> 2 / Microsoft Cloud <span class="keyword">for</span> US Government</span><br><span class="line">   \ <span class="string">&quot;us&quot;</span></span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ <span class="string">&quot;de&quot;</span></span><br><span class="line"> 4 / Azure and Office 365 operated by 21Vianet <span class="keyword">in</span> China</span><br><span class="line">   \ <span class="string">&quot;cn&quot;</span></span><br><span class="line">region&gt; 1</span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt;</span><br><span class="line">Remote config</span><br><span class="line">Make sure your Redirect URL is <span class="built_in">set</span> to <span class="string">&quot;http://localhost:53682/&quot;</span> <span class="keyword">in</span> your custom config.</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">For this to work, you will need rclone available on a machine that has</span><br><span class="line">a web browser available.</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span> and alternate methods see: https://rclone.org/remote_setup/</span><br><span class="line"></span><br><span class="line">Execute the following on the machine with the web browser (same rclone</span><br><span class="line">version recommended):</span><br><span class="line"></span><br><span class="line">        rclone authorize <span class="string">&quot;onedrive&quot;</span> -- <span class="string">&quot;02c884a6-5468-455c-a268-74cdc7203438&quot;</span> <span class="string">&quot;IrjLga~Ac3EiDM~b8Rnj~_.52-9qkl-diz&quot;</span></span><br><span class="line"></span><br><span class="line">Then paste the result below:</span><br><span class="line">result&gt; <span class="comment">###&lt;粘贴刚刚复制的access_token&gt;</span></span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;sharepoint&quot;</span></span><br><span class="line"> 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)</span><br><span class="line">   \ <span class="string">&quot;url&quot;</span></span><br><span class="line"> 4 / Search <span class="keyword">for</span> a Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;search&quot;</span></span><br><span class="line"> 5 / Type <span class="keyword">in</span> driveID (advanced)</span><br><span class="line">   \ <span class="string">&quot;driveid&quot;</span></span><br><span class="line"> 6 / Type <span class="keyword">in</span> SiteID (advanced)</span><br><span class="line">   \ <span class="string">&quot;siteid&quot;</span></span><br><span class="line"> 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)</span><br><span class="line">   \ <span class="string">&quot;path&quot;</span></span><br><span class="line">Your choice&gt; 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0: OneDrive (business) id=b!lIxfd2Pu9EqZkOv48-aPSRheOv8JQpVMuSEfiWP0gw_uuFm5MjSKT7k1T4f5GToI</span><br><span class="line">Chose drive to use:&gt; 0</span><br><span class="line">Found drive <span class="string">&#x27;root&#x27;</span> of <span class="built_in">type</span> <span class="string">&#x27;business&#x27;</span>, URL: https://fly97-my.sharepoint.com/personal/xiaofeifei_fly97_fun/Documents</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">--------------------</span><br><span class="line">[e5]</span><br><span class="line"><span class="built_in">type</span> = onedrive</span><br><span class="line">client_id = 02c884a6-5468-455c-a268-74cdc7203438</span><br><span class="line">client_secret = IrjLga~Ac3EiDM~b8Rnj~_.52-9qkl-diz</span><br><span class="line">region = global</span><br><span class="line">token = &lt;token&gt;</span><br><span class="line">drive_id = b!lIxfd2Pu9EqZkOv48-aPSRheOv8JQpVMuSEfiWP0gw_uuFm5MjSKT7k1T4f5GToI</span><br><span class="line">drive_type = business</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">e5                   onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure><h3 id="配置自动挂载">配置自动挂载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rclone.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Rclone</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;rclone mount e5: &#x2F;home&#x2F;e5 \</span><br><span class="line"> --umask 0777 \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --transfers 10 \</span><br><span class="line"> --buffer-size 32M \</span><br><span class="line"> --low-level-retries 200 \</span><br><span class="line"> --vfs-cache-mode full</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line">User&#x3D;root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;default.target</span><br></pre></td></tr></table></figure><h3 id="一些常用命令">一些常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地到网盘</span></span><br><span class="line">rclone [功能选项] &lt;本地路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网盘到本地</span></span><br><span class="line">rclone [功能选项] &lt;网盘名称:路径&gt; &lt;本地路径&gt; [参数] [参数] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网盘到网盘</span></span><br><span class="line">rclone [功能选项] &lt;网盘名称:路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">常用功能选项</span><br><span class="line">rclone copy - 复制</span><br><span class="line">rclone move - 移动，如果要在移动后删除空源目录，请加上 --delete-empty-src-dirs 参数</span><br><span class="line">rclone sync - 同步：将源目录同步到目标目录，只更改目标目录。</span><br><span class="line">rclone size - 查看网盘文件占用大小。</span><br><span class="line">rclone delete - 删除路径下的文件内容。</span><br><span class="line">rclone purge - 删除路径及其所有文件内容。</span><br><span class="line">rclone mkdir - 创建目录。</span><br><span class="line">rclone rmdir - 删除目录。</span><br><span class="line">rclone rmdirs - 删除指定灵境下的空目录。如果加上 --leave-root 参数，则不会删除根目录。</span><br><span class="line">rclone check - 检查源和目的地址数据是否匹配。</span><br><span class="line">rclone ls - 列出指定路径下的所有的文件以及文件大小和路径。</span><br><span class="line">rclone lsl - 比上面多一个显示上传时间。</span><br><span class="line">rclone lsd 列出指定路径下的目录</span><br><span class="line">rclone lsf - 列出指定路径下的目录和文件</span><br><span class="line">常用参数</span><br><span class="line">-n = --dry-run - 测试运行，用来查看 rclone 在实际运行中会进行哪些操作。</span><br><span class="line">-P = --progress - 显示实时传输进度，500mS 刷新一次，否则默认 1 分钟刷新一次。</span><br><span class="line">--cache-chunk-size SizeSuffi - 块的大小，默认5M，理论上是越大上传速度越快，同时占用内存也越多。如果设置得太大，可能会导致进程中断。</span><br><span class="line">--cache-chunk-total-size SizeSuffix - 块可以在本地磁盘上占用的总大小，默认10G。</span><br><span class="line">--transfers=N - 并行文件数，默认为4。在比较小的内存的VPS上建议调小这个参数，比如128M的小鸡上使用建议设置为1。</span><br><span class="line">--config string - 指定配置文件路径，string为配置文件路径。</span><br><span class="line">--ignore-errors - 跳过错误。比如 OneDrive 在传了某些特殊文件后会提示Failed to copy: failed to open <span class="built_in">source</span> object: malwareDetected: Malware detected，这会导致后续的传输任务被终止掉，此时就可以加上这个参数跳过错误。但需要注意 RCLONE 的退出状态码不会为0。</span><br></pre></td></tr></table></figure><p>参考：https://p3terx.com/archives/rclone-advanced-user-manual-common-command-parameters.html</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dedian10 使用Rclone同步onedrive&lt;/p&gt;</summary>
    
    
    
    
    <category term="Debian" scheme="https://2021.cyou/tags/Debian/"/>
    
    <category term="qbittorrent-nox" scheme="https://2021.cyou/tags/qbittorrent-nox/"/>
    
  </entry>
  
  <entry>
    <title>Dedian 10 使用qbittorrent-nox web</title>
    <link href="https://2021.cyou/p/qbittorrent-nox-on-debian/"/>
    <id>https://2021.cyou/p/qbittorrent-nox-on-debian/</id>
    <published>2021-05-05T05:48:00.000Z</published>
    <updated>2021-05-05T05:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dedian 10 使用qbittorrent-nox web</p><a id="more"></a><h3 id="下载安装包">下载安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qbittorrent qbittorrent-nox</span><br></pre></td></tr></table></figure><h3 id="创建用于运行qbittorrent-nox的用户及组">创建用于运行qbittorrent-nox的用户及组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduer --system --group qbittorrent-nox</span><br></pre></td></tr></table></figure><p>也可以将系统原有用添加到qbittorrent-nox组中，此处用户主要用于qbittorrnet-nox 的systemd启动脚本</p><h3 id="添加qbittorrent-nox服务设置开机自启及启动">添加qbittorrent-nox服务，设置开机自启及启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /lib/systemd/system/qbittorrent-nox.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;qBittorrent Command Line Client</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">User&#x3D;qbittorrent-nox</span><br><span class="line">Group&#x3D;qbittorrent-nox</span><br><span class="line">UMask&#x3D;007</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox -d --webui-port&#x3D;8090</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>webui-port用于浏览器访问的端口，可以自行更改（非root用户需使用1024-65535以上未被使用的端口）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox</span><br><span class="line">sudo systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure><h3 id="修改web访问用户及密码">修改web访问用户及密码</h3><p>使用8090端口访问qbittorrent web页面，默认用户admin，密码adminadmin</p><p>在tools-options-Web UI中找到Authentication，修改username及password。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dedian 10 使用qbittorrent-nox web&lt;/p&gt;</summary>
    
    
    
    
    <category term="Debian" scheme="https://2021.cyou/tags/Debian/"/>
    
    <category term="qbittorrent-nox" scheme="https://2021.cyou/tags/qbittorrent-nox/"/>
    
  </entry>
  
  <entry>
    <title>零基础入门ROS(三)</title>
    <link href="https://2021.cyou/p/ros-tutorial-03/"/>
    <id>https://2021.cyou/p/ros-tutorial-03/</id>
    <published>2021-04-26T11:48:00.000Z</published>
    <updated>2021-04-26T11:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p><p>今天写的主要是使用opencv进行相机标定（Camera Calibration）的步骤。</p><a id="more"></a><h3 id="下载opencv源码">下载opencv源码</h3><p>这里用到的源码版本是opencv3.2.0，操作环境是Ubuntu 18.04 LTS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/opencv/opencv/archive/refs/tags/3.2.0.tar.gz</span><br><span class="line">tar -xvf 3.2.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="使用已有的图片进行标定">使用已有的图片进行标定</h3><h4 id="编译camera_calibration.cpp">编译camera_calibration.cpp</h4><h5 id="进入指定目录">进入指定目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-3.2.0</span><br><span class="line">cd samples&#x2F;cpp&#x2F;tutorial_code&#x2F;calib3d&#x2F;camera_calibration</span><br></pre></td></tr></table></figure><h5 id="创建cmakelist.txt文件">创建CMakeList.txt文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim CMakeLists.txt</span><br></pre></td></tr></table></figure><p>复制下列代码到文件.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">add_executable</span>( camera_calibration camera_calibration.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( camera_calibration <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure><h5 id="编译">编译</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build </span><br><span class="line">cd build </span><br><span class="line">cmake ..</span><br><span class="line">make </span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration01.png" /></p><h5 id="修改参数">修改参数</h5><p>编辑同级目录下的<code>in_VID5.xml</code>文件，根据标定靶的行数和列数来修改参数。这里的使用的标定靶一共有<strong>6</strong>行，每一行有8个内部角点。</p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration02.png" /></p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration03.png" /></p><p>其中<code>VID5.xml</code>存放的是标定图片路径，一般图片应不少于3张，图片越多标定效果越好。</p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration04.png" /></p><h5 id="标定">标定</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv build&#x2F;camera_calibration .</span><br><span class="line">.&#x2F;camera_calibration .&#x2F;in_VID5.xml</span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration05.png" /></p><p>生成的out_camera_data.xml就是标定后得到的参数文件。</p><h3 id="使用视频对摄像头进行标定">使用视频对摄像头进行标定</h3><h4 id="编译calibration.cpp">编译calibration.cpp</h4><h5 id="进入指定目录-1">进入指定目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-3.4.3</span><br><span class="line">mkdir -p ..&#x2F;calibration_ws</span><br><span class="line">cp samples&#x2F;cpp&#x2F;calibration.cpp ..&#x2F;calibration_ws</span><br><span class="line">cd ..&#x2F;calibration_ws</span><br></pre></td></tr></table></figure><h5 id="创建cmakelists.txt文件">创建CMakeLists.txt文件</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">add_executable</span>( calibration calibration.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( calibration <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure><h5 id="编译-1">编译</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make </span><br></pre></td></tr></table></figure><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration06.png" /></p><h5 id="标定-1">标定</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x calibration</span><br><span class="line">.&#x2F;calibration -w&#x3D;8 -h&#x3D;6</span><br></pre></td></tr></table></figure><p>这里的h指的是标定靶一共有<strong>6</strong>行，w指的是每一行有<strong>8</strong>个内部角点。</p><p>按g键开始标定。</p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration07.png" /></p><p>标定完毕。</p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration08.png" /></p><p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration09.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近的小车需要用到ROS，学习的过程做个记录。&lt;/p&gt;
&lt;p&gt;今天写的主要是使用opencv进行相机标定（Camera Calibration）的步骤。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://2021.cyou/tags/ROS/"/>
    
    <category term="camera calibration" scheme="https://2021.cyou/tags/camera-calibration/"/>
    
  </entry>
  
  <entry>
    <title>零基础入门ROS(二)</title>
    <link href="https://2021.cyou/p/ros-tutorial-02/"/>
    <id>https://2021.cyou/p/ros-tutorial-02/</id>
    <published>2021-04-26T11:48:00.000Z</published>
    <updated>2021-04-26T11:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p><a id="more"></a><h3 id="ros中的工作空间">ROS中的工作空间</h3><h4 id="工作空间是什么">工作空间是什么</h4><p>工作空间是一个存放工程相关开发文件的文件夹，ROS默认使用的是catkin编译系统。</p><p>典型的工作空间包含以下四个目录空间：</p><ol type="1"><li><code>src</code>：代码空间，开发过程中最常用的文件夹。用来存放所有ROS功能包的源码文件。</li><li><code>build</code>：编译空间，用来存储工作空间编译过程中产生缓存信息和中间文件。</li><li><code>devel</code>：开发空间，用来放置编译生成的可执行文件。</li><li><code>install</code>：安装空间，编译成功后，可以使用<code>make install</code>命令将可执行文件安装到该空间中，运行该空间中的环境变量脚本，即可以在终端中运行这些可执行文件。注意：安装空间在工作空间中不是必须的，很多工作空间中没有该文件夹。</li></ol><h4 id="创建工作空间">创建工作空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure><h4 id="编译工作空间">编译工作空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h4 id="设置环境变量">设置环境变量</h4><p>编译完成后<code>devel</code>文件夹下会生成<code>setup.bash</code>形式的环境变量设置脚本，使用<code>source</code>命令运行这些脚本文件，则工作空间的环境变量可以生效。</p><p>注意：每一次编译完成后都要运行一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure><p>运行以下命令查看环境变量是否生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure><p>若生效则会显示出当前工作空间的路径。</p><h4 id="创建功能包">创建功能包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg subsciber rospy std_msgs geometry_msgs</span><br></pre></td></tr></table></figure><p>其中<code>subsciber</code>是包名，剩下的是功能包所需要的依赖。</p><p>创建完成后，需要<strong>编译工作空间</strong>，并且<strong>设置环境变量</strong>。</p><h4 id="查看功能包所在的工作空间">查看功能包所在的工作空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack find subsciber</span><br></pre></td></tr></table></figure><h3 id="话题和服务">话题和服务</h3><h4 id="话题">话题</h4><p>消息以一种发布/订阅的方式传递。一个节点可以订阅多个话题，一个话题也可以被多个节点订阅。两个节点通信时，启动顺序没有强制要求，且<strong>实时性</strong>较弱，不适用于双向的同步传输。</p><h4 id="服务">服务</h4><p>服务是一种带有应答的通信机制。ROS只允许有一个节点提供指定命名的服务。实时性较强，适用于两个节点之间的同步传输。</p><table><thead><tr class="header"><th></th><th>话题</th><th>服务</th></tr></thead><tbody><tr class="odd"><td>同步性</td><td>异步</td><td>同步</td></tr><tr class="even"><td>通信模型</td><td>发布/订阅</td><td>客户端/服务端</td></tr><tr class="odd"><td>底层协议</td><td>ROSTCP/ROSUDP</td><td>ROSTCP/ROSUDP</td></tr><tr class="even"><td>反馈机制</td><td>无</td><td>有</td></tr><tr class="odd"><td>缓冲区</td><td>有</td><td>无</td></tr><tr class="even"><td>实时性</td><td>弱</td><td>强</td></tr><tr class="odd"><td>节点关系</td><td>多对多</td><td>一对多（一个server）</td></tr><tr class="even"><td>适用场景</td><td>数据传输</td><td>逻辑处理</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近的小车需要用到ROS，学习的过程做个记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://2021.cyou/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>零基础入门ROS(一)</title>
    <link href="https://2021.cyou/p/ros-tutorial-01/"/>
    <id>https://2021.cyou/p/ros-tutorial-01/</id>
    <published>2021-04-25T11:29:00.000Z</published>
    <updated>2021-04-25T11:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p><p>此次记录的主要是软件安装过程中遇到的问题。</p><a id="more"></a><h3 id="ubuntu1804-换源">ubuntu1804 换源</h3><p>安装好Ubuntu 1804以后首先换源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install apt-transport-https ca-certificates -y</span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sed -i <span class="string">&quot;s/cn.archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br><span class="line">sed -i <span class="string">&quot;s/http/https/g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>其中，安装<code>apt-transport-https</code>并将安装协议更换到<code>https</code>以避免运营商缓存劫持。</p><h3 id="安装ros-melodic">安装ROS Melodic</h3><p>参考 <a href="http://wiki.ros.org/cn/melodic/Installation/Ubuntu">http://wiki.ros.org/cn/melodic/Installation/Ubuntu</a></p><h4 id="设置sources.list">设置sources.list</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.aliyun.com/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="更新">【更新】</h5><p>国科大ROS源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.ustc.edu.cn/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>北外ROS源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.bfsu.edu.cn/ros/ubuntu/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置密钥">设置密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><p>另一种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL <span class="string">&#x27;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&#x27;</span> | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="安装">安装</h4><p>桌面完整版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install ros-melodic-desktop-full -y</span><br></pre></td></tr></table></figure><h3 id="初始化rosdep">初始化rosdep</h3><p>初始化需要使用代理服务器，设置代理服务器后请修改<code>sudo</code>配置文件以传递环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><h3 id="设置环境">设置环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source &#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h3 id="构建工厂依赖">构建工厂依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近的小车需要用到ROS，学习的过程做个记录。&lt;/p&gt;
&lt;p&gt;此次记录的主要是软件安装过程中遇到的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://2021.cyou/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程的应用</title>
    <link href="https://2021.cyou/p/how-to-use-python-multithreading/"/>
    <id>https://2021.cyou/p/how-to-use-python-multithreading/</id>
    <published>2021-04-02T10:45:00.000Z</published>
    <updated>2021-04-02T10:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建线程之前，需要首先了解一下进程和线程的区别，父线程和子线程的区别：</p><ul><li>每个进程至少有一个线程，作为程序的入口，这个线程就是主线程。</li><li>每个进程至少有一个主线程，其他线程成为工作线程。</li><li>父线程：如果线程A启动了一个线程B，A就是B的父线程。</li><li>子线程：B就是A的子线程。</li></ul><a id="more"></a><h4 id="使用threading.thread模块创建线程">使用threading.Thread模块创建线程</h4><p>Python3通过threading包提供对线程的支持。</p><h5 id="简单使用">简单使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s, time_loop</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line">        print(<span class="string">f&quot;The delay is <span class="subst">&#123;delay_s&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello, args=[<span class="number">2</span>, <span class="number">2</span>]).start()</span><br><span class="line">threading.Thread(target=say_hello, args=[<span class="number">1</span>, <span class="number">1</span>]).start()</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading01.png" /></p><p>程序运行到12行时，启动子线程1执行say_hello(2, 2)，此时主线程继续向下执行；</p><p>程序运行到13行时，启动子线程2执行say_hello(1, 1)，此次主线程执行完毕，等待子线程执行完毕。</p><p>1秒后子线程2先执行完毕，切换到另一个子线程1继续执行。</p><h5 id="daemon属性的设置">daemon属性的设置</h5><p>Python中，在构造线程对象时，可以设置<code>daemon</code>属性，这个属性必须在start方法前设置好。</p><p>主线程是程序启动第一个线程，主线程可以在启动<code>n</code>个子线程。</p><p>daemon属性可以不设置，默认为<code>None</code>，主线程默认是<code>False</code>。</p><p>daemon属性分为以下三种：</p><h6 id="daemonfalse">daemon=False</h6><p>当<code>daemon</code>属性为<code>False</code>时，父线程在运行完毕时，会等待所有子线程退出才结束程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s=<span class="number">1</span>, time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_hello daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading02.png" /></p><p>通过<code>isDaemon()</code>方法可以返回当前线程的<code>daemon</code>值，主线程默认是<code>False</code>，子线程也是<code>False</code>的原因是创建线程对象时指定了<code>daemon=False</code>.</p><p>主程序在构造线程对象时就立即启动了，然后子线程返回了结果中的第一行内容，然后sleep(1)模拟IO，此时CPU发现子线程阻塞了，马上切换到主线程继续执行，主线程先后打印第二行和第三行，此时主线程的代码已经执行到结尾。</p><p>因为主线程为子线程的<code>daemon</code>值设置为<code>False</code>，这时就又发生了线程切换到子线程，子线程先后执行完第四行和第五行，然后子线程就全部执行完毕，主线程看到子线程退出后，也立即退出，整个程序结束。</p><h6 id="daemontrue">daemon=True</h6><p>当<code>daemon</code>为<code>True</code>时，父线程在执行完毕后，无论子线程是否正在运行，都会伴随父进程一起退出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s=<span class="number">1</span>, time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_hello daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello, daemon=<span class="literal">True</span>).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading03.png" /></p><p>当daemon设置为True时，即主线程不关心子线程状态，主线程退出，子线程也必须跟着退出。</p><p>运行结果中子线程就执行了一行语句，此时CPU发现子线程阻塞，线程切换到主线程，主线程执行完最后两句，就立即退出，整个程序结束。</p><h6 id="daemonnone">daemon=None</h6><p>daemon属性可以不设置，默认值是None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_grandson_thread</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">f&quot;say_grandson_thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>\n&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_son_thread</span>(<span class="params">time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_son_thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>\n&quot;</span>)</span><br><span class="line">        threading.Thread(target=say_grandson_thread, daemon=<span class="literal">None</span>).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_son_thread, daemon=<span class="literal">True</span>).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading04.png" /></p><p>这里在主线程中使用了延迟1秒，来让子线程启动的子线程有机会输出其daemon属性值，如果不设置延迟，还没等到子线程的子线程启动，子线程就结束了，最终导致子线程的子线程无法启动。</p><p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading05.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建线程之前，需要首先了解一下进程和线程的区别，父线程和子线程的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个进程至少有一个线程，作为程序的入口，这个线程就是主线程。&lt;/li&gt;
&lt;li&gt;每个进程至少有一个主线程，其他线程成为工作线程。&lt;/li&gt;
&lt;li&gt;父线程：如果线程A启动了一个线程B，A就是B的父线程。&lt;/li&gt;
&lt;li&gt;子线程：B就是A的子线程。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>安装Chromium浏览器并解决缺少 Google API 密钥问题</title>
    <link href="https://2021.cyou/p/how-to-install-Chromium-and-solve-the-problem/"/>
    <id>https://2021.cyou/p/how-to-install-Chromium-and-solve-the-problem/</id>
    <published>2021-02-09T10:49:00.000Z</published>
    <updated>2021-02-09T10:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Chromium</strong>是<a href="https://zh.wikipedia.org/wiki/Google">Google</a>为发展浏览器<a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a>而开启的免费开源软件项目。Chromium的用户界面极简。Google期望使浏览器“在认知和物理上都让人感觉轻巧，快速”。（英语：feel lightweight (cognitively and physically) and fast.</p><p>本文主要介绍如何下载Chromium浏览器并解决缺少 Google API 密钥问题。</p><p><strong>关键词：Chromium缺少 Google API</strong></p><a id="more"></a><h4 id="下载chromium">下载Chromium</h4><p>官方站点：https://download-chromium.appspot.com/</p><p>分发站点：<a href="https://chromium.woolyss.com/#updater">Download latest stable Chromium binaries (64-bit and 32-bit) (woolyss.com)</a></p><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/get_chromium.png" /></p><p>解压后放置到任意文件夹。</p><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/unzip_chromium.png" /></p><h4 id="关闭缺少-google-api-密钥提示">关闭缺少 Google API 密钥提示</h4><p>首次打开Chromium时，地址栏下方会提示 <strong>缺少 Google API 密钥，因此 Chromium 的部分功能将无法使用</strong>。</p><p>法一：如不需要登录谷歌账户，仅仅想屏蔽上述烦人的提示，可以直接设置<strong>相关环境变量为<code>no</code></strong>，屏蔽提示。</p><p>打开 windows 的 <code>cmd</code> 命令提示符，依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setx GOOGLE_API_KEY <span class="string">&quot;no&quot;</span></span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_ID <span class="string">&quot;no&quot;</span></span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_SECRET <span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure><p>法二：加入Chromuim-Dev谷歌群组并开启相关API</p><p>搬运自：http://www.chromium.org/developers/how-tos/api-keys</p><ol type="1"><li><p>加入Google Groups <a href="https://groups.google.com/a/chromium.org/forum/?fromgroups#!forum/chromium-dev">chromium-dev@chromium.org</a>，如果介意相关邮件打扰可以选择退订相关邮件。为方便起见，以下API仅限对订加入社群的人可见</p></li><li><p>确保登陆了已经订阅chromium-dev社群的Google账号</p></li><li><p>打开 https://cloud.google.com/console</p></li><li><p>创建或使用现有项目 <img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_a_gcp_project.png" /></p></li><li><p>选择 <code>API和服务-&gt;库</code>，搜索下图给出的API，并按需启用相关API</p><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_api_1.png" /></p></li></ol><figure><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_api_2.png" alt="API库" /><figcaption>API库</figcaption></figure><figure><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/oepn_api_3.png" alt="启用同步API" /><figcaption>启用同步API</figcaption></figure><ol start="5" type="1"><li>返回上级菜单，选择<code>凭据-&gt;创建凭据-&gt;OAuth客户端ID</code>，应用类型选择<code>桌面应用</code>，名称<code>任选</code>。记录得到的客户端ID和客户端密钥。 <img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_1.png" alt="创建凭据" /></li></ol><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_2.png" /></p><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_3.png" /></p><ol start="6" type="1"><li>返回上级菜单，选择<code>凭据-&gt;创建凭据-&gt;API密钥</code>，名称<code>任选</code>。</li></ol><p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/create_api_key.png" /></p><h5 id="设置环境变量">设置环境变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GOOGLE_API_KEY&#x3D;your_api_key</span><br><span class="line">GOOGLE_DEFAULT_CLIENT_ID&#x3D;your_client_id</span><br><span class="line">GOOGLE_DEFAULT_CLIENT_SECRET&#x3D;your_client_secret</span><br></pre></td></tr></table></figure><p>完.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Chromium&lt;/strong&gt;是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Google&quot;&gt;Google&lt;/a&gt;为发展浏览器&lt;a href=&quot;https://zh.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome&lt;/a&gt;而开启的免费开源软件项目。Chromium的用户界面极简。Google期望使浏览器“在认知和物理上都让人感觉轻巧，快速”。（英语：feel lightweight (cognitively and physically) and fast.&lt;/p&gt;
&lt;p&gt;本文主要介绍如何下载Chromium浏览器并解决缺少 Google API 密钥问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：Chromium缺少 Google API&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Chromium" scheme="https://2021.cyou/tags/Chromium/"/>
    
  </entry>
  
  <entry>
    <title>selenium常用方法</title>
    <link href="https://2021.cyou/p/Selenium-positioning-method/"/>
    <id>https://2021.cyou/p/Selenium-positioning-method/</id>
    <published>2021-02-08T12:53:00.000Z</published>
    <updated>2021-02-08T12:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Selenium 是一个综合性的项目，为web浏览器的自动化提供了各种工具和依赖包。本文主要介绍的是 selenium的常用方法。</p><p><strong>关键词：Selenium常用方法</strong></p><a id="more"></a><h3 id="模拟手机访问">模拟手机访问</h3><p>一般情况下，手机端页面更简单，容易提取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;mobileEmulation&#x27;</span>, mobile_emulation)</span><br></pre></td></tr></table></figure><h3 id="设置chrome为无头模式">设置chrome为无头模式</h3><p>在 Chrome 59　中开始搭载 <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md">Headless Chrome</a>。这是一种在无需显示<em>headless</em>的环境下运行 Chrome 浏览器的方式。从本质上来说，就是不用打卡Chrome窗口来运行 Chrome 的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="加载网址">加载网址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.get(&quot;http:&#x2F;&#x2F;stu.zstu.edu.cn&quot;)</span><br></pre></td></tr></table></figure><h3 id="定位元素">定位元素</h3><h4 id="id定位">id定位</h4><p>HTML 规定id 属性在HTML 文档中必须是唯一的。这类似于公民的身份证号，具有很强的唯一性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_id(&quot;app&quot;)</span><br></pre></td></tr></table></figure><h4 id="name定位">name定位</h4><p>HTML 规定name 来指定元素的名称，因此它的作用更像是人的姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_name(&quot;name&quot;)</span><br></pre></td></tr></table></figure><h4 id="class定位">class定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_class(&quot;classname&quot;)</span><br></pre></td></tr></table></figure><h4 id="tag定位">tag定位</h4><p>HTML 的本质就是通过tag来定义实现不同的功能，每一个元素本质上也是一个tag.</p><p>因为一个tag 往往用来定义一类功能，所以通过tag识别某个元素的概率很低.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_tag_name(&quot;tagname&quot;)</span><br></pre></td></tr></table></figure><h4 id="link-text-定位"><strong>link text 定位</strong></h4><p>find_element_by_link_text()方法通过元素标签对之间的文本信息来定位元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_link_text(&quot;text&quot;)</span><br></pre></td></tr></table></figure><h4 id="partial-link-定位"><strong>partial link 定位</strong></h4><p>partial link 定位是对link 定位的一种补充，有些文本链接会比较长，这个时候可以取文本链接的一部分定位，只要这一部分信息可以唯一地标识这个链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_partial_link_text(&quot;partial text&quot;)</span><br></pre></td></tr></table></figure><h4 id="xpath定位">XPATH定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.find_element_by_xpath(&quot;&quot;)</span><br></pre></td></tr></table></figure><p>XPath是XML的路径语言，通俗一点讲就是通过元素的路径来查找到这个标签元素</p><h5 id="定位页面下所有元素">定位页面下所有元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div</span><br></pre></td></tr></table></figure><h5 id="绝对路径定位">绝对路径定位</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;html&#x2F;body&#x2F;div&#x2F;div</span><br></pre></td></tr></table></figure><h5 id="利用元素属性定位">利用元素属性定位</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#x2F;&#x2F;input[@placeholder&#x3D;&#39;请通过XPATH定位元素&#39;]&quot;</span><br></pre></td></tr></table></figure><h5 id="利用标签所含文字进行定位">利用标签所含文字进行定位</h5><p>严格匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;div[text()&#x3D;&quot;健康申报&quot;]</span><br></pre></td></tr></table></figure><p>部分匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;div[contains(text(), &quot;健康申报&quot;)]</span><br></pre></td></tr></table></figure><h5 id="层级与属性相结合">层级与属性相结合</h5><p>当标签页重复时，Xpath提供了层级过滤。</p><p>例如，找不到儿子，那么就先找他的爸爸，或者找他的爷爷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#x2F;&#x2F;label[contains(text(), &quot;文本内容&quot;)]&#x2F;..&#x2F;following-sibling::div[1]&#x2F;&#x2F;input&#39;</span><br></pre></td></tr></table></figure><p><code>..</code> 表示当前节点的父节点</p><p><code>following-sibling::div[1]</code> 表示当前节点的<strong>兄弟节点</strong>中的 <strong>第 1 个</strong> <strong>div</strong>标签</p><h5 id="使用逻辑运算符">使用逻辑运算符</h5><p>如果一个属性不能唯一的区分一个元素，可以使用逻辑运算符连接多个属性来查找元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;select[@name&#x3D;&#39;city&#39; and @size&#x3D;&#39;4&#39; and @multiple&#x3D;&quot;multiple&quot;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Selenium 是一个综合性的项目，为web浏览器的自动化提供了各种工具和依赖包。本文主要介绍的是 selenium的常用方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：Selenium常用方法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://2021.cyou/tags/Python/"/>
    
    <category term="Selenium" scheme="https://2021.cyou/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>crontab定时任务不执行</title>
    <link href="https://2021.cyou/p/crontab-does-not-work/"/>
    <id>https://2021.cyou/p/crontab-does-not-work/</id>
    <published>2021-02-06T02:41:00.000Z</published>
    <updated>2021-02-06T02:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在生产环境下，添加了 crontab 定时计划任务，后面发现，定时任务并没有执行，在指定的文件夹下并没有相对应的日志产生。</p><p><strong>关键词：crontab定时计划任务不执行</strong></p><a id="more"></a><h4 id="查看crontab服务状态">查看crontab服务状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serivice cron status</span><br></pre></td></tr></table></figure><p>其中若出现 <code>(CRON) info (No MTA installed, discarding output)</code>字样，说明linux系统中没有安装<code>postfix</code>。Postfix 是一种电子邮件服务器软件。当crontab执行脚本时，会将输出通过本地的文本邮件的方式传递给当前用户，传递的内容存放在<code>/var/mail/&lt;当前用户名&gt;</code>文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install postfix -y</span><br></pre></td></tr></table></figure><h4 id="将标准错误和标准输出重定向到文件">将标准错误和标准输出重定向到文件</h4><p>当所有的输出重定向到文件以后，crontab就不会给本地用户发信息啦，也就解决了上节的问题。</p><p><strong>为了将所有的输出</strong>都重定向到文件，可以在cron里写 <code>*/1 * * * * r.sh</code></p><p><code>r.sh</code>里写 <code>a.sh &gt;&gt; /root/a.log 2&gt;&amp;1</code></p><h5 id="附录linux重定向">附录：linux重定向</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt; filename 　　　　　把标准输出重定向到一个新文件中</span><br><span class="line"><span class="built_in">command</span> &gt;&gt; filename 　　　　　把标准输出重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> 1 &gt; fielname 　　　　　把标准输出重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> &gt; filename 2&gt;&amp;1 　　　把标准输出和标准错误一起重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> 2 &gt; filename 　　　　把标准错误重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> 2 &gt;&gt; filename 　　　　把标准输出重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> &gt;&gt; filename 2&gt;&amp;1 　　把标准输出和标准错误一起重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> &lt; filename &gt;filename2 　　把<span class="built_in">command</span>命令以filename文件作为标准输入，以filename2文件作为标准输出</span><br><span class="line"><span class="built_in">command</span> &lt; filename 　　　把<span class="built_in">command</span>命令以filename文件作为标准输入</span><br><span class="line"><span class="built_in">command</span> &lt;&lt; delimiter 　　把从标准输入中读入，直至遇到delimiter分界符</span><br><span class="line"><span class="built_in">command</span> &lt;&amp;m 　　　把文件描述符m作为标准输入</span><br><span class="line"><span class="built_in">command</span> &gt;&amp;m 　　　把标准输出重定向到文件描述符m中</span><br><span class="line"><span class="built_in">command</span> &lt;&amp;- 　　　把关闭标准输入 </span><br></pre></td></tr></table></figure><p><strong>&gt; 默认为标准输出重定向，与 1&gt; 相同 2&gt;&amp;1</strong> 意思是把 标准错误输出 重定向到 标准输出.</p><p><strong>&amp;&gt;file</strong> 意思是把<strong>标准输出</strong> 和 <strong>标准错误输出</strong> 都重定向到文件file中</p><p><strong>/dev/null是一个文件，这个文件比较特殊，所有传给它的东西它都丢弃掉</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在生产环境下，添加了 crontab 定时计划任务，后面发现，定时任务并没有执行，在指定的文件夹下并没有相对应的日志产生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：crontab定时计划任务不执行&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="crontab" scheme="https://2021.cyou/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5教程</title>
    <link href="https://2021.cyou/p/PyQt5-Chinese-tutorial/"/>
    <id>https://2021.cyou/p/PyQt5-Chinese-tutorial/</id>
    <published>2021-02-02T06:31:00.000Z</published>
    <updated>2021-02-02T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习PyQt的基本功能。</p><a id="more"></a><h3 id="例1-简单的窗口">例1 简单的窗口</h3><p>这个简单的小例子展示的是一个小窗口。但是我们可以在这个小窗口上面很多事情，改变大小，最大化，最小化等。这需要很多代码能实现。这在很多应用中很常见，没必要每次都要重写这一部分代码，Qt已经提供了这些功能。PyQt5是一个高级的工具集合，相比使用低级的工具，能省略上百行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    </span><br><span class="line">    w = QWidget()</span><br><span class="line">    w.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">    w.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    w.setWindowTitle(<span class="string">&#x27;Simple&#x27;</span>)</span><br><span class="line">    w.show()</span><br><span class="line">    </span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>运行上面的代码，能展示出一个小窗口。</p><p>分步讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br></pre></td></tr></table></figure><p>这里引入了PyQt5.QtWidgets这个模块，这个模块包含了基本的组件。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app &#x3D; QApplication(sys.argv)</span><br></pre></td></tr></table></figure><p>每个PyQt5应用都必须创建这样的一个应用对象。sys.argv是一组命令行参数的列表。<strong>Python可以在shell里运行，这个参数提供了对脚本控制的功能。</strong></p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w &#x3D; QWidget()</span><br></pre></td></tr></table></figure><p>QWidget控件是一个用户界面的<strong>基本控件</strong>，它提供了基本的应用构造器。默认情况下，构造器是没有父级的，<strong>没有父级的构造器被称为窗口(window)。</strong></p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br></pre></td></tr></table></figure><p>resize()方法能改变控件的大小，这里的意思是窗口宽250px，高150px.</p><hr /><p>move()是修改控件位置的方法，它把控件放置到屏幕坐标的(300, 300)的位置。<strong>屏幕坐标系的原点是屏幕的左上角。</strong></p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.setWindowTitle(<span class="string">&#x27;Simple&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们给这个窗口添加了一个标题，标题在标题栏展示。<strong>虽然这看起来是一句废话，但是后面还有各种栏，还是要重点说一下。</strong></p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.show()</span><br></pre></td></tr></table></figure><p>show()能让控件在桌面上显示出来。控件在内存里创建，调用这个函数才能在操作系统上显示出来。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>最后，我们进入了应用的主循环中，事件处理器这个时候开始工作。主循环从窗口上接收事件，并把事件派发到应用控件里。当调用<code>exit()</code>方法或直接销毁主控件时，主循环就会结束。<code>sys.exit()</code>方法能确保主循环安全退出。外部环境会收到主控件如何结束的信息。</p><p><code>exec_()</code>之所以有个下划线，是因为<code>exec</code>是Python的一个关键字。</p><p>程序预览：</p><p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_01.png" /></p><h3 id="例2-带窗口图标">例2 带窗口图标</h3><p>窗口图标通常是显示一个窗口的左上角，标题栏的最左边。下面的例子就是怎么用PyQt5创建一个这样的窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">220</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Icon&#x27;</span>)</span><br><span class="line">        self.setWindowIcon(Qicon(<span class="string">&#x27;web.png&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        self.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>此处用到了Python面向对象编程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">super().__init__()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>面向对象编程最重要的三个部分是类(class)、数据和方法。<code>class Example:</code>创建了一个类的调用，这个类继承自<code>QWidget</code>类。调用了两个构造器，一个是这个类本身的，一个是这个类继承的。super()构造器方法返回父级的对象。<code>_\_init__()</code>方法是构造器的一个方法。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.initUI()</span><br></pre></td></tr></table></figure><p>使用<code>initUI()</code>方法创建一个GUI。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 自己准备一个web.png</span><br><span class="line">self.setGeometry(300, 300, 300, 220)</span><br><span class="line">self.setWindowTitle(&#39;Icon&#39;)</span><br><span class="line">self.setWindowIcon(QIcon(&#39;web.png&#39;))</span><br></pre></td></tr></table></figure><p>上面的三个方法都继承自<code>QWidget</code>类。<code>setGeometry()</code>有三个作用：把窗口放到屏幕上并设置窗口大小。参数分别代表屏幕坐标的x、y和窗口大小的宽、高。也就是说这个方法是<code>resize()</code>和<code>move()</code>的合体。最后一个方法是添加了图标。也创建了一个<code>QIcon</code>对象，然后接受一个路径作为参数显示图标。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(ex.exec_())</span><br></pre></td></tr></table></figure><p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_02.png" /></p><h3 id="例3-提示框">例3 提示框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QToolTip, QPushButton, QApplication)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.initUI()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&#x27;SansSerif&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        self.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        btn = QPushButton(<span class="string">&#x27;Button&#x27;</span>, self)</span><br><span class="line">        btn.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Tooltips&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>在这个例子中, 我们为应用创建了一个提示框.</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QToolTip.setFont(QFont(<span class="string">&#x27;SansSerif&#x27;</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>这个静态方法设置了提示框的字体。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; wighet&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用<code>setToolTip()</code>创建提示框可以使用<strong>富文本格式</strong>的内容。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn = QPushButton(<span class="string">&#x27;Button&#x27;</span>, self)</span><br><span class="line">btn.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建一个按钮，并且为按钮添加了一个提示框。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.resize(btn.sizeHint())</span><br><span class="line">btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>调整按钮大小, 并且让按钮在屏幕上显示出来，sizeHint()方法提供了一个默认的按钮大小。</p><hr /><p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_03.png" /></p><h3 id="例4-关闭窗口">例4 关闭窗口</h3><p>关闭窗口最直观的方式就是点击标题栏的叉叉，在这个例子里，我们展示的是如何用程序关闭一个窗口。这里我们将接触到一点<strong>信号(signal)和槽(slots)</strong>的知识。</p><p>本例使用的是<code>QPushButton</code>组件类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QPushButton(string text, QWidget parent &#x3D; None)</span><br></pre></td></tr></table></figure><p>text参数是想要显示的按钮名称，parent参数是放在按钮上的组件，在我们的例子里，这个参数是QWidget。应用中的组件都是经过一层层的继承来的。在这个层里，大部分的组件都有自己的父级，没有父级的组件被称为<strong>顶级窗口</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        qbtn = QPushButton(<span class="string">&#x27;Quit&#x27;</span>, self)</span><br><span class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        qbtn.resize(qbtn.sizeHint())</span><br><span class="line">        qbtn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">250</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Quit button&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>上述代码创建了一个点击之后就推出窗口的按钮。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from PyQt5.QtCore import QCoreApplication</span><br></pre></td></tr></table></figure><p>程序需要<code>QtCore</code>对象。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbtn &#x3D; QPushButton(&#39;Quit&#39;, self)</span><br></pre></td></tr></table></figure><p>创建一个<code>QPushButton</code>按钮。第一个参数是按钮的文本，第二个参数是按钮的父级组件，这个例子中，父级组件就是我们创建的继承自<code>QWidget</code>的<code>Example</code>类。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br></pre></td></tr></table></figure><p>创建了<strong>信号(singal)和槽(slot)</strong>的连接。点击按钮之后，信号会被捕捉并给出既定的反应。<code>QCoreApplication</code>包含了时间的主循环，它能添加和删除所有的事件。<code>instance()</code>创建了一个它的实例。<code>QCoreApplication</code>是在<code>QApplication</code>里创建的。点击事件和能终止进程并推出应用的quit函数绑定在了一起。在发送者和接收者之间建立了通讯，发送者就是按钮，接收者就是应用对象。</p><figure><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_04.png" alt="image-20210226150310118" /><figcaption>image-20210226150310118</figcaption></figure><p>点击一下<code>Quit</code>，程序就会自动退出。</p><h3 id="例5-消息盒子">例5 消息盒子</h3><p>默认情况下，我们点击标题栏的x按钮，QWidget就会关闭。但是有时候，我们需要修改这个默认行为。例如，我们打开的是一个文件编辑器，并且做了一些修改，这个时候就需要在关闭按钮的时候让用户进一步确认操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QMessageBox, QApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        </span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWidnowTitle(<span class="string">&#x27;Message box&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span>(<span class="params">self, event</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">       </span><br><span class="line">    reply = QMessageBox.question(self, <span class="string">&#x27;Message&#x27;</span>, <span class="string">&quot;Are you sure to quit?&quot;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>如果关闭<code>QWidget</code>，就会产生一个<code>QCloseEvent</code>，并且把它传入到<code>closeEvent</code>函数的event参数中。改变控件的默认行为，就是替换掉默认的事件处理。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reply &#x3D; QMessageBox.question(self, &#39;Message&#39;,&quot;Are you sure to quit?&quot;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br></pre></td></tr></table></figure><p>上述代码创建了一个消息框，上面有两个按钮：<code>Yes</code>和<code>No</code>。第一个字符串显示在消息框的标题，第二个字符串显示在对话框，第三个参数是消息框的两个按钮，最后一个参数是默认按钮，这个按钮是默选中的。返回值在变量<code>reply</code>里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">event.accept()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">event.ignore()</span><br></pre></td></tr></table></figure><p>这里判断返回值，如果点击的是Yes按钮，就关闭组件和应用，否则就忽略关闭事件。</p><p>程序预览：</p><p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_05.png" /></p><p>例6 窗口居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QDestopWidget, QApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">        self.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.center()</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Center&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span>(<span class="params">self</span>):</span></span><br><span class="line">        qr = self.frameGeometry()</span><br><span class="line">        cp = QDesktopWidget().availableGeometry().center()</span><br><span class="line">        qr.moveCenter(cp)</span><br><span class="line">        self.move(qr.topLeft())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><hr /><p><code>QtGui.QDesktopWidget</code>提供了用户的桌面信息，包括屏幕的大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.center()</span><br></pre></td></tr></table></figure><p>这个方法调用下面实现对话框居中的方法。</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qr &#x3D; self.frameGeometry()</span><br></pre></td></tr></table></figure><p>获得主窗口所在的框架。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp = QDesktopWidget().availableGeometry().center()</span><br></pre></td></tr></table></figure><p>获得显示器的分辨率，然后得到屏幕中心点的位置。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qr.moveCenter(cp)</span><br></pre></td></tr></table></figure><p>然后把主窗口框架中心点位置放置到屏幕的中心位置。</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.move(qr.topLeft())</span><br></pre></td></tr></table></figure><p>然后通过move函数把主窗口的左上角移动到其框架的左上角，这样就把窗口居中了。</p><p>程序预览：</p><p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_06.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习PyQt的基本功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PyQt5" scheme="https://2021.cyou/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>杭州旅游攻略</title>
    <link href="https://2021.cyou/p/Travel-in-Hangzhou/"/>
    <id>https://2021.cyou/p/Travel-in-Hangzhou/</id>
    <published>2021-01-31T06:31:00.000Z</published>
    <updated>2021-01-31T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学在杭州，玩在杭州！</p><a id="more"></a><h3 id="延安路商业街">延安路商业街</h3><figure><img src="https://ftp.fly97.cn/image/image-20210131092627579.png" alt="image-20210131092627579" /><figcaption>image-20210131092627579</figcaption></figure><h3 id="延安路到法喜寺">延安路到法喜寺</h3><figure><img src="https://ftp.fly97.cn/image/image-20210131093545985.png" alt="image-20210131093545985" /><figcaption>image-20210131093545985</figcaption></figure><p>法喜寺</p><figure><img src="https://ftp.fly97.cn/image/image-20210131092418794.png" alt="image-20210131092418794" /><figcaption>image-20210131092418794</figcaption></figure><h3 id="延安路到河坊街">延安路到河坊街</h3><figure><img src="https://ftp.fly97.cn/image/image-20210131093828915.png" alt="image-20210131093828915" /><figcaption>image-20210131093828915</figcaption></figure><p>河坊街</p><figure><img src="https://ftp.fly97.cn/image/image-20210131092531902.png" alt="image-20210131092531902" /><figcaption>image-20210131092531902</figcaption></figure><h3 id="延安路到北高峰">延安路到北高峰</h3><p><img src="https://ftp.fly97.cn/image/image-20210131093705860.png" /></p><p>延安路</p><figure><img src="https://ftp.fly97.cn/image/image-20210131092737922.png" alt="image-20210131092737922" /><figcaption>image-20210131092737922</figcaption></figure><h3 id="西湖龙井">西湖龙井</h3><figure><img src="https://ftp.fly97.cn/image/image-20210131094030362.png" alt="image-20210131094030362" /><figcaption>image-20210131094030362</figcaption></figure><figure><img src="https://ftp.fly97.cn/image/image-20210131092947998.png" alt="image-20210131092947998" /><figcaption>image-20210131092947998</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;学在杭州，玩在杭州！&lt;/p&gt;</summary>
    
    
    
    
    <category term="Travel" scheme="https://2021.cyou/tags/Travel/"/>
    
    <category term="Hangzhou" scheme="https://2021.cyou/tags/Hangzhou/"/>
    
  </entry>
  
</feed>
