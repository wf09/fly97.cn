<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anacoda3 安装Pytorch小记录</title>
    <url>/p/Install-Pytorch-using-Anaconda3/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>

<h4 id="1-下载Anadoda3安装包"><a href="#1-下载Anadoda3安装包" class="headerlink" title="1.下载Anadoda3安装包"></a>1.下载Anadoda3安装包</h4><ul>
<li><p>可以选择清华镜像源</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Windows-x86_64.exe">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Windows-x86_64.exe</a></p>
</li>
</ul>
<p><img src="https://ftp.fly97.cn/image/image-20191228165427982.png"></p>
<ul>
<li><p>有条件的可以选择官网下载</p>
<p><a href="https://repo.anaconda.com/archive/Anaconda3-2019.10-Windows-x86_64.exe">https://repo.anaconda.com/archive/Anaconda3-2019.10-Windows-x86_64.exe</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20191228170139071.png" alt="image-20191228170139071"></p>
</li>
</ul>
<h4 id="2-双击安装"><a href="#2-双击安装" class="headerlink" title="2.双击安装"></a>2.双击安装</h4><p><em>注意：安装时可以选择将Anaconda注册为默认的Python环境</em></p>
<p>​    <img src="https://ftp.fly97.cn/image/image-20191228170508433.png" alt="image-20191228170508433" style="zoom:67%;" /></p>
<p>然后一路next就可以了</p>
<p>安装完成！</p>
<p><img src="https://ftp.fly97.cn/image/image-20191228170821162.png" alt="image-20191228170821162"></p>
<p>接下来到了很重要的环节————</p>
<h4 id="3-创建conda虚拟环境"><a href="#3-创建conda虚拟环境" class="headerlink" title="3.创建conda虚拟环境"></a>3.创建conda虚拟环境</h4><p>为什么要创建虚拟环境呢？</p>
<p>Anaconda主要是对python中的各个包进行管理与部署，从而方便用户的使用体验。</p>
<p>在从github上面下载别人的代码之后，不同的代码往往需要特定的运行环境。比如说有些代码需要在python3.6的环境下运行，有些代码需要在python2.7的环境下运行。</p>
<p>这个时候，就需要conda出马了</p>
<h5 id="选择Anaconda-Prompt-Anaconda3-以管理员身份运行"><a href="#选择Anaconda-Prompt-Anaconda3-以管理员身份运行" class="headerlink" title="选择Anaconda Prompt (Anaconda3)以管理员身份运行"></a>选择Anaconda Prompt (Anaconda3)以管理员身份运行</h5><p><img src="https://ftp.fly97.cn/image/image-20191228171544280.png" alt="image-20191228171544280"></p>
<h5 id="输入命令："><a href="#输入命令：" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda create -n environment_name python=3 numpy  pytorch torchvision cpuonly -c pytorch</code></p>
<p>注意：以上命令是安装CPU版本的Pytorch</p>
<h5 id="如需安装GPU版本的Pytorch可以去官网查看对应命令"><a href="#如需安装GPU版本的Pytorch可以去官网查看对应命令" class="headerlink" title="如需安装GPU版本的Pytorch可以去官网查看对应命令"></a>如需安装GPU版本的Pytorch可以去官网查看对应命令</h5><p><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20191228172220826.png" alt="image-20191228172220826"></p>
<h5 id="然后一路敲y直到安装完成"><a href="#然后一路敲y直到安装完成" class="headerlink" title="然后一路敲y直到安装完成"></a>然后一路敲y直到安装完成</h5><p><img src="https://ftp.fly97.cn/image/image-20191228172356834.png" alt="image-20191228172356834"></p>
<p>接下来需要切换到刚刚创建好的虚拟环境</p>
<h5 id="输入命令：-1"><a href="#输入命令：-1" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda activate pytorch</code></p>
<p><img src="https://ftp.fly97.cn/image/image-20191228172503786.png" alt="image-20191228172503786"></p>
<h5 id="安装-librosa-音频处理库"><a href="#安装-librosa-音频处理库" class="headerlink" title="安装 librosa 音频处理库"></a>安装 librosa 音频处理库</h5><p><code>conda install -c conda-forge librosa</code></p>
<h4 id="4-最后一步：安装Spyder-IDE"><a href="#4-最后一步：安装Spyder-IDE" class="headerlink" title="4.最后一步：安装Spyder IDE"></a>4.最后一步：安装Spyder IDE</h4><h5 id="输入命令：-2"><a href="#输入命令：-2" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda install spyder</code></p>
<h5 id="没有问题的话输入命令："><a href="#没有问题的话输入命令：" class="headerlink" title="没有问题的话输入命令："></a>没有问题的话输入命令：</h5><p><code>spyder</code></p>
<p>会自动打开spyder4窗口</p>
<h5 id="如果出现"><a href="#如果出现" class="headerlink" title="如果出现"></a>如果出现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Windows\system32&gt;spyder</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py&quot;</span>, line <span class="number">204</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> PySide <span class="keyword">import</span> __version__ <span class="keyword">as</span> PYSIDE_VERSION  <span class="comment"># analysis:ignore</span></span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;PySide&#x27;</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\Scripts\spyder-script.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\start.py&quot;</span>, line <span class="number">201</span>, <span class="keyword">in</span> main</span><br><span class="line">    <span class="keyword">from</span> spyder.app <span class="keyword">import</span> mainwindow</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\mainwindow.py&quot;</span>, line <span class="number">52</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    requirements.check_qt()</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\requirements.py&quot;</span>, line <span class="number">41</span>, <span class="keyword">in</span> check_qt</span><br><span class="line">    <span class="keyword">import</span> qtpy</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py&quot;</span>, line <span class="number">210</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> PythonQtError(<span class="string">&#x27;No Qt bindings could be found&#x27;</span>)</span><br><span class="line">qtpy.PythonQtError: No Qt bindings could be found</span><br></pre></td></tr></table></figure>

<p>说明没有安装 pyqt</p>
<p>输入命令</p>
<p><code>conda install pyqt</code>   </p>
<p>即可</p>
<h5 id="至此，pytorch安装完成，你又可以愉快的机器学习了"><a href="#至此，pytorch安装完成，你又可以愉快的机器学习了" class="headerlink" title="至此，pytorch安装完成，你又可以愉快的机器学习了"></a>至此，pytorch安装完成，你又可以愉快的机器学习了</h5><p>安装完成后，你会发现开始栏多了一个Spyder，从此，可以直接从这里打开你刚刚创建的虚拟环境对应的Spyder~</p>
<p><img src="https://ftp.fly97.cn/image/image-20191228174316358.png" alt="image-20191228174316358"></p>
]]></content>
      <tags>
        <tag>Anacoda3</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Anaconda3(一)</title>
    <url>/p/Chapter-01-of-how-to-install-anaconda/</url>
    <content><![CDATA[<p>Python是一种面向对象的解释型计算机程序设计语言，其使用，具有跨平台的特点，可以在Linux、macOS以及Windows系统中搭建环境并使用，其编写的代码在不同平台上运行时，几乎不需要做较大的改动，使用者无不受益于它的便捷性。</p>
<p>此外，Python的强大之处在于它的应用领域范围之广，遍及人工智能、科学计算、Web开发、系统运维、大数据及云计算、金融、游戏开发等。实现其强大功能的前提，就是Python具有数量庞大且功能相对完善的标准库和第三方库。通过对库的引用，能够实现对不同领域业务的开发。然而，正是由于库的数量庞大，对于管理这些库以及对库作及时的维护成为既重要但复杂度又高的事情。</p>
<p><strong>Anaconda（<a href="https://link.zhihu.com/?target=https://www.anaconda.com/download/%23macos">官方网站</a>）就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。</strong></p>
<a id="more"></a>

<h3 id="下载Anadoda3安装包"><a href="#下载Anadoda3安装包" class="headerlink" title="下载Anadoda3安装包"></a>下载Anadoda3安装包</h3><ul>
<li><p>可以选择清华镜像源</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20191228165427982.png"></p>
</li>
</ul>
<p>注意时间，选择最近的即可</p>
<p><img src="https://ftp.fly97.cn/image/image-20201015093722350.png" alt="image-20201015093722350"></p>
<ul>
<li><p><del>官网下载(网速特别慢)</del></p>
<p><a href="https://repo.anaconda.com/archive/">https://repo.anaconda.com/archive/</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20201015094427422.png" alt="image-20201015094427422"></p>
</li>
</ul>
<p>等待下载完成（以下以2019.10的版本为例）。</p>
<h3 id="双击安装"><a href="#双击安装" class="headerlink" title="双击安装"></a>双击安装</h3><p><em>注意：安装时可以选择将Anaconda注册为默认的Python环境</em></p>
<p>​    <img src="https://ftp.fly97.cn/image/image-20191228170508433.png" alt="image-20191228170508433" style="zoom:67%;" /></p>
<p><strong>注意：官方不推荐第一个选项。勾选第二个选项即可。</strong></p>
<p>等待安装完成。</p>
<p><img src="https://ftp.fly97.cn/image/image-20191228170821162.png" alt="image-20191228170821162"></p>
<h3 id="验证安装完成"><a href="#验证安装完成" class="headerlink" title="验证安装完成"></a>验证安装完成</h3><p>点击开始 -&gt; Anaconda3 </p>
<p><img src="https://ftp.fly97.cn/image/image-20200723190040460.png" alt="image-20200723190040460"></p>
<p>找到<strong>Anaconda Prompt (Anaconda3)</strong></p>
<p><img src="https://ftp.fly97.cn/image/image-20200723190154019.png" alt="image-20200723190154019"></p>
<p>点击并输入Python，敲回车以后出现以下提示说明安装完成。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200723190228823.png" alt="image-20200723190228823"></p>
<h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>点击<strong>开始 -&gt; Anaconda3 -&gt; Spyder</strong></p>
<p><img src="https://ftp.fly97.cn/image/image-20200723191007101.png" alt="image-20200723191007101"></p>
<p>也可以点击<strong>开始 -&gt; Anaconda3 -&gt; Jupyter Notebook (Anaconda3)</strong></p>
<p>等待片刻后会自动打开浏览器</p>
<p><img src="https://ftp.fly97.cn/image/image-20200723191158884.png" alt="image-20200723191158884"></p>
<p>输入代码以后，按住<strong>shift+回车</strong>，即可运行代码。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200723191351960.png" alt="image-20200723191351960"></p>
<p>未完待续……</p>
]]></content>
      <tags>
        <tag>Anacoda3</tag>
      </tags>
  </entry>
  <entry>
    <title>Caddy web docker镜像</title>
    <url>/p/How-to-use-Caddy-web-docker-image/</url>
    <content><![CDATA[<p>基于Go语言的web服务器</p>
<p>Caddy服务器是一个开源的，使用 Golang 编写，支持 HTTP/2 的 Web 服务端。它使用Golang 标准库提供HTTP 功能。 Caddy 一个显著的特性是默认启用HTTPS。它是第一个无需额外配置即可提供HTTPS 特性的Web 服务器。</p>
<a id="more"></a>

<p>拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull fly97&#x2F;caddy</span><br></pre></td></tr></table></figure>

<p>后台运行容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name caddy \</span><br><span class="line">    -p 443:443 -p 80:80 \</span><br><span class="line">    -v /var/caddywww/:/var/caddywww \</span><br><span class="line">    -v /var/<span class="built_in">log</span>/caddy:/var/<span class="built_in">log</span>/caddy \</span><br><span class="line">    -v /etc/caddy:/etc/caddy \</span><br><span class="line">    --restart=always fly97/caddy </span><br></pre></td></tr></table></figure>

<p>配置文件放在以下目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/caddy/Caddyfile</span><br><span class="line">http:///hub.docker.com https:///hub.docker.com * &#123;</span><br><span class="line">        root /var/caddywww/hub.docker.com</span><br><span class="line">        gzip</span><br><span class="line">        tls /var/caddywww/.ssl/hub.docker.com/_hub.docker.com_bundle.pem /var/caddywww/.ssl/hub.docker.com/_hub.docker.com.pem</span><br><span class="line">        <span class="built_in">log</span> /var/<span class="built_in">log</span>/caddy/access.log</span><br><span class="line">        errors /var/<span class="built_in">log</span>/caddy/error.log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的网络模式</title>
    <url>/p/Docker-network-mode/</url>
    <content><![CDATA[<p><code>docker</code>目前支持以下5种网络模式：</p>
<p>使用<code>docker run</code> 创建 <code>Docker</code> 容器时，可以用 <code>--network</code> 选项指定容器的网络模式。</p>
<a id="more"></a>

<h3 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h3><p>​    使用 <code>--netrork=host</code> 指定。与宿主机共享网络，此时容器没有使用网络的namespace，宿主机的所有设备，如Dbus会暴露到容器中，因此存在安全隐患。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</p>
<h3 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h3><p>使用 <code>--network=container:NAME or ID</code> 指定。指定与某个容器实例共享网络。这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<h3 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h3><p>使用 <code>--network=none</code> 指定。不设置网络，相当于容器内没有配置网卡，用户可以手动配置。</p>
<h3 id="bridge模式-（默认设置）"><a href="#bridge模式-（默认设置）" class="headerlink" title="bridge模式 （默认设置）"></a>bridge模式 （默认设置）</h3><p>使用 <code>--network=bridge</code> 指定，默认设置。</p>
<p>bridge 模式是 Docker 默认的网络设置，此模式会为每一个容器分配 Network Namespace、设置 IP 等，并将一个主机上的 Docker 容器连接到一个虚拟网桥上。</p>
<p>当 Docker server 启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>接下来就要为容器分配 IP 了，Docker 会从 RFC1918 所定义的私有 IP 网段中，选择一个和宿主机不同的IP地址和子网分配给 docker0，连接到 docker0 的容器就从这个子网中选择一个未占用的 IP 使用。如一般 Docker 会使用 172.17.0.0/16 这个网段，并将 172.17.42.1/16 分配给 docker0 网桥（在主机上使用 ifconfig 命令是可以看到 docker0 的，可以认为它是网桥的管理接口，在宿主机上作为一块虚拟网卡使用）</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<p><strong>默认是桥接模式，网络地址为172.17.0.0/16，同一主机的容器实例能够通信，但不能跨主机通信。</strong></p>
<h3 id="自定义模式"><a href="#自定义模式" class="headerlink" title="自定义模式"></a>自定义模式</h3><p>使用自定义网络，可以使用docker network create创建，并且默认支持多种网络驱动，用户可以自由创建桥接网络或者overlay网络。</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见操作</title>
    <url>/p/Git-common-operations/</url>
    <content><![CDATA[<p>不说废话，上教程。</p>
<a id="more"></a>

<h4 id="在本地目录下关联远程repository-："><a href="#在本地目录下关联远程repository-：" class="headerlink" title="在本地目录下关联远程repository ："></a>在本地目录下关联远程repository ：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:git_username/repository_name.git</span><br></pre></td></tr></table></figure>

<h4 id="取消本地目录下关联的远程库："><a href="#取消本地目录下关联的远程库：" class="headerlink" title="取消本地目录下关联的远程库："></a>取消本地目录下关联的远程库：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

<h4 id="查看git-commit-历史"><a href="#查看git-commit-历史" class="headerlink" title="查看git commit 历史"></a>查看git commit 历史</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h4 id="回退到某个commit版本"><a href="#回退到某个commit版本" class="headerlink" title="回退到某个commit版本"></a>回退到某个commit版本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;COMMIT_ID&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter NoteBook的快捷键使用指南</title>
    <url>/p/jupyter-notebook-keyboard-shortcut/</url>
    <content><![CDATA[<p><strong>概述：</strong>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</p>
<p>此文简单介绍了 Jupyter Notebook 的快捷键用法。</p>
<p><strong>关键词：</strong>Jupyter Notebook</p>
<a id="more"></a>

<p><strong>Jupyter Notebook</strong> 有两种键盘输入模式。即命令模式和编辑模式，这与 <a href="http://www.vim.org/">Vim</a> 有些类似。</p>
<p>在<strong>编辑模式</strong>下，可以往单元中键入代码或文本，<u>此时单元格被绿色的框线包围，且命令模式下的快捷键不生效。</u></p>
<p>在<strong>命令模式</strong>下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，<u>此时的单元格被灰色的框线包围，且编辑模式下的快捷键不生效。</u></p>
<p>从命令模式进入编辑模式需按 <code>Enter</code> 键，从编辑模式切换到命令模式需按 <code>Esc</code> 键。</p>
<p>以下两表分别是对命令和编辑两种模式下快捷键的简单说明：</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>快捷键（按 Esc 键开启）:</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th align="center">作用</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Enter</strong></td>
<td align="center">转入编辑模式</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift-Enter</strong></td>
<td align="center">运行本单元，选中下个单元</td>
<td align="center">新单元默认为命令模式</td>
</tr>
<tr>
<td><strong>Ctrl-Enter</strong></td>
<td align="center">运行本单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Alt-Enter</strong></td>
<td align="center">运行本单元，在其下插入新单元</td>
<td align="center">新单元默认为编辑模式</td>
</tr>
<tr>
<td><strong>Y</strong></td>
<td align="center">单元转入代码状态</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>M</strong></td>
<td align="center">单元转入 <strong>markdown</strong> 状态</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>R</strong></td>
<td align="center">单元转入 raw 状态</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>1</strong></td>
<td align="center">设定 1 级标题</td>
<td align="center">仅在 markdown 状态下时建议使用标题相关快捷键，如果单元处于其他状态，则会强制切换到 markdown 状态</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td align="center">设定 2 级标题</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td align="center">设定 3 级标题</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>4</strong></td>
<td align="center">设定 4 级标题</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td align="center">设定 5 级标题</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>6</strong></td>
<td align="center">设定 6 级标题</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Up</strong></td>
<td align="center">选中上方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>K</strong></td>
<td align="center">选中上方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Down</strong></td>
<td align="center">选中下方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>J</strong></td>
<td align="center">选中下方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift-K</strong></td>
<td align="center">连续选择上方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift-J</strong></td>
<td align="center">连续选择下方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>A</strong></td>
<td align="center">在上方插入新单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>B</strong></td>
<td align="center">在下方插入新单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>X</strong></td>
<td align="center">剪切选中的单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>C</strong></td>
<td align="center">复制选中的单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift-V</strong></td>
<td align="center">粘贴到上方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>V</strong></td>
<td align="center">粘贴到下方单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Z</strong></td>
<td align="center">恢复删除的最后一个单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>D,D</strong></td>
<td align="center">删除选中的单元</td>
<td align="center">连续按两个 D 键</td>
</tr>
<tr>
<td><strong>Shift-M</strong></td>
<td align="center">合并选中的单元</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Ctrl-S</strong></td>
<td align="center">保存当前 NoteBook</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>S</strong></td>
<td align="center">保存当前 NoteBook</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>L</strong></td>
<td align="center">开关行号</td>
<td align="center">编辑框的行号是可以开启和关闭的</td>
</tr>
<tr>
<td><strong>O</strong></td>
<td align="center">转换输出</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift-O</strong></td>
<td align="center">转换输出滚动</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Esc</strong></td>
<td align="center">关闭页面</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Q</strong></td>
<td align="center">关闭页面</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>H</strong></td>
<td align="center">显示快捷键帮助</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>I,I</strong></td>
<td align="center">中断 NoteBook 内核</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>0,0</strong></td>
<td align="center">重启 NoteBook 内核</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Shift</strong></td>
<td align="center">忽略</td>
<td align="center"></td>
</tr>
<tr>
<td>**Shift-Space              **</td>
<td align="center">向上滚动</td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Space</strong></td>
<td align="center">向下滚动</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><p><strong>快捷键（ 按 Enter 键启动）:</strong></p>
<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">作用</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Tab</strong></td>
<td align="left">代码补全或缩进</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Shift-Tab</strong></td>
<td align="left">提示</td>
<td align="left">输出帮助信息，部分函数、类、方法等会显示其定义原型，如果在其后加 <code>?</code> 再运行会显示更加详细的帮助</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-]</strong></td>
<td align="left">缩进</td>
<td align="left">向右缩进</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-[</strong></td>
<td align="left">解除缩进</td>
<td align="left">向左缩进</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-A</strong></td>
<td align="left">全选</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Z</strong></td>
<td align="left">撤销</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Shift-Z</strong></td>
<td align="left">重做</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Y</strong></td>
<td align="left">重做</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Home</strong></td>
<td align="left">跳到单元开头</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Up</strong></td>
<td align="left">跳到单元开头</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-End</strong></td>
<td align="left">跳到单元末尾</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Down</strong></td>
<td align="left">跳到单元末尾</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Left</strong></td>
<td align="left">跳到左边一个字首</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Right</strong></td>
<td align="left">跳到右边一个字首</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Backspace</strong></td>
<td align="left">删除前面一个字</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Delete</strong></td>
<td align="left">删除后面一个字</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Esc</strong></td>
<td align="left">切换到命令模式</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-M</strong></td>
<td align="left">切换到命令模式</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Shift-Enter</strong></td>
<td align="left">运行本单元，选中下一单元</td>
<td align="left">新单元默认为命令模式</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Enter</strong></td>
<td align="left">运行本单元</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Alt-Enter</strong></td>
<td align="left">运行本单元，在下面插入一单元</td>
<td align="left">新单元默认为编辑模式</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Shift–</strong></td>
<td align="left">分割单元</td>
<td align="left">按光标所在行进行分割</td>
</tr>
<tr>
<td align="left"><strong>Ctrl-Shift-Subtract</strong></td>
<td align="left">分割单元</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-S</strong></td>
<td align="left">保存当前 NoteBook</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Shift</strong></td>
<td align="left">忽略</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Up</strong></td>
<td align="left">光标上移或转入上一单元</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Down</strong></td>
<td align="left">光标下移或转入下一单元</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>Ctrl-/</strong></td>
<td align="left">注释整行/撤销注释</td>
<td align="left">仅代码状态有效</td>
</tr>
</tbody></table>
<p><strong>注：</strong> 如果快捷键被系统中的其它应用占用，则可能会失效</p>
]]></content>
      <tags>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之crontab定时任务</title>
    <url>/p/how-to-use-crontab/</url>
    <content><![CDATA[<p>Linux中的crontab - - - -一个自定义定时器</p>
<a id="more"></a>

<h5 id="1-crontab命令"><a href="#1-crontab命令" class="headerlink" title="1.crontab命令"></a>1.crontab命令</h5><p>重新指定crobtab定时任务文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab $filepath</span><br></pre></td></tr></table></figure>

<p>查看crontab定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<p>编辑、安装定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p><strong>2.crontab时间举例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天早上6点 </span></span><br><span class="line">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每两个小时 </span></span><br><span class="line">0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 晚上11点到早上8点之间每两个小时和早上八点 </span></span><br><span class="line">0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </span></span><br><span class="line">0 11 4 * 1-3 command line</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1月1日早上4点 </span></span><br><span class="line">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时（第一分钟）执行/etc/cron.hourly内的脚本</span></span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天（凌晨4：02）执行/etc/cron.daily内的脚本</span></span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本</span></span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 </span></span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:  <span class="string">&quot;run-parts&quot;</span>这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span></span><br><span class="line">5，15，25，35，45，55 16，17，18 * * * command</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</span></span><br><span class="line">00 15 * *1，3，5 shutdown -r +5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </span></span><br><span class="line">10，40 * * * * innd/bbslink </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的1分执行用户目录下的bin/account这个指令： </span></span><br><span class="line">1 * * * * bin/account</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每1分钟执行以下命令</span></span><br><span class="line">*/1 * * * * bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： </span></span><br><span class="line">203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　</span><br></pre></td></tr></table></figure>

<h5 id="3-crontab任务举例"><a href="#3-crontab任务举例" class="headerlink" title="3.crontab任务举例"></a>3.crontab任务举例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /bin/bash /root/kaoyan/tiaoji.sh</span><br></pre></td></tr></table></figure>

<p>sh写法举例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">cd /root/kaoyan</span><br><span class="line">/root/***/python3 *.py &gt;&gt; /root/****/*.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有输出写入日志文件</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>NLTK简介</title>
    <url>/p/an-introduction-to-NLTK/</url>
    <content><![CDATA[<p>本文主要介绍了NLTK语言工具包。</p>
<p><strong>摘要：</strong>自然语言处理（NLP）是计算机科学领域与人工智能的一个重要方向。他研究实现人与计算机之间用自然语言进行有效的通信的各种领域和方法，涉及所有用计算机对自然语言处理进行的操作。以下例子是基于Python语言和一个名为NLTK的自然语言工具包的开源库实现的。</p>
<p><strong>关键词：</strong>自然语言处理，NLP，NLTK</p>
<a id="more"></a>

<p>NLTK创建于2001年，最初是宾夕法尼亚州立大学计算机与信息科学系计算语言学课程的一部分。从那以后，在数十名贡献者的帮助下不断发展壮大，如今，它已被数十所大学的课程所采纳，并作为许多项目研究的基础。</p>
<h3 id="第一章-语言处理与Python"><a href="#第一章-语言处理与Python" class="headerlink" title="第一章 语言处理与Python"></a>第一章 语言处理与Python</h3><p>提出问题：</p>
<ol>
<li>通过将技术性较为简单的程序与大规模文本结合起来，我们能实现什么？</li>
<li>如何自动的提取处关键字和词组，用来总结文本的风格和内容？</li>
<li>Python编程语言为上述工作提供了哪些工具和技术？</li>
<li>自然语言处理中有哪些有趣的挑战呢？</li>
</ol>
<h4 id="语言计算：文本和词汇"><a href="#语言计算：文本和词汇" class="headerlink" title="语言计算：文本和词汇"></a>语言计算：文本和词汇</h4><h5 id="安装nltk"><a href="#安装nltk" class="headerlink" title="安装nltk"></a>安装nltk</h5><p>使用pip进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure>

<p>输入以下命令来安装数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.download()</span><br></pre></td></tr></table></figure>

<p>或者直接点击以下链接进行下载：<a href="https://github.com/nltk/nltk_data/archive/gh-pages.zip">点击下载</a></p>
<p>这里使用第二种方法。</p>
<p>下载完毕以后得到如图所示的压缩文件</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917210303624.png" alt="image-20200917210303624"></p>
<p>解压并打开文件夹</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917210405366.png" alt="image-20200917210405366"></p>
<p>打开packages，复制路径，添加<code>NLTK_DATA</code>到环境变量</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917210518955.png" alt="image-20200917210518955"></p>
<p>测试是否安装成功</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917210938768.png" alt="image-20200917210938768"></p>
<p>输入以下命令加载一些我们需要的文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200917211222091.png" alt="image-20200917211222091"></p>
<p>无论什么时候想要找到这些文本，只需要在Python提示符后面输入它的名字即可</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917211343198.png" alt="image-20200917211343198"></p>
<h5 id="搜索文本"><a href="#搜索文本" class="headerlink" title="搜索文本"></a>搜索文本</h5><p>除了简单地阅读文本之外，还有很多方法可以用来查看文本内容。词语索引视图可以显示指定单词地出现情况，同时可以显示一些上下文。</p>
<p>使用以下方法搜索<code>text1</code>文本中的<code>monstrous</code>单词。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text1.concordance(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>搜索结果</p>
<p><img src="https://ftp.fly97.cn/image/image-20200917212148198.png" alt="image-20200917212148198"></p>
<p>小试牛刀：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text2.concordance(<span class="string">&#x27;lived&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200917212629370.png" alt="image-20200917212629370"></p>
<p>关键词索引可以让我们看到上下文中的词，例如，可以看到monstrous出现在文章中，如the __ pictures 和 the __ size，<strong>还有那些词出现在相似地上下文</strong>中？可以通过以下函数查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text1.similar(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200917220851114.png"></p>
<p>使用以下函数研究<strong>共用两个或者两个以上的词汇的上下文</strong>，如monstrous 和 very. 使用方括号和圆括号讲这些词括起来，中间用逗号分割。</p>
<p>【在<strong>text2</strong>找到用法、意义与该单词集合相似的词 】</p>
<p>【用来识别2个关键词相似的词语。】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text2.common_contexts([&quot;monstrous&quot;, &quot;very&quot;])</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200917223058920.png" alt="image-20200917223058920"></p>
]]></content>
      <tags>
        <tag>自然语言处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中torch.Tensor和torch.tensor的区别</title>
    <url>/p/the-difference-between-torch-Tensor-and-torch-tensor-in-PyTorch/</url>
    <content><![CDATA[<p>不说废话，直接上教程。</p>
<a id="more"></a>

<h4 id="torch-Tensor和torch-tensor有什么区别？"><a href="#torch-Tensor和torch-tensor有什么区别？" class="headerlink" title="torch.Tensor和torch.tensor有什么区别？"></a>torch.Tensor和torch.tensor有什么区别？</h4><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><p>​    在PyTorch 中，torch.Tensor是主要的tensor类，所有的tensor都是torch.Tensor的实例。torch.Tensor是torch.FloatTensor的别名。<br>而torch.tensor是一个函数，返回的是一个tensor，在PyTorch官方文档中，描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(data, dtype=<span class="literal">None</span>, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>) → Tensor</span><br><span class="line">Constructs a tensor <span class="keyword">with</span> data.</span><br></pre></td></tr></table></figure>

<h6 id="区别1"><a href="#区别1" class="headerlink" title="区别1"></a>区别1</h6><p><code>torch.Tensor(data)</code>是将输入的data转化<code>torch.FloatTensor</code></p>
<p><code>torch.tensor(data)</code>(当你未指定<code>dype</code>的类型时)是将data转化为<code>torch.FloatTensor、torch.LongTensor、torch.DoubleTensor</code>等类型，转化类型依据于<code>data</code>的类型或者<code>dtype</code>的值</p>
<h5 id="区别2"><a href="#区别2" class="headerlink" title="区别2"></a>区别2</h5><p>使用如下语句：<code>tensor_without_data = torch.Tensor()</code>可以创建一个空的<code>FloatTensor</code>，而当你使用<code>tensor_without_data = torch.tensor()</code>时候则会报错：</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-12</span>-ebc3ceaa76d2&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 torch.tensor()</span><br><span class="line"></span><br><span class="line">TypeError: tensor() missing <span class="number">1</span> required positional arguments: <span class="string">&quot;data&quot;</span></span><br></pre></td></tr></table></figure>

<p>当你想要创建一个空的<code>tensor</code>时候，可以使用如下的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor_without_data = torch.Tensor() <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.tensor(()) <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.empty([]) <span class="comment"># tensor(0.)</span></span><br></pre></td></tr></table></figure>


<p>所以<code>torch.Tensor</code>应该说是同时具有<code>torch.tensor</code>和<code>torch.empty</code>的功能，但是使用<code>torch.Tensor</code>可能会使你的代码出错，所以最好还是使用<code>torch.tensor</code>和<code>torch.empty</code>，而不是<code>torch.Tensor</code>。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的Tensor</title>
    <url>/p/Tensor-in-PyTorch/</url>
    <content><![CDATA[<p>通过以下几个例子来了解以下PyTorch中的Tensor。</p>
<a id="more"></a>

<p>Tensor 是 PyTorch 中重要的数据结构，可认为是一个高维数组。它可以是一个数字（标量）、一维数组（向量）、二维数组（矩阵）或更高维的数组。Tensor 和 numpy 的中的 ndrrays 类似，但是 Tensor 可以使用GPU加速。Tensor 的使用和 numpy 以及MATLAB的接口十分类似。下面通过几个实例来了解一下Tensor的基本使用方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensor <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 构建 5*3 矩阵，只是分配了空间，未初始化</span></span><br><span class="line">x = t.Tensor(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用[0, 1]均匀分布随机初始化二维数组</span></span><br><span class="line">x = t.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(x.size()) <span class="comment">#查看形状</span></span><br><span class="line">x.size()[<span class="number">0</span>], x.size(<span class="number">1</span>) <span class="comment">#查看列的个数，两种写法等价</span></span><br><span class="line"></span><br><span class="line">print(t.Size([<span class="number">5</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># (5L, 3)</span></span><br></pre></td></tr></table></figure>

<p>touch.Size 是tuple对象的子类，因此它支持 tuple 的所有操作，如 x.size()[0]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = t.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">print(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法2</span></span><br><span class="line">t.add(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法3</span></span><br><span class="line">result  = t.Tensor(<span class="number">5</span>, <span class="number">3</span>) <span class="comment"># 预先分配空间 </span></span><br><span class="line">t.add(x, y, out=result)  <span class="comment"># 输入到result</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;最初y&#x27;</span>)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;第一种加法, y的结果&#x27;</span>)</span><br><span class="line">y.add(x) <span class="comment"># 普通加法, 不改变y的内容</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;第二种加法, y的结果&#x27;</span>)</span><br><span class="line">y.add_(x) <span class="comment"># inplace加法, 执行完后y的值被更新</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>函数名后面带下划线的函数会修改 Tensor 本身。例如，<code>x.add(y)</code> 和 <code>x.t_()</code>会返回一个新的 Tensor，而<code>x</code>不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tensor的选取操作与numpy类似</span></span><br><span class="line">x[:, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>Tensor 还支持很多操作，包括<strong>数学运算、线性代数、选择、切片</strong>等，其接口涉及与 numpy 极为相似。</p>
<p>Tensor 和 numpy 的数组间的互操作非常容易且快速。Tensor不支持的操作，可以先转为 numpy 数组处理，之后再转回 Tensor .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = t.ones(<span class="number">5</span>) <span class="comment"># 新建一个全是1的Tensor</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = a.numpy() <span class="comment"># Tensor -&gt; Numpy</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = t.from_numpy(a) <span class="comment"># Numpy -&gt; Tensor</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<p>Tensor 和 Numpy 对象<strong>共享内存</strong>，所以他们之间的转换会很快，而且几乎不会消耗资源。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.add_(<span class="number">1</span>) <span class="comment"># 以_结尾的函数会修改自身</span></span><br><span class="line">print(a) </span><br><span class="line">print(b) <span class="comment"># Tensor和Numpy共享内存</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Tensor可通过<code>.cuda</code>方法转换为GPU的Tensor，从而享受GPU带来的加速运算.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在不支持CUDA的机器下，下一步不会运行</span></span><br><span class="line"><span class="keyword">if</span> t.cuda.is_available():</span><br><span class="line">	x = x.cuda()</span><br><span class="line">	y = y.cuda()</span><br><span class="line">	x + y</span><br></pre></td></tr></table></figure>

<p>此处可能会发现GPU的运算速度并未提升太多，这是因为 x 和y 太小且运算也比较简单，而且将数据从内存种转移到显存上还需要花费额外的开销。GPU的优势需要在大规模数据和复杂运算上才能体现出来。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的损失函数和优化器</title>
    <url>/p/loss-function-and-optimizer-in-PyTorch/</url>
    <content><![CDATA[<p>本文介绍了 PyTorch 的损失函数和优化器。</p>
<p><strong>关键字</strong>：PyTorch，损失函数，优化器</p>
<a id="more"></a>

<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>一般来说，PyTorch的损失函数有两种形式：函数形式和模块形式。前者调用的是torch.nn.funtional库中的函数，通过传入神经网络预测值和目标值来计算损失函数，后者是torch.nn库里的模块，通过新建一个模块的实例，然后通过调用模块的方法来计算最终的损失函数。</p>
<p>由于训练数据一般以<strong>迷你批次</strong>的形式输入神经网络，最后预测的只也是以迷你批次的形式输出的，而损失函数最后的输出结果应该是一个标量张量，因此，对于迷你批次的化简一般有两种方法，一般是对迷你批次的损失函数求和，第二种是对迷你批次的损失函数u求平均。一般来说，也是默认和最常见的情形，最后输出的损失函数是迷你批次损失函数的平均。</p>
<p>神经网络处理的预测问题主要分为<strong>回归问题和分类问题</strong>。对于回归问题，一般情况下使用的是<code>torch.nn.MSELoss</code>模块，即平方损失函数。通过创建这个模块的实例（一般使用默认参数，即在类的构造函数中不传入任何参数，这样会输出迷你批次的平均；如果要输出迷你批次的每个损失函数，可以指定参数<code>reduction=&#39;none&#39;</code>；如果要输出迷你批次的损失函数，可以指定参数<code>reduction=&#39;sum&#39;</code>.在实例中传入神经网络预测的值和目标值，能够计算得到最终的损失函数。具体的代码可以参考：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mse = t.nn.MSELoss()  <span class="comment">#初始化平方损失模块</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 随机生成张量t1</span></span><br><span class="line">t2 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 随机生成张量t2</span></span><br><span class="line">mse(t1, t2) <span class="comment"># 计算张量t1和t2之间的平方损失函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.9193, grad_fn=&lt;MeanBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">bse = t.nn.BCELoss() <span class="comment"># 初始化二分类交叉损失函数</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment">#随机生成张量t1</span></span><br><span class="line">t1s = t.sigmoid(t1) <span class="comment"># 对张量求sigmoid函数, 转换为(0, 1)之间的概率</span></span><br><span class="line">t2 = t.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">5</span>,)).float() <span class="comment">#随机生成0, 1整数序列, 并转换为浮点数</span></span><br><span class="line">bse(t1s, t2) <span class="comment">#计算二分类的交叉熵</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.8674, grad_fn=&lt;BinaryCrossEntropyBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">bce_logits = t.nn.BCEWithLogitsLoss() <span class="comment">#初始化交叉熵对数损失函数</span></span><br><span class="line">bce_logits(t1, t2) <span class="comment">#计算二分类的交叉熵 (和前面结果一样)</span></span><br><span class="line"><span class="comment"># 这是因为, BCEWithLogitsLoss会先让输入经过sigmoid函数, 变成概率分布的形式, 再计算二分类交叉熵.</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.8674, grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">10</span> <span class="comment"># 定义分类数目</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, N, requires_grad=<span class="literal">True</span>) <span class="comment">#随机产生预测张量</span></span><br><span class="line">t2 = t.randint(<span class="number">0</span>, N, (<span class="number">5</span>, ))            <span class="comment">#随机产生目标张量</span></span><br><span class="line">t1s = t.nn.functional.log_softmax(t1, <span class="number">-1</span>) <span class="comment"># 计算预测张量的LogSoftmax</span></span><br><span class="line">nll = t.nn.NLLLoss() <span class="comment">#定义NLL损失函数</span></span><br><span class="line">nll(t1s, t2) <span class="comment">#计算损失函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.3238, grad_fn=&lt;NllLossBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">ce = t.nn.CrossEntropyLoss() <span class="comment">#定义交叉熵损失函数</span></span><br><span class="line">ce(t1, t2) <span class="comment"># 和前面计算结果相同</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.3238, grad_fn=&lt;NllLossBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PyTorch</tag>
        <tag>计算图</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中__getattr__等的用法</title>
    <url>/p/usage-of-getattr-and-else-in-Python/</url>
    <content><![CDATA[<p>在使用Python的过程中可能遇到以下几个函数：</p>
<ul>
<li><code>getattr</code></li>
<li><code>__getattr__</code></li>
<li><code>__getattribute__</code></li>
<li><code>__get__</code></li>
</ul>
<p>如何区别他们，如何在编程中正确使用他们呢？</p>
<a id="more"></a>

<h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h3><p><code>getattr (object, name[, default])</code>是Python的内置函数之一，它的作用是获取对象的属性。</p>
<ul>
<li>object 对象</li>
<li>name 属性名</li>
<li>default 当属性不存在时，返回的默认值</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.x = x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Foo(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.x</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;bar&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="getattr-1"><a href="#getattr-1" class="headerlink" title="_ __getattr _ __"></a>_ __getattr _ __</h3><p><code>object. __getattr__(self, name)</code>是一个对象方法，如果找不到对象的属性时会调用这个方法。</p>
<p>这个方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>注意，如果通过正常机制能找到对象属性的话，不会调用<code>__getattr__</code>方法。</p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bamf</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.bamf = bamf</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&#x27;Frob does not have `&#123;&#125;` attribute.&#x27;</span>.format(str(name))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob(<span class="string">&quot;bamf&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bar</span><br><span class="line"><span class="string">&#x27;Frob does not have `bar` attribute.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line"><span class="string">&#x27;bamf&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="getattribute"><a href="#getattribute" class="headerlink" title="____  getattribute __ __"></a>____  getattribute __ __</h3><p>当访问 某个对象的属性时，会无条件的调用这个方法。这个方法只适用于新式类。<br> 新式类就是集成自object或者type的类。</p>
<p>如果类还同时定义了<code>__getattr__()</code>方法，则不会调用<code>__getattr__()</code>方法，除非在<code>__getattribute__()</code>方法中显示调用<code>__getattr__()</code>或者抛出了<code>AttributeError</code>。</p>
<p>该方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>为了避免在方法中出现无限递归的情况，应该总是使用基类的方法来获取属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>object.__getattribute__(self, name).</span><br></pre></td></tr></table></figure>

<p>语法：<code>object. __getattribute__(self, name)</code></p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span>(<span class="params">object</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">&quot;getting `&#123;&#125;`&quot;</span>.format(str(name))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> object.__getattribute__(self, name)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line">getting `bamf`</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="get"><a href="#get" class="headerlink" title="____ __ get __"></a>____ __ get __</h3><p><code>__get__()</code>方法是描述符方法之一。描述符用于将访问对象属性转变成调用描述符方法。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, obj, objtype</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;get value=%s&quot;</span> % self.val </span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, obj, val</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;set value=%s&quot;</span> % val</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">object</span>):</span></span><br><span class="line">    age = Descriptor()</span><br><span class="line"></span><br><span class="line">stu = Stu()</span><br><span class="line">stu.age = <span class="number">12</span>    <span class="comment"># set value=12</span></span><br><span class="line"><span class="keyword">print</span> stu.age   <span class="comment"># get value=12</span></span><br><span class="line">                <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中pickle模块的使用</title>
    <url>/p/use-of-pickle-module-in-python/</url>
    <content><![CDATA[<p>废话不多说，直接上代码。</p>
<a id="more"></a>

<h5 id="把变量写入文件"><a href="#把变量写入文件" class="headerlink" title="把变量写入文件"></a>把变量写入文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;I am a boy.&quot;</span></span><br><span class="line">file = open(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(data, file, [protocol])</span><br><span class="line"><span class="comment">#data----变量名称</span></span><br><span class="line"><span class="comment">#file----文件指针</span></span><br><span class="line"><span class="comment">#protocol----序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本</span></span><br></pre></td></tr></table></figure>

<h5 id="从文件中读取变量"><a href="#从文件中读取变量" class="headerlink" title="从文件中读取变量"></a>从文件中读取变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">data = pickle.load(file)</span><br></pre></td></tr></table></figure>



<h5 id="With-open函数打开文件的各种方式"><a href="#With-open函数打开文件的各种方式" class="headerlink" title="With open函数打开文件的各种方式"></a>With open函数打开文件的各种方式</h5><table>
<thead>
<tr>
<th><strong>type</strong></th>
<th>info</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中下划线命名模式</title>
    <url>/p/underscore-naming-pattern-in-python/</url>
    <content><![CDATA[<p>直接上表格。</p>
<table>
<thead>
<tr>
<th align="center">命名模式</th>
<th align="center">举例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单前导下划线</td>
<td align="center">_var</td>
<td>命名约定，仅供内部使用。通常不会由Python解释器内部执行（通配符导入除外），只作为对程序员的提示。通配符导入时，_var代表的<strong>属性</strong>或者<strong>函数</strong>不会被导入。</td>
</tr>
<tr>
<td align="center">单末尾下划线</td>
<td align="center">var_</td>
<td>按照约定使用避免与Python关键字的命名冲突。</td>
</tr>
<tr>
<td align="center">双前导下划线</td>
<td align="center">__var</td>
<td>当在类上下文使用时，触发名称修饰，由Python解释器强制执行。<br /><strong>Tips：</strong>可以理解为Python对象的<strong>私有属性</strong>。仅供<strong>Python内部成员函数</strong>使用。</td>
</tr>
<tr>
<td align="center">双前导和双末尾下划线</td>
<td align="center">__var__</td>
<td>表示Python语言定义的特殊方法，避免在你自己的属性中使用这种特殊方法。</td>
</tr>
<tr>
<td align="center">单下划线</td>
<td align="center">_</td>
<td>有时用作临时或者不关心的变量名称，也表示<strong>Python REPL</strong>最近的一个表达式的结果。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python升级pip</title>
    <url>/p/how-to-upgrade%20pip-in-python/</url>
    <content><![CDATA[<p>安装pip：<code>apt install python3-pip</code></p>
<p>升级pip：<code>python -m pip install --upgrade pip</code></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Python时间处理</title>
    <url>/p/time-processing-in-python/</url>
    <content><![CDATA[<p>本文主要介绍了Python时间处理的函数。</p>
<p><strong>摘要</strong>：有时需要在国外的服务器上处理北京时间等非本地时区的时间，经过查找，发现了<code>pytz</code>这个处理时区的包。<code>pytz</code>允许使用Python 2.4或更高版本进行准确的跨平台时区计算。</p>
<p><strong>关键词</strong>：时区计算，pytz</p>
<a id="more"></a>

<h4 id="获得北京时间"><a href="#获得北京时间" class="headerlink" title="获得北京时间"></a>获得北京时间</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc = pytz.utc</span><br><span class="line">utc_dt = utc.localize(datetime.utcfromtimestamp(time.time())) <span class="comment"># 获得UTC时间</span></span><br><span class="line"></span><br><span class="line">shanghai = timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>) 						<span class="comment"># 定义一个时区</span></span><br><span class="line">shanghai_dt = utc_dt.astimezone(shanghai)                     <span class="comment"># 将本地时区的时间转换成UTC时间</span></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&#x27;%Y-%m-%d %H:%M:%S %Z%z&#x27;</span>                                <span class="comment"># 定义打印时间</span></span><br><span class="line">print(shanghai_dt.strftime(fmt)                               <span class="comment"># 输出指定时区的时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过Python自带的包也可以方便的进行时区转换。这里使用的是datetime. </p>
<p>datetime 是Python处理日期和时间的标准库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="comment"># 拿到UTC时间，并强制设置时区为UTC+0:00:</span></span><br><span class="line">utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc) </span><br><span class="line">print(utc_dt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># astimezone()将转换时区为北京时间:</span></span><br><span class="line">bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line"> <span class="comment"># 定义打印时间的格式</span></span><br><span class="line">fmt = <span class="string">&#x27;%Y-%m-%d %H:%M:%S %Z%z&#x27;</span>   </span><br><span class="line">bj_dt.strftime(fmt)</span><br><span class="line">print(bj_dt)</span><br></pre></td></tr></table></figure>

<h4 id="打印当地时间"><a href="#打印当地时间" class="headerlink" title="打印当地时间"></a>打印当地时间</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br></pre></td></tr></table></figure>

<p>详细内容可以参考廖老师的这一篇文章</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017648783851616">https://www.liaoxuefeng.com/wiki/1016959663602400/1017648783851616</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的一些高级用法</title>
    <url>/p/Some-advanced-usages-of-Python/</url>
    <content><![CDATA[<p>此文介绍了一些Python的一些常见的高级用法。</p>
<a id="more"></a>

<h4 id="format格式化字符串"><a href="#format格式化字符串" class="headerlink" title="format格式化字符串"></a>format格式化字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br></pre></td></tr></table></figure>

<h5 id="按照位置来填充"><a href="#按照位置来填充" class="headerlink" title="按照位置来填充"></a>按照位置来填充</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918213811743.png" alt="image-20200918213811743"></p>
<h6 id="同一个参数可以填充多次"><a href="#同一个参数可以填充多次" class="headerlink" title="同一个参数可以填充多次"></a>同一个参数可以填充多次</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;0&#125;---&#123;0&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918214059634.png" alt="image-20200918214059634"></p>
<h5 id="通过索引来填充"><a href="#通过索引来填充" class="headerlink" title="通过索引来填充"></a>通过索引来填充</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;[0]&#125;&quot;</span>.format(s1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(l1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(t1))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918215314962.png" alt="image-20200918215314962"></p>
<p>另外一种写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;p[1]&#125;&quot;</span>.format(p=s1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=l1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=t1))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918215656093.png" alt="image-20200918215656093"></p>
<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>固定格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[on_true]  if  [expression]  else [on_false]</span><br></pre></td></tr></table></figure>

<p>上式表达的语义为：若<strong>表达式expression</strong>的结果为<strong>真</strong>，该式的结果是**[on_true]<strong>；若</strong>表达式expression<strong>的结果为</strong>假<strong>，则该式的结果是</strong>[on_false]**</p>
<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a-b <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> a+b</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918221607752.png" alt="image-20200918221607752"></p>
<h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p>Python使用Lambda表达式创建匿名函数</p>
<ul>
<li>Lambda只是一个表达式，函数体比def简单的多</li>
<li>Lambda的主体是一个表达式，而不是一个代码块，只能在lambda表达式中封装有限的逻辑进去</li>
<li>Lambda函数拥有自己的名字空间，且不能访问自有参数列表之外或全局名字空间里的参数。</li>
<li>虽然lamda函数看起来只能写一行，却不等于C或C++的内联函数，后者是调用小函数时不占用内存，从而提升运行效率。</li>
</ul>
<p>Lambda表达式语法：<code>lambda argument_list: expression</code></p>
<p>案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">summary = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(<span class="string">&quot;summary=&#123;&#125;&quot;</span>.format(summary(<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918230330027.png" alt="image-20200918230330027"></p>
<p>上述lambda表达式与以下函数等价</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summary</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918231354891.png" alt="image-20200918231354891"></p>
<h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><p>map是Python的高级函数，为函数式编程提供便利。</p>
<p>形式为<code>map(func, *iterables)</code>：第一个参数func是一个函数的名字；第二个参数为一个可迭代对象。map将函数func应用于列表的所有元素。</p>
<p>在Python3之前，map用于返回一个列表，其中结果列表的每个元素都是应用于列表或元组序列相应元素上的func结果。</p>
<p>在Python3中，map返回一个迭代器。</p>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seq_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">F = list(map(<span class="keyword">lambda</span> x:x*x, seq_list))</span><br><span class="line">print(F)</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200918233144997.png" alt="image-20200918233144997"></p>
<p>map可以用于多个列表，列表不必有相同的长度。map会将<code>lambda函数</code>应用于参数列表的元素，即它首先应用于具有第0个索引的元素，然后应用于具有第一个索引的元素，直到第n个索引。</p>
<p>如果一个列表的元素少于其他元素，当最短列表消耗完时，map结束迭代。</p>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">c = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用到多个列表</span></span><br><span class="line">ab = list(map(<span class="keyword">lambda</span> x,y:x + y, a, b))</span><br><span class="line">print(ab)</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200920142041359.png" alt="image-20200920142041359"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若其中一个列表的元素少于其他元素, 当最短列表消耗完时, map停止迭代</span></span><br><span class="line">ac = list(map(<span class="keyword">lambda</span> x,y:x + y, a, c))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200920142144318.png" alt="image-20200920142144318"></p>
<h4 id="Filter函数"><a href="#Filter函数" class="headerlink" title="Filter函数"></a>Filter函数</h4><p>filter也是Python的高级函数，为函数式编程提供便利。其作用是对序列中元素进行筛选，最终获得符合条件的序列。其一般形式为**filter(function, iterable)**，函数提供了一种优雅的方式来过滤掉序列中那个的所有元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 找到序列中的偶数</span></span><br><span class="line">double_number = list(filter(<span class="keyword">lambda</span> x:x % <span class="number">2</span> ==<span class="number">0</span>, number))</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200920144322294.png" alt="image-20200920144322294"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python科学计算库Numpy</title>
    <url>/p/an-introduction-to-numpy/</url>
    <content><![CDATA[<p><strong>摘要：</strong>Numpy是一个开源的Python科学计算库，它是Python科学计算库的基础库，许多其他著名的科学计算库如Pandas、Scikit-learn等，都要用的Numpy库的一些功能。</p>
<p><strong>关键词：</strong>科学计算，Numpy</p>
<a id="more"></a>

<p>Numpy是Python快速处理大型矩阵的科学计算库，Numpy允许你在Python中做向量矩阵的运算，而且很多底层的函数都是用C语言写的，将获得在普通Python中无法达到的运算速度。</p>
<p>什么是科学计算？科学计算是一个与定量分析、数学模型构建以及利用计算机分析和解决科学问题相关的相关领域。<br><strong>查看Numpy版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy</span><br><span class="line"></span><br><span class="line">print(numpy.__version__)</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920154143301.png" alt="image-20200920154143301"></p>
<h3 id="初识Numpy"><a href="#初识Numpy" class="headerlink" title="初识Numpy"></a>初识Numpy</h3><p><strong>Numpy</strong>的主要对象是同质多维数组，也就是在一个元素(通常是数字)表中，元素的类型都是相同的，其中可以通过正整数的元组来对元素进行索引。</p>
<p>在Numpy中，数组的维度被称为轴(axes)，轴的数量被称为秩(rank)。例如在三维空间中一个点的坐标【1，2，1】就是秩为1的数组，因为它只有一个轴，这个轴的长度为3。</p>
<p><strong>Numpy</strong>的数组类称为<strong>ndarray</strong>，别名为array。<strong>numpy.array</strong>与标准Python库类<strong>array.array</strong>不同。标准库类中只能处理一维数组而且功能相对较少。下面我们来认识下<strong>ndarray</strong>对象的常见属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>转置，与self.transpose()相同，如果维度小于2，返回self</td>
</tr>
<tr>
<td>size</td>
<td>数组中元素个数，等于shape元素的乘积</td>
</tr>
<tr>
<td>itemsize</td>
<td>一个类型为float64的元素的数组itemsize为8=(64/8)，而一个complex32的数组itersize为4=(32/8). 该属性等价于ndarray.dtype.itemsize</td>
</tr>
<tr>
<td>dtype</td>
<td>数组元素的数据类型对象。可以用标准Python类型来创建或指定dtype，或者在后面加上Numpy的类型：numpy.int32，numpy.int16，numpy.float64等等</td>
</tr>
<tr>
<td>ndim</td>
<td>数组的轴（维度）的数量。在Python中，维度的数量通常被称为rank</td>
</tr>
<tr>
<td>shape</td>
<td>数组的维度，为一个整数元组。表示每个维度上的大小。对于一个m行n列的矩阵来说，shape就是(n, m)</td>
</tr>
<tr>
<td>data</td>
<td>该缓冲区中包含了数组的实际元素，通常情况下不需要使用这个属性因为我们会使用<strong>索引</strong>的方式来访问数组中的元素。</td>
</tr>
<tr>
<td>Flat</td>
<td>返回数组的一维迭代器</td>
</tr>
<tr>
<td>imag</td>
<td>返回数组的虚部</td>
</tr>
<tr>
<td>real</td>
<td>返回数组的实部</td>
</tr>
<tr>
<td>nbytes</td>
<td>数组中所有元素的字节长度</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">4</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164603559.png" alt="image-20200920164603559"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164658559.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920165038789.png" alt="image-20200920165038789"></p>
<p>以上说明，通过np.random.random(4)生成的一个浮点数组，类型为numpy.ndarray，a.shape显示的<strong>长度</strong>为4。</p>
<p>【这里的数组可以理解为一维数组】</p>
<h3 id="Numpy数据类型"><a href="#Numpy数据类型" class="headerlink" title="Numpy数据类型"></a>Numpy数据类型</h3><p>对于科学计算来说，Python自带的整型，浮点数和复数类型还远远不够。因此Numpy添加了许多数据类型， 在实际应用中，我们需要不同精度的数据类型，它们占用的内存空间也是不同的，在numpy中，大部分数据类型是以数字结尾的，这个数字表示其在内存中占用的位数。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述规则</th>
</tr>
</thead>
<tbody><tr>
<td>bool</td>
<td>用一位存储的bool类型</td>
</tr>
<tr>
<td>inti</td>
<td>由所在平台决定其精度的整数（一般为int32或者int64）</td>
</tr>
<tr>
<td>int8</td>
<td>整数，范围为-128至127</td>
</tr>
<tr>
<td>int16</td>
<td>整数，范围为-32768至32767</td>
</tr>
<tr>
<td>int32</td>
<td>整数，范围为-2^31至2^31-1</td>
</tr>
<tr>
<td>int64</td>
<td>整数，范围为-2^63至2^63</td>
</tr>
<tr>
<td>uint8</td>
<td>无符号整数，范围为0至255</td>
</tr>
<tr>
<td>uint16</td>
<td>无符号整数，范围为0至65535</td>
</tr>
<tr>
<td>uint32</td>
<td>无符号整数，范围为0至2^32-1</td>
</tr>
<tr>
<td>uint64</td>
<td>无符号整数，范围为0至2^64</td>
</tr>
<tr>
<td>float16</td>
<td>半精度浮点数(16位)，其中一位表示正负号，5位表示指数，10位表示尾数</td>
</tr>
<tr>
<td>float32</td>
<td>单精度浮点数(32位)，其中一位表示正负号，8位表示指数，23位表示尾数</td>
</tr>
<tr>
<td>float64或float</td>
<td>双精度浮点数(64位)，其中一位表示正负号，11位表示指数，52位表示位数</td>
</tr>
<tr>
<td>complex64</td>
<td>复数，分别用两个32位浮点数表示实部和虚部</td>
</tr>
<tr>
<td>complex128或complex</td>
<td>复数，分别用两个64位浮点数表示实部和虚部</td>
</tr>
</tbody></table>
<p>在使用numpy过程中，可以通过dtype来指定数据类型，通常这个参数是可选的。也可以通过astype()来指定。同样，每一种数据类型均有对应的类型转换函数。在Python中，通常不要求内存控制指定。</p>
<p><strong>Numpy数据类型操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定数据类型</span></span><br><span class="line">print(np.array(<span class="number">5</span>, dtype = int))</span><br><span class="line"></span><br><span class="line">print(np.array(<span class="number">5</span>).astype(float))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line">print(float(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(bool(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(float(<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182149479.png" alt="image-20200920182149479"></p>
<p><strong>查看Numpy数据类型</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(set(np.typeDict.values()))</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182353862.png" alt="image-20200920182353862"></p>
<h3 id="Numpy创建数组"><a href="#Numpy创建数组" class="headerlink" title="Numpy创建数组"></a>Numpy创建数组</h3><h4 id="通过列表或者元组转化"><a href="#通过列表或者元组转化" class="headerlink" title="通过列表或者元组转化"></a>通过列表或者元组转化</h4><p>在Python内建对象中，数组有三种形式：列表（list）、元组（tuple）、字典（dict）。具体形式如下：</p>
<ul>
<li>list: [1, 2, 3]</li>
<li>tuple: (1, 2, 3)</li>
<li>dict: {a:1, b:2}</li>
</ul>
<p>使用np.array将<strong>列表或元组</strong>转换成narray数组。其方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(object, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, </span><br><span class="line">         order=<span class="string">&#x27;K&#x27;</span>, subook= <span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>相关参数如下：</p>
<ul>
<li>object：输入对象列表、元组等。</li>
<li>dtype：数据类型。如果没有给出，则类型被保存为所需对象的最小类型。</li>
<li>copy：布尔类型，默认为<strong>True</strong>，表示复制对象。</li>
<li>order：顺序。</li>
<li>subok：布尔类型，表示子类是否被传递。</li>
</ul>
<p><strong>使用np.array创建数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;, type of a:&#123;&#125;&quot;</span>.format(a, type(a)))</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920184454753.png" alt="image-20200920184454753"></p>
<h4 id="arange函数创建数组"><a href="#arange函数创建数组" class="headerlink" title="arange函数创建数组"></a>arange函数创建数组</h4><p>np.arange()的功能是在给定区间内创建<strong>等差数组</strong>。arange类似range函数，接触过Python的人或许对range函数比较熟悉。例如在for循环中，经常用到range。下面通过range来学习arange，主要区别是<strong>返回值类型不同</strong>。</p>
<p>range返回的是list，np.arange返回的是narray数组。</p>
<ol>
<li>range函数为 range(start, stop[, step])，根据start和stop指定的范围以及step设定的步长，生成一个序列，函数返回的是一个range object。这里的[start, stop]是一个<strong>前闭后开</strong>区间。</li>
</ol>
<ul>
<li>start：计数从start开始，默认是从0开始，例如range(5)等价于range(0, 5)</li>
<li>stop：计数从stop结束，但不包括stop，例如range(0, 5)=[0, 1, 2, 3, 4]</li>
<li>step：每次跳跃的间距，默认为1且<strong>不支持步长为小数</strong>，例如range(0, 5)等价于range(0, 5, 1)</li>
</ul>
<p>案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = range(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">b = range(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">a1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">b1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> b]</span><br><span class="line">print(<span class="string">&quot;type of a:&#123;0&#125;, a:&#123;1&#125;, b:&#123;2&#125;,  a1:&#123;3&#125;, b1:&#123;4&#125;&quot;</span>.format(type(a), a, b, a1, b1))</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920190839464.png" alt="image-20200920190839464"></p>
<ol start="2">
<li>arange函数为arange(start=None, stop=None, step=None, dtype=None), 根据<strong>start</strong>与<strong>stop</strong>指定的范围以及<strong>step</strong>设定的步长，生成一个<strong>ndarry</strong></li>
</ol>
<ul>
<li>start与stop参数同range。</li>
<li>step：步长用于设置值之间的间隔，支持<strong>步长为小数</strong>。</li>
<li>dtype：可选参数，可以设置返回ndarray的值类型。</li>
</ul>
<p><strong>arange案例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">a2 = np.arange(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;,a2:&#123;&#125;&quot;</span>.format(a,a2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920191959047.png" alt="image-20200920191959047"></p>
<h4 id="linspace生成等差数列"><a href="#linspace生成等差数列" class="headerlink" title="linspace生成等差数列"></a>linspace生成等差数列</h4><p>np.linspace方法也可以像np.arange方法一样，创建数值有规律的数组。linespace用于在指定区域返回间隔均匀的值，其方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linespace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, restep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>start：序列的起始值。</li>
<li>stop：序列的结束值。</li>
<li>num：生成的样本数，默认为50。</li>
<li>endpoint：布尔值，若为True，则最后一个样本包含在序列内。</li>
<li>restep：布尔值，若为True，返回间距。</li>
<li>dtype：数组的类型。</li>
</ul>
]]></content>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS系统学习小记(一)</title>
    <url>/p/ROS-system-learning-notes-01/</url>
    <content><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p>
<p><strong>关键词：</strong>ROS</p>
<a id="more"></a>

<h3 id="ROS架构及概念"><a href="#ROS架构及概念" class="headerlink" title="ROS架构及概念"></a>ROS架构及概念</h3><p>ROS的架构经过设计并划分为三部分，每一部分都代表一个层级的概念：</p>
<ul>
<li>文件系统级（Filesystem level)</li>
<li>计算图级(Computation Graph level)</li>
<li>社区级(Community level)</li>
</ul>
<p>第一级是文件系统级。在这一级，我们会使用一组概念来解释ROS的内部构成、文件夹结构，以及工作所需要的核心文件。</p>
<p>第二级是计算图级，体现的是进程和系统之间的通信。在相关小节中，我们将学习ROS的各个概念和功能，包括建立系统、处理各类进程、与多台机器通信等。</p>
<p>第三级是社区级，我们将解释一系列的工具和概念，包括在开发人员之间如何共享知识、算法和代码。由于强大社区的支持，不仅提高了初学者理解复杂软件的能力，还解决了最常见的问题。</p>
<h4 id="理解ROS文件系统级"><a href="#理解ROS文件系统级" class="headerlink" title="理解ROS文件系统级"></a>理解ROS文件系统级</h4><p><img src="https://ftp.fly97.cn/image/image-20200923190637341.png" alt="image-20200923190637341"></p>
<p>与其他操作系统类似，一个ROS程序的不同组件要放在不同的文件夹下，这些文件夹是根据功能的不同来对文件进行组织的。</p>
<ol>
<li>功能包（Package）：功能包构成ROS中的原子级。一个功能包具有创建ROS程序最小结构和最少内容。它可以包含ROS运行时进程（节点）、配置文件等。</li>
<li>功能包清单（Package Manifest）：功能包清单提供关于功能包、许可证、依赖关系、编译标志等的信息。包清单又一个名为<strong>package.xml</strong>的文件管理。</li>
<li>元功能包（Metapackage）：如果你希望将几个具有<strong>某些功能的包组织在一起</strong>，那么你将使用一个元功能包。这种包的组织形式<strong>之前被称</strong>为功能包集（Stack ）。功能包集被废除，现在使用元功能包实现这个功能。在ROS中，存在大量不同用途的元功能包，例如<strong>导航功能包集</strong>。</li>
<li>元功能包清单（Metapackage manifest）：元功能包清单（package.xml）类似普通功能包但又一个XML格式的导出标记，他在结构上也有一定的限制。</li>
<li>消息类型（Message（msg）type）：消息是一个进程发送到其他进程的消息。ROS 的消息类型的说明存储在<strong>my_package/msg/MyMessageType.msg</strong>中。</li>
<li>服务类型（Service (srv) Type）：服务描述说明存储在<strong>my_package/srv/MyServiceType.srv</strong>中，为ROS中由每个进程提供的服务定义请求和响应数据结构。</li>
</ol>
<p>下面的截图说明了<strong>turtlesim</strong>功能包的内容。所看到的是一系列文件和文件夹，包含代码、图片、启动文件服务和消息。以下只是文件的一个简短列表。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200923193232140.png" alt="image-20200923193232140"></p>
<h5 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h5><p>工作空间包含功能包，功能包包含源文件和环境和工作空间，是集中开发的一种好方式。</p>
<p>下图所示是一个典型的工作空间。<img src="https://ftp.fly97.cn/image/image-20200924144159317.png" alt="image-20200924144159317"></p>
<p>主要包含一下内容：</p>
<ul>
<li>源文件空间（Source space）：在源空间（src文件夹）中，放置了功能包、项目、复制的包等。<strong>最重要文件：CMakeLists.txt</strong>。当在工作空间配置包时，通过cmake调用CMakeLists.txt。这个文件是通过<strong>catkin_init_workspace</strong>命令创建的。</li>
<li>编译空间（build space）：在build文件夹里，cmake和catkin为功能包和项目保存缓存信息、配置和其他中间文件。</li>
<li>开发空间（Development （devel）space）：devel文件夹用来保存编译后的程序，这些是无需安装就能用来测试的程序。</li>
</ul>
<p>用catkin编译包有两个选项。第一个是使用标准CMake工作流程。通过使用此方式。可以一次编译一个包，见以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cmake packageToBuild/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>如果想编译所有的包，可以用<strong>catkin_make</strong>命令行，见以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<p>在ROS配置的编译空间目录中，这两个命令编译出可执行文件。</p>
<p>ROS支持覆盖（overlay）。当你正在使用ROS功能包例如（<strong>Turtlesim</strong>）时，可以使用安装版本，也可以下载源文件并编译它来使用你修改后的版本。</p>
<p>ROS允许使用自己版本的功能包去替代安装版本。下一章我们将使用这个功能来创建自己的插件。</p>
<h5 id="功能包"><a href="#功能包" class="headerlink" title="功能包"></a>功能包</h5><p>包指的是一种特定结构的文件和文件夹组合。</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>include/package_name</td>
<td>此目录包含了需要的库的头文件</td>
</tr>
<tr>
<td>msg/</td>
<td>如果开发需要<strong>非标准</strong>的消息，请把文件放在这里。</td>
</tr>
<tr>
<td>script/</td>
<td>其中包含Bash、Python或者任何其他脚本语言的可执行脚本。</td>
</tr>
<tr>
<td>src/</td>
<td>存储程序源文件。可以为节点创建一个文件夹或按照希望的方式组织它。</td>
</tr>
<tr>
<td>srv/</td>
<td>（srv）服务类型</td>
</tr>
<tr>
<td>CMakeLists.txt</td>
<td>CMake的生成文件</td>
</tr>
<tr>
<td>package.xml</td>
<td>功能包清单文件</td>
</tr>
</tbody></table>
<p>ROS提供的工具（命令）</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>rospack</td>
<td>使用此命令来获取信息或在系统中查找包</td>
</tr>
<tr>
<td>catkin_create_pkg</td>
<td>使用此命令创建一个新的功能包</td>
</tr>
<tr>
<td>catin_make</td>
<td>使用此命令来编译工作空间</td>
</tr>
<tr>
<td>rosdep</td>
<td>使用此命令按照功能包的系统依赖项</td>
</tr>
<tr>
<td>rqt_dep</td>
<td>使用此命令来查看包的依赖关系图</td>
</tr>
</tbody></table>
<p>如果要在文件夹和功能包之间移动文件，ROS提供了非常有用的<strong>rosbash</strong>，功能包，其中包含的非常类似Linux命令的命令。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>roscd</td>
<td>此命令用于更改目录，相当于Linux中的cd命令</td>
</tr>
<tr>
<td>rosed</td>
<td>此命令用来编辑文件</td>
</tr>
<tr>
<td>roscp</td>
<td>此命令用于从功能包复制文件。</td>
</tr>
<tr>
<td>rosls</td>
<td>此命令列出功能包下的文件，类似Linux中的ls命令。</td>
</tr>
</tbody></table>
<p>文件<strong>package.xml</strong>必须在每个功能包中，它用来说明此包相关的各类信息。如果你发现在某个文件夹内包含此文件，那么这个文件夹很可能是<strong>一个包或者元功能包</strong>。</p>
<p>打开<strong>package.xml</strong>文件，可以看到包的名称、依赖关系等信息。功能包清单的作用就是为了方便安装和分发这些功能包。</p>
<p>在<strong>package.xml</strong>文件中使用的两个典型标记是**<build_depend><strong>和</strong><run_depend>**.</p>
<p>**<build_depend>**标记会显示当前功能包安装之前必须先安装哪些功能包。这是因为新的功能包会使用其他包的一些功能。</p>
<p>**<run_depend>**标记显示运行功能包中代码所需要的包。以下是package.xml文件的示例。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200924154802735.png" alt="image-20200924154802735"></p>
<h5 id="元功能包"><a href="#元功能包" class="headerlink" title="元功能包"></a>元功能包</h5><p>元包中只有一个文件，这个文件就是<strong>package.xml</strong>。它不包含其他文件，如代码等。</p>
<p>元功能包用于指代其他按照类似功能特性分组的包，例如导航功能包集，ros_tutorials等。</p>
<p>使用迁移的特定规则，可以讲ROS Fuerte中的功能包和功能包集转换为Kinetic等。具体参见<a href="http://wiki.ros.org/catkin/migrating_from_rosbuild%E3%80%82">http://wiki.ros.org/catkin/migrating_from_rosbuild。</a></p>
<p>在下图中。可以看到在ros_tutorials元功能包中package.xml的内容。可以看到<br>&lt;export&gt;标记和&lt;run_depend&gt;标记。这些事功能包清单中必不可缺少的，在下图中也可以看到这些标记。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200924160401768.png" alt="image-20200924160401768"></p>
<p>如果你想定位<strong>ros_tutorials</strong>元功能包，可以使用下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rosstack find ros_tutorials</span><br></pre></td></tr></table></figure>

<p>显示路径为：</p>
<p><img src="https://ftp.fly97.cn/image/image-20200924161034651.png" alt="image-20200924161034651"></p>
<p>查看里面的代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /opt/ros/kinetic/share/ros_tutorials/package.xml</span><br></pre></td></tr></table></figure>

<p>注意：Kinetic使用元功能包，不是功能包集，但是<strong>rosstack find</strong> 命令也可以用于查找元功能包。</p>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS系统学习小记(二)</title>
    <url>/p/ROS-system-learning-notes-02/</url>
    <content><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p>
<p><strong>关键词：</strong>ROS</p>
<a id="more"></a>

<h3 id="ROS试用练习"><a href="#ROS试用练习" class="headerlink" title="ROS试用练习"></a>ROS试用练习</h3><h4 id="ROS文件系统"><a href="#ROS文件系统" class="headerlink" title="ROS文件系统"></a>ROS文件系统</h4><p>我们通过命令行工具来浏览ROS的文件系统。</p>
<p>为了获得功能包和功能包集的信息,比如,其路径、依赖关系等，我们将使用<strong>rospack</strong>、<strong>rosstack</strong>命令进入功能包和功能包集，并列出其中<br>的内容。</p>
<p>例如，如果你想要找<strong>turtlesim</strong>包的路径，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rospack find turtlesim </span><br></pre></td></tr></table></figure>

<p>你将要获得以下信息：</p>
<p><img src="/home/wsl/.config/Typora/typora-user-images/image-20201019194410801.png" alt="image-20201019194410801"></p>
<p>如果你想要找到已经在系统安装过的某个<strong>元功能包</strong>，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rospack find ros_comm</span><br></pre></td></tr></table></figure>

<p>你将获得ros-comm元功能包的路径：<img src="/home/wsl/.config/Typora/typora-user-images/image-20201019194825060.png" alt="image-20201019194825060"></p>
<p><em>注意：功能包是rospack ，元功能包是rosstack，要注意区分。</em></p>
<p>要获得功能包或者功能包集下面的文件列表，需要使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosls turtlesim</span><br></pre></td></tr></table></figure>

<p><img src="/home/wsl/.config/Typora/typora-user-images/image-20201019195209283.png" alt="image-20201019195209283"></p>
<p>更改当前目录，尤其是进入某个文件夹，可以使用roscd命令完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscd turtlesim</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<p>将获得以下新路径：</p>
<p><img src="/home/wsl/.config/Typora/typora-user-images/image-20201019195406492.png" alt="image-20201019195406492"></p>
<h4 id="创建工作空间"><a href="#创建工作空间" class="headerlink" title="创建工作空间"></a>创建工作空间</h4><p>我们会在工作空间完成本书使用的所有代码。</p>
<p>要查看ROS正在使用的工作空间，请使用下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure>

<p>会看到如下类似信息：<img src="/home/wsl/.config/Typora/typora-user-images/image-20201019195658744.png" alt="image-20201019195658744"></p>
<p>我们将要创建的文件夹位于<code>/root/dev/catkin_ws/src</code>中。要新建文件夹，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/dev/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>

<p>当创建工作空间文件夹后，里面并没有功能包，只有CMakeList.txt文件。使用下面的命令来<strong>编译工作空间</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<p>你将看到类似信息：<img src="/home/wsl/.config/Typora/typora-user-images/image-20201019200504031.png" alt="image-20201019200504031"></p>
<p>现在输入<code>ls</code>命令，可以看到创建的新文件夹，分别是build和devel文件夹。</p>
<p>输入以下命令，再次初始化ros环境，至此，工作空间创建完毕。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure>

<p>这一步只重新加载了setup.bash文件，如果关闭并打开一个新的命令行窗口，也将得到同样的效果。</p>
<p>输入以下命令，将ROS的初始化脚本加入到bash的配置文件中，这样，每次打开一个新的bash shell窗口时，就自动完成了ROS的初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="创建ROS功能包和元功能包"><a href="#创建ROS功能包和元功能包" class="headerlink" title="创建ROS功能包和元功能包"></a>创建ROS功能包和元功能包</h4><p>使用以下命令在之前建立的工作空间中创建新的功能包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_create_pkg TEST std_msgs roscpp</span><br></pre></td></tr></table></figure>

<p>此命令的格式包括包的名称和依赖项。在这个示例中，依赖项包括 <strong>std_msgs</strong> 和 <strong>roscpp</strong>. </p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg name [dependencies [dependencies ...]]</span><br><span class="line">positional arguments:</span><br><span class="line">  name                  The name for the package</span><br><span class="line">  dependencies          Catkin package Dependencies</span><br></pre></td></tr></table></figure>

<p>这些依赖项主要包括以下几个：</p>
<ul>
<li>std_msgs：包含了常见的消息类型，表示基本数据类型和其他基本的消息构造，如多维数组。</li>
<li>roscpp：使用C++实现了ROS的各种功能。它提供了一个客户端库，让C++程序员能够调用这些接口快速完成与ROS的主题、服务和参数相关的开发工作。</li>
</ul>
<p>如果所有步骤一切顺利，结果如下图所示：</p>
<p><img src="/home/wsl/.config/Typora/typora-user-images/image-20201019202650647.png" alt="image-20201019202650647"></p>
<p>正如我们看到的，可以使用rospack、roscd和rosls命令来获取新的功能包信息。下面是可以执行的一些操作。</p>
<ul>
<li>rospack profile：此命令用于通知用户ROS中新添加的内容。在安装任何功能包之后使用它。</li>
<li>rospack find TEST：此命令用于查看依赖关系。</li>
<li>rosls TEST：此命令用于查看内容</li>
<li>roscd TEST：此命令会切换到TEST功能包所在的路径。</li>
</ul>
<h4 id="编译ROS功能包"><a href="#编译ROS功能包" class="headerlink" title="编译ROS功能包"></a>编译ROS功能包</h4><p>编译功能包的的时候，主要是代码的编译过程，不仅包括用户添加的代码，还包括由消息和服务生成的代码。</p>
<p>为了编译功能包，可以使用<code>catin_make</code>工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<p>如果没有看到错误提示信息，说明功能包编译成功。</p>
<p>必须在<code>workspace</code>文件夹中运行catkin_make命令。如果在其他文件这样做，命令将无法执行！</p>
<p>当你在TEST文件夹中试图使用catkin_make编译工具包时，你会看到如下错误：</p>
<p><img src="/home/wsl/.config/Typora/typora-user-images/image-20201019204443411.png" alt="image-20201019204443411"></p>
<p>当你在<code>catkin_ws</code>文件夹中执行catkin_make命令时，则会编译成功。</p>
<p>如果编译单个工具包，可以使用如下格式的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make --pkg &lt;package name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用ROS节点"><a href="#使用ROS节点" class="headerlink" title="使用ROS节点"></a>使用ROS节点</h4>]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04更换镜像源</title>
    <url>/p/How-to-change-the-mirror-source-on-Ubuntu-1804/</url>
    <content><![CDATA[<h4 id="Ubuntu18-04更换镜像源"><a href="#Ubuntu18-04更换镜像源" class="headerlink" title="Ubuntu18.04更换镜像源"></a>Ubuntu18.04更换镜像源</h4><h5 id="1-备份原有镜像源"><a href="#1-备份原有镜像源" class="headerlink" title="1.备份原有镜像源"></a>1.备份原有镜像源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sourses.list.bak</span><br></pre></td></tr></table></figure>

<h5 id="2-修改-etc-apt-sources-list文件"><a href="#2-修改-etc-apt-sources-list文件" class="headerlink" title="2.修改/etc/apt/sources.list文件"></a>2.修改/etc/apt/sources.list文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#香港中文科技大学源</span></span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe </span><br></pre></td></tr></table></figure>

<h5 id="3-其他相关命令"><a href="#3-其他相关命令" class="headerlink" title="3.其他相关命令"></a>3.其他相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Ubuntu18.04</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装nodejs并更改npm镜像源</title>
    <url>/p/How-to-install-nodejs-and-change-npm-mirror-source-on-Ubuntu/</url>
    <content><![CDATA[<h4 id="Ubuntu安装nodejs并更改npm镜像源"><a href="#Ubuntu安装nodejs并更改npm镜像源" class="headerlink" title="Ubuntu安装nodejs并更改npm镜像源"></a>Ubuntu安装nodejs并更改npm镜像源</h4><p>由于众所周知的原因，在国内使用原有的源安装<code>nodejs</code>速度非常缓慢，故可以采用清华大学的源</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo bash</span><br></pre></td></tr></table></figure>

<h5 id="编辑-etc-apt-sources-list-d-nodesource-list"><a href="#编辑-etc-apt-sources-list-d-nodesource-list" class="headerlink" title="编辑 /etc/apt/sources.list.d/nodesource.list"></a>编辑 /etc/apt/sources.list.d/nodesource.list</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://deb.nodesource.com/node_12.x xenial main</span><br><span class="line">deb-src https://deb.nodesource.com/node_12.x xenial main</span><br></pre></td></tr></table></figure>

<h5 id="更改为："><a href="#更改为：" class="headerlink" title="更改为："></a>更改为：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br></pre></td></tr></table></figure>

<h5 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get clean</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nodejs</span><br></pre></td></tr></table></figure>

<h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h5 id="更换npm源"><a href="#更换npm源" class="headerlink" title="更换npm源"></a>更换npm源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h5 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h5 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装php指南</title>
    <url>/p/How-to-install-php-on-Ubuntu/</url>
    <content><![CDATA[<h4 id="Ubuntu安装php指南"><a href="#Ubuntu安装php指南" class="headerlink" title="Ubuntu安装php指南"></a>Ubuntu安装php指南</h4><p>由于自带的apt源中不包含php，所以在安装php之前需要给apt添加第三方源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line"><span class="comment">#sudo add-apt-repository -r ppa:ondrej/php              #删除</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y php7.3</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu服务管理</title>
    <url>/p/How-to-manage-services-on-ubuntu/</url>
    <content><![CDATA[<p>Linux 服务管理两种方式service和systemctl的用法</p>
<a id="more"></a>

<h4 id="service命令"><a href="#service命令" class="headerlink" title="service命令"></a>service命令</h4><p>service命令其实是去/etc/init.d目录下，去执行相关程序。</p>
<p>其中脚本需要我们自己编写。</p>
<h5 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h5><ol>
<li>进入 <code>/etc/init.d</code></li>
<li>简历一个脚本文件，并赋予755权限：<code>chmod 755 文件名</code></li>
</ol>
<p>以kms服务脚本为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          kms-service</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Start kms at boot time</span></span><br><span class="line"><span class="comment"># Description:       Start or stop the KMS-service</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="string">&quot;KMS&quot;</span></span><br><span class="line">NAME_BIN=<span class="string">&quot;kms&quot;</span></span><br><span class="line">FILE=<span class="string">&quot;/home/ubuntu&quot;</span></span><br><span class="line">BIN=<span class="string">&quot;<span class="variable">$&#123;FILE&#125;</span>/kms&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Green_font_prefix=<span class="string">&quot;\033[32m&quot;</span> &amp;&amp; Red_font_prefix=<span class="string">&quot;\033[31m&quot;</span> &amp;&amp; Green_background_prefix=<span class="string">&quot;\033[42;37m&quot;</span> &amp;&amp; Red_background_prefix=<span class="string">&quot;\033[41;37m&quot;</span> &amp;&amp; Font_color_suffix=<span class="string">&quot;\033[0m&quot;</span></span><br><span class="line">Info=<span class="string">&quot;<span class="variable">$&#123;Green_font_prefix&#125;</span>[信息]<span class="variable">$&#123;Font_color_suffix&#125;</span>&quot;</span></span><br><span class="line">Error=<span class="string">&quot;<span class="variable">$&#123;Red_font_prefix&#125;</span>[错误]<span class="variable">$&#123;Font_color_suffix&#125;</span>&quot;</span></span><br><span class="line">RETVAL=0</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_running</span></span>()&#123;</span><br><span class="line">	PID=$(ps -ef |grep <span class="string">&quot;<span class="variable">$&#123;NAME_BIN&#125;</span>&quot;</span> |grep -v <span class="string">&quot;grep&quot;</span> |grep -v <span class="string">&quot;init.d&quot;</span> |grep -v <span class="string">&quot;service&quot;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> [[ ! -z <span class="variable">$&#123;PID&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#echo -e &quot;$&#123;Info&#125;$&#123;NAME&#125; 正在运行！&quot;</span></span><br><span class="line">		<span class="built_in">return</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="comment">#echo -e &quot;$&#123;Error&#125;$&#123;NAME&#125; 没有运行！&quot;</span></span><br><span class="line">		<span class="built_in">return</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行...&quot;</span> &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cd</span> <span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动中...&quot;</span></span><br><span class="line">		<span class="built_in">ulimit</span> -n 51200</span><br><span class="line">		./kms </span><br><span class="line">		sleep 1s</span><br><span class="line">		check_running</span><br><span class="line">		<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动成功 !&quot;</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 启动失败(请运行脚本查看日志错误输出) !&quot;</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$&#123;PID&#125;</span></span><br><span class="line">		RETVAL=$?</span><br><span class="line">		<span class="keyword">if</span> [[ <span class="variable">$RETVAL</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 停止成功 !&quot;</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 停止失败 !&quot;</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行&quot;</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#View_User</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行...&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行 !&quot;</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">	stop</span><br><span class="line">	sleep 2s</span><br><span class="line">	start</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">	start|stop|restart|status)</span><br><span class="line">	<span class="variable">$1</span></span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;使用方法: <span class="variable">$0</span> &#123; start | stop | restart | status &#125;&quot;</span></span><br><span class="line">	RETVAL=1</span><br><span class="line">	;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="加入到系统启动中"><a href="#加入到系统启动中" class="headerlink" title="加入到系统启动中"></a>加入到系统启动中</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加到系统启动</span><br><span class="line">update-rc.d kms defaults </span><br><span class="line">// 从系统启动中删除</span><br><span class="line">update-rc.d kms remove</span><br></pre></td></tr></table></figure>

<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service kms start</span><br><span class="line">service kms stop</span><br></pre></td></tr></table></figure>

<h4 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h4><p>​    systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。systemd对应的进程管理命令是<strong>systemctl</strong>。</p>
<p>还是以kms服务脚本为例</p>
<p>新建一个<code>kms.service</code>文件，保存在 <code>/etc/systemd/system/kms.service</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=kms-service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kms</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -9 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>可以看到service文件一般由：**[Unit]<strong>、</strong>[Service]<strong>和</strong>[Install]** 三部分组成</p>
<ol>
<li>[Unit]<br>主要是对这个服务的说明，内容， 文档介绍以及对一些依赖服务定义</li>
<li>[Service]<br>服务的主体定义，主要定义服务的一些运行参数，及操作动作</li>
<li>[Install]<br>服务安装的相关设置，一般可设置为多用户的</li>
</ol>
<p><u>以下是具体参数</u></p>
<p><strong>[Unit]</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Description</td>
<td>服务描述，作为systemctl status 命令输出的一个介绍</td>
</tr>
<tr>
<td>Documentation</td>
<td>一个url 定义服务的具体介绍网址</td>
</tr>
<tr>
<td>After</td>
<td>在什么服务启动之后</td>
</tr>
<tr>
<td>Before</td>
<td>在什么服务启动之前启动</td>
</tr>
<tr>
<td>Requires</td>
<td>依赖其他的单元服务， 需要与列出的服务一起激活，若任何服务无法启动，则该单元不会被激活</td>
</tr>
<tr>
<td>Wants</td>
<td>比Requires依赖性弱，若其他服务没有启动成功，该服务也不受影响，只是表示一种推荐</td>
</tr>
</tbody></table>
<p><strong>[Service]</strong></p>
<table>
<thead>
<tr>
<th>Type</th>
<th>1.simple默认参数，进程作为主进程<br/>2.forking是后台运行的形式，主进程退出，os接管子进程</th>
</tr>
</thead>
<tbody><tr>
<td>User</td>
<td>设置服务运行的用户</td>
</tr>
<tr>
<td>Group</td>
<td>设置服务运行的用户组</td>
</tr>
<tr>
<td>PIDFile</td>
<td>存放PID的文件路径, 对于type设置为<strong>forking</strong>建议使用该项</td>
</tr>
<tr>
<td>ExecStart</td>
<td>服务的具体运行命令</td>
</tr>
<tr>
<td>ExecStartPre</td>
<td>指定在ExecStart<strong>前</strong>执行的自定义命令</td>
</tr>
<tr>
<td>ExecStartPost</td>
<td>指定在ExecStart<strong>后</strong>执行的自定义命令</td>
</tr>
<tr>
<td>ExecReload</td>
<td>重启命令，重新加载的动作， 重新加载时执行的命令或者脚本</td>
</tr>
<tr>
<td>ExecStop</td>
<td>停止命令，停止时要执行的命令或脚本</td>
</tr>
<tr>
<td>Restart</td>
<td>定义何种情况Systemd会自动重启当前服务，值： 包括<strong>always（总是重启）</strong>、<strong>no</strong> 、<strong>on-success</strong>、<strong>on-failure</strong>、<strong>on-abnormal</strong>、<strong>on-abort</strong>、<strong>on-watchdog</strong> 对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal</td>
</tr>
<tr>
<td>TimeoutStartSec</td>
<td>等待启动的时间。如果守护进程服务没有在配置的时间内发送启动完成的信号，则该服务将被认为失败， 服务将退出。<br/>以秒为单位， “0”来禁用。默认为， 默认使用DefaultTimeoutStartSec=20，<br/>若使用Type=<strong>oneshot</strong>，则该模式默认情况下超时是禁用的</td>
</tr>
<tr>
<td>TimeoutStopSec</td>
<td>等待关闭的超时时间</td>
</tr>
<tr>
<td>TimeoutSec</td>
<td>快速配置TimeoutStartSec和TimeoutStopSec时间</td>
</tr>
<tr>
<td>KillMode</td>
<td>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉<br/>process：只杀主进程<br/>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号<br/>none：没有进程会被杀掉，只是执行服务的 stop 命令。</td>
</tr>
<tr>
<td>Environmen</td>
<td>指定环境变量</td>
</tr>
<tr>
<td>PrivateTmp=True</td>
<td>表示给服务分配独立的临时空间</td>
</tr>
</tbody></table>
<p>注意：**[Service]**部分的启动、重启、停止命令必须使用绝对路径，使用相对路径则会报错</p>
<p><strong>[Install]</strong></p>
<table>
<thead>
<tr>
<th>RequiredBy</th>
<th>依赖该服务的服务列表</th>
</tr>
</thead>
<tbody><tr>
<td>WantedBy</td>
<td>表示该服务所在的 Target， multi-user.target 可以设置为多用户模式具体参考手册systemd.unit(5)</td>
</tr>
</tbody></table>
<p>参考手册：<a href="http://www.jinbuguo.com/systemd/systemd.index.html">http://www.jinbuguo.com/systemd/systemd.index.html</a></p>
<p><strong>服务状态列表：</strong></p>
<table>
<thead>
<tr>
<th>loaded</th>
<th>系统服务已经初始化完成，加载过配置</th>
</tr>
</thead>
<tbody><tr>
<td>actvie(running)</td>
<td>正常运行</td>
</tr>
<tr>
<td>actvie(exited)</td>
<td>正常结束的服务</td>
</tr>
<tr>
<td>active(waitting)</td>
<td>等待其他的事件才继续处理</td>
</tr>
<tr>
<td>inactive</td>
<td>服务关闭</td>
</tr>
<tr>
<td>enabled</td>
<td>服务开机启动</td>
</tr>
<tr>
<td>disabled</td>
<td>服务开机不自启</td>
</tr>
<tr>
<td>static</td>
<td>服务开机启动项不可被管理</td>
</tr>
<tr>
<td>falied</td>
<td>系统配置错误</td>
</tr>
</tbody></table>
<p><strong>管理日志：</strong></p>
<p>Systemd 统一管理所有 Unit 的启动日志。</p>
<table>
<thead>
<tr>
<th>journalctl</th>
<th>命令查看所有日志(内核日志和应用日志)</th>
</tr>
</thead>
<tbody><tr>
<td>journalctl _PID=</td>
<td>查看对应pid的日志</td>
</tr>
</tbody></table>
<p><strong>unit管理：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl start apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>service</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Action定时重启IBM cloud foundry</title>
    <url>/p/ibm-cloud-auto-restart/</url>
    <content><![CDATA[<p>本文简单介绍了Github Action的用法，并使用Gihub Action定时重启IBM cloud foundry容器。</p>
<p><strong>摘要：</strong>GitHub Actions是GitHub自家的持续集成及自动化工作流服务，它使用起来非常简单，只要在你的仓库根目录建立<code>.github/workflows</code>文件夹，将你的工作流配置(YML文件)放到这个目录下，就能启用GitHub Actions服务。</p>
<p><strong>关键字</strong>：Github Action，IBM cloud foundry</p>
<a id="more"></a>

<h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">IBM</span> <span class="string">Cloud</span> <span class="string">Auto</span> <span class="string">Restart</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span>      <span class="comment"># 根据自己的需要设置何时重启</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">ibm-cloud-restart:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">wget</span> <span class="string">-q</span> <span class="string">-O</span> <span class="bullet">-</span> <span class="string">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">apt-key</span> <span class="string">add</span> <span class="bullet">-</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;deb https://packages.cloudfoundry.org/debian stable main&quot;</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">tee</span> <span class="string">/etc/apt/sources.list.d/cloudfoundry-cli.list</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">cf-cli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">IBM</span> <span class="string">Cloud</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">IBM_ACCOUNT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_ACCOUNT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">IBM_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">login</span> <span class="string">-a</span> <span class="string">https://api.us-south.cf.cloud.ibm.com</span> <span class="string">-u</span> <span class="string">$IBM_ACCOUNT</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line">        <span class="string">$IBM_PASSWORD</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">IBM</span> <span class="string">Cloud</span> <span class="string">Apps</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">a</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">IBM</span> <span class="string">Cloud</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">IBM_APP_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_APP_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">restart</span> <span class="string">$IBM_APP_NAME</span></span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="fork仓库：https-github-com-wf09-IBMWorkflow"><a href="#fork仓库：https-github-com-wf09-IBMWorkflow" class="headerlink" title="fork仓库：https://github.com/wf09/IBMWorkflow"></a>fork仓库：<a href="https://github.com/wf09/IBMWorkflow">https://github.com/wf09/IBMWorkflow</a></h4><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IBM_ACCOUNT：账户邮箱</span><br><span class="line"></span><br><span class="line">IBM_APP_NAME：app的名字</span><br><span class="line"></span><br><span class="line">IBM_PASSWORD：密码</span><br></pre></td></tr></table></figure>

<p>设置完环境变量以后记得commit一下yml文件触发Action。</p>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://ftp.fly97.cn/image/image-20200827193322808.png"></p>
<p>PS：达拉斯的容器测试通过，其他的地区可能需要将<code>https://api.us-south.cf.cloud.ibm.com</code>修改成你所在的地区。</p>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Office Tool Plus使用教程</title>
    <url>/p/how-to-use-office-tool-plus/</url>
    <content><![CDATA[<p>Office Tool Plus 使用教程</p>
<a id="more"></a>

<p>软件介绍：<a href="https://otp.landian.vip/zh-cn/">https://otp.landian.vip/zh-cn/</a></p>
<p>软件下载地址：<a href="https://download.coolhub.top/">https://download.coolhub.top/</a></p>
<p><del>备份地址：<a href="https://ftp.fly97.cn/windows/app/Office%20Tool%20v7.5.zip">https://ftp.fly97.cn/windows/app/Office%20Tool%20v7.5.zip</a></del></p>
<h4 id="1-选择安装产品"><a href="#1-选择安装产品" class="headerlink" title="1.选择安装产品"></a>1.选择安装产品</h4><p><img src="https://ftp.fly97.cn/image/image-20200517194431639.png" alt="image-20200517194431639"></p>
<p>注意：由于国内到微软的网络不稳定，建议<strong>部署模式</strong>选择<strong>下载后安装</strong>。耐心等待安装完毕即可。</p>
<h4 id="2-激活office"><a href="#2-激活office" class="headerlink" title="2.激活office"></a>2.激活office</h4><p>首先，根据选择的类型选择对应的许可证。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200517194323507.png" alt="image-20200517194323507"></p>
<p><del>然后，选择<strong>零售版</strong>安装的同学<strong>可能需要安装</strong>Office2019专业版特定的密钥：</del></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</span><br></pre></td></tr></table></figure>

<p>最后，选择对应的KMS服务器。</p>
<p>推荐使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kms.moeclub.org</span><br></pre></td></tr></table></figure>

<p>完。</p>
]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyTorch进行MNIST识别</title>
    <url>/p/Use-PyTorch-for-MNIST-recognition/</url>
    <content><![CDATA[<p>使用PyTorch进行MNIST识别</p>
<a id="more"></a>

<h5 id="数据集部分："><a href="#数据集部分：" class="headerlink" title="数据集部分："></a>数据集部分：</h5><p>下载地址：<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a></p>
<p>如果使用<code>torchvision</code>下载速度较慢可以参考：<a href="https://blog.csdn.net/york1996/article/details/81780065">https://blog.csdn.net/york1996/article/details/81780065</a></p>
<h5 id="网络定义部分："><a href="#网络定义部分：" class="headerlink" title="网络定义部分："></a>网络定义部分：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)         <span class="comment">#输入通道数为1, 输出通道数为32, 卷积核大小为3*3, 步长为1</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>)        </span><br><span class="line">        self.dropout1 = nn.Dropout2d(<span class="number">0.25</span>)          <span class="comment">#随机将输入张量中整个通道设置为0</span></span><br><span class="line">        self.dropout2 = nn.Dropout2d(<span class="number">0.5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">9216</span>, <span class="number">256</span>)             <span class="comment">#全连接层</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>)                      <span class="comment">#使用2*2的窗口进行最大值池化</span></span><br><span class="line">        x = self.dropout1(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)                     <span class="comment">#展平一个连续范围的维度</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.dropout2(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        output = F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>卷积层第一层： <code>nn.Conv2d(1, 32, 3, 1)</code></p>
<p>输入通道数为1，输出通道数为32，使用大小为3*3的卷积核，步长为1。</p>
<p>卷积层第二层：<code>nn.Conv2d(32, 64, 3, 1)</code> </p>
<p>输入通道数为32，输出通道数为64，使用大小为3*3的卷积核，步长为1。</p>
<p>前向传播中使用池化层：<code>F.max_pool2d(x, 2)</code>   </p>
<p>最后展平一个连续的维度：<code>torch.flatten(x, 1)</code></p>
<p><strong>详细描述：</strong></p>
<p>大小为<strong>1X28X28</strong>的图片，经过第一层卷积层，维度变为<strong>32X26X26</strong>，在经过第二层卷积层，维度变为<strong>64X24X24</strong>，在经过一层最大值池化层处理以后，维度变为<strong>64X12X12</strong>，全部展开以后维度变为<strong>1X9216</strong>。</p>
<h5 id="卷积计算公式："><a href="#卷积计算公式：" class="headerlink" title="卷积计算公式："></a>卷积计算公式：</h5><p><code>卷积后输出图像宽/高=(图像宽/高 - 卷积核宽/高 + 用零填充的个数) / 步长</code></p>
<h5 id="池化计算公式："><a href="#池化计算公式：" class="headerlink" title="池化计算公式："></a>池化计算公式：</h5><p><code>池化后图像宽/高=池化前图像宽/高 / 池化窗口宽度</code></p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
        <tag>CNN</tag>
        <tag>MNIST</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WSL链接Github仓库以及如何配置ssh权限问题</title>
    <url>/p/Use-WSL-to-link-Github-repositories-and-how-to-configure-ssh-permissions/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>

<h4 id="1-首先，要安装WSL-Windows-Subsystem-for-Linux-。即适用于Window10的Linux子系统。"><a href="#1-首先，要安装WSL-Windows-Subsystem-for-Linux-。即适用于Window10的Linux子系统。" class="headerlink" title="1.首先，要安装WSL(Windows Subsystem for Linux)。即适用于Window10的Linux子系统。"></a>1.首先，要安装WSL(Windows Subsystem for Linux)。即适用于Window10的Linux子系统。</h4><ul>
<li>打开开发者选项，选择开发人员模式。<img src="https://ftp.fly97.cn/image/image-20191228201007723.png" alt="image-20191228201007723"></li>
</ul>
<ul>
<li>打开控制面板-程序，选择适用于Linux的Windows子系统。<img src="https://ftp.fly97.cn/image/image-20191228201255121.png" alt="image-20191228201255121"></li>
</ul>
<ul>
<li><p>打开Windows应用商店，搜索linux，选择你喜欢的linux系统点击安装。这里以Ubuntu为例。</p>
<p><img src="https://ftp.fly97.cn/image/20200531102849.png" alt="image-20191228201558935"></p>
</li>
</ul>
<p>第一次打开要选择用户名和密码，因为笔者已经安装完了，这里就不再截图了。到此为止WSL就安装好了。</p>
<h4 id="2-使用WSL安装hexo相关软件并链接到github仓库"><a href="#2-使用WSL安装hexo相关软件并链接到github仓库" class="headerlink" title="2.使用WSL安装hexo相关软件并链接到github仓库"></a>2.使用WSL安装hexo相关软件并链接到github仓库</h4><p>打开刚刚安装好的Ubuntu，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<h5 id="初始化git："><a href="#初始化git：" class="headerlink" title="初始化git："></a>初始化git：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入项目</span><br><span class="line">cd Desktop&#x2F;myproject</span><br><span class="line">&#x2F;&#x2F;初始化git</span><br><span class="line"> git init</span><br></pre></td></tr></table></figure>

<h5 id="创建ssh-key："><a href="#创建ssh-key：" class="headerlink" title="创建ssh key："></a>创建ssh key：</h5><p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>

<p>这里的<strong><a href="mailto:&#x79;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#105;&#108;&#64;&#x79;&#x6f;&#117;&#114;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x79;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#105;&#108;&#64;&#x79;&#x6f;&#117;&#114;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a></strong>是你的<strong>邮箱地址</strong>，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>
<h5 id="把密码导入GitHub："><a href="#把密码导入GitHub：" class="headerlink" title="把密码导入GitHub："></a>把密码导入GitHub：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>
<h5 id="验证是否连接成功："><a href="#验证是否连接成功：" class="headerlink" title="验证是否连接成功："></a>验证是否连接成功：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>
<h5 id="设置username和email："><a href="#设置username和email：" class="headerlink" title="设置username和email："></a>设置username和email：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="添加远程地址："><a href="#添加远程地址：" class="headerlink" title="添加远程地址："></a>添加远程地址：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br></pre></td></tr></table></figure>

<p>后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。</p>
<h5 id="上传项目："><a href="#上传项目：" class="headerlink" title="上传项目："></a>上传项目：</h5><p>依次运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;my project push&#39;</span><br><span class="line">git push origin master  --force</span><br></pre></td></tr></table></figure>

<p>这里的<strong>master</strong>指的是主分支名，如果是其他分支，则填写相应的分支名。</p>
<p>这样我们就将我们的项目上传到github仓库。</p>
<h5 id="备注：私钥和公钥的权限问题"><a href="#备注：私钥和公钥的权限问题" class="headerlink" title="备注：私钥和公钥的权限问题"></a>备注：私钥和公钥的权限问题</h5><p>确认将 SSH 权限应用于公钥和私钥文件。</p>
<ol>
<li><p>通过运行以下命令来检查 SSH 公钥文件：<code>ls -l /etc/ssh/*key.pub</code></p>
</li>
<li><p>确认所有者是 root，组所有者是 root，并且文件权限设置为 0644 (-rw-r–r–)。</p>
</li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key.pub</code></p>
<p><code>chgrp root /etc/ssh/*key.pub</code></p>
<p><code>chmod 644 /etc/ssh/*key.pub</code></p>
</li>
<li><p>通过运行以下命令来检查 SSH 私钥文件：<code>ls -l /etc/ssh/*key</code></p>
</li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key</code></p>
<p><code>chgrp root /etc/ssh/*key</code></p>
<p><code>chmod 644 /etc/ssh/*key</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>SSH</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh快速申请ssl证书</title>
    <url>/p/Use-acme-to-quickly-apply-for-an-ssl-certificate/</url>
    <content><![CDATA[<p><strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书.</p>
<p><strong>转载自：<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></strong></p>
<a id="more"></a>

<p>主要步骤:</p>
<ol>
<li>安装 <strong>acme.sh</strong></li>
<li>生成证书</li>
<li>copy 证书到 nginx/apache 或者其他服务</li>
<li>更新证书</li>
<li>更新 <strong>acme.sh</strong></li>
<li>出错怎么办, 如何调试</li>
</ol>
<p>下面详细介绍.</p>
<h4 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 <strong>acme.sh</strong></h4><p>安装很简单, 一个命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>普通用户和 root 用户都可以安装使用.<br>安装过程进行了以下几步:</p>
<ol>
<li>把 acme.sh 安装到你的 <strong>home</strong> 目录下:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.acme.sh&#x2F;</span><br></pre></td></tr></table></figure>
<p>并创建 一个 bash 的 alias, 方便你的使用:  <code>alias acme.sh=~/.acme.sh/acme.sh</code></p>
<p>2). 自动为你创建 cronjob,  每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p>
<p>更高级的安装选项请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a></p>
<p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p>
<h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.<br>一般有两种方式验证: http 和 dns 验证.</p>
<h5 id="http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了"><a href="#http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了" class="headerlink" title="http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了."></a>http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  &#x2F;home&#x2F;wwwroot&#x2F;mydomain.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用. </p>
<p>如果你用的 <strong>apache</strong>服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --apache</span><br></pre></td></tr></table></figure>

<p>如果你用的 <strong>nginx</strong>服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure>

<p><strong>注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.</strong></p>
<p>如果你还没有运行任何 web 服务, <strong>80</strong> 端口是空闲的, 那么 <strong>acme.sh</strong> 还能假装自己是一个webserver, 临时听在<strong>80</strong> 端口, 完成验证:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue -d mydomain.com   --standalone</span><br></pre></td></tr></table></figure>

<p>更高级的用法请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert">https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</a></p>
<h5 id="手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权"><a href="#手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权" class="headerlink" title="手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权."></a>手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.</h5><p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证.<br>坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  --dns   -d mydomain.com</span><br></pre></td></tr></table></figure>

<p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p>
<p>等待解析完成之后, 重新生成证书:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --renew   -d mydomain.com</span><br></pre></td></tr></table></figure>
<p>注意第二次这里用的是 <code>--renew</code></p>
<p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p>
<p><strong>acme.sh</strong> 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成. </p>
<p>以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的.<br>然后:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export DP_Id&#x3D;&quot;1234&quot;</span><br><span class="line"></span><br><span class="line">export DP_Key&#x3D;&quot;sADDsdasdgdsf&quot;</span><br><span class="line"></span><br><span class="line">acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了.<br>直接生成就好了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue   -d  mydomain2.com   --dns  dns_dp</span><br></pre></td></tr></table></figure>

<p>更详细的 api 用法: <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p>
<h4 id="copy-安装-证书"><a href="#copy-安装-证书" class="headerlink" title="copy/安装 证书"></a>copy/安装 证书</h4><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p>
<p>注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,  请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p>
<p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置,<br>例如:</p>
<h5 id="Apache-example"><a href="#Apache-example" class="headerlink" title="Apache example:"></a>Apache example:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--cert-file      &#x2F;path&#x2F;to&#x2F;certfile&#x2F;in&#x2F;apache&#x2F;cert.pem  \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;apache&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;certfile&#x2F;apache&#x2F;fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>

<h5 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;nginx&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;nginx&#x2F;cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>

<p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p>
<p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p>
<p><code>--installcert</code>命令可以携带很多参数, 来指定目标文件.  并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p>
<p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p>
<p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p>
<h4 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h4><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>
<h4 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h4><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步. </p>
<p>升级 acme.sh 到最新版 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure>

<p>如果你不想手动升级, 可以开启自动升级:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure>
<p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure>


<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>如果出错, 请添加 debug log：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug </span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug  2</span><br></pre></td></tr></table></figure>

<p>请参考： <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh">https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</a></p>
<p>最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.</p>
<p><a href="https://github.com/Neilpang/acme.sh/wiki">https://github.com/Neilpang/acme.sh/wiki</a></p>
]]></content>
      <tags>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jsdelivrCDN加速github文件</title>
    <url>/p/Use-jsdelivrCDN-to-accelerate-github-files/</url>
    <content><![CDATA[<p>jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。</p>
<p><strong>更新：</strong>jsDelivr新增使用政策已经于8月15日生效。根据最新的使用政策，<strong>滥用服务及其资源或将jsDelivr用作通用文件或媒体托管服务，账户将会被BAN。</strong></p>
<p>如果将Github+jsDelivr作为图床使用的话是算违规！！！<br>相关链接：<a href="https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net">https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net</a></p>
<a id="more"></a>

<h3 id="jsDelivr-配置"><a href="#jsDelivr-配置" class="headerlink" title="jsDelivr 配置"></a>jsDelivr 配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;wf09&#x2F;upload@master&#x2F;1.png</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>gh</code> 表示来自 Github 的仓库</li>
<li><code>wf09/upload</code> 指的是用户名/仓库名</li>
<li><code>master</code> 仓库的分支</li>
<li><code>1.png</code>仓库下的具体文件</li>
</ul>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>jsdelivrCDN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pip离线安装PyTorch-gpu</title>
    <url>/p/Use-pip-to-install-the-GPU-version-of-PyTorch-offline/</url>
    <content><![CDATA[<p>废话不多说，上教程。</p>
<a id="more"></a>

<h4 id="1-查看Linux预装的Python3版本"><a href="#1-查看Linux预装的Python3版本" class="headerlink" title="1.查看Linux预装的Python3版本"></a>1.查看Linux预装的Python3版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@wf09:~<span class="comment"># python3 -V</span></span><br><span class="line">Python 3.6.9</span><br></pre></td></tr></table></figure>

<h4 id="2-下载对应的Pytorch版本"><a href="#2-下载对应的Pytorch版本" class="headerlink" title="2.下载对应的Pytorch版本"></a>2.下载对应的Pytorch版本</h4><p><a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a></p>
<p><img src="https://ftp.fly97.cn/image/3.png"></p>
<p>Python版本是3.6.9，下载的版本是<code>cpu/torch-1.4.0%2Bcpu-cp36-cp36m-linux_x86_64.whl</code></p>
<h4 id="3-安装pip3"><a href="#3-安装pip3" class="headerlink" title="3.安装pip3"></a>3.安装pip3</h4><h5 id="3-1-Linux"><a href="#3-1-Linux" class="headerlink" title="3.1 Linux"></a>3.1 Linux</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p><strong>tips：</strong>由于apt源自带的pip版本过低，可以执行如下命令升级pip。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>升级完pip以后，pip就相当于pip3了。</p>
<h5 id="3-2-Win"><a href="#3-2-Win" class="headerlink" title="3.2 Win"></a>3.2 Win</h5><p>安装完Python后默认安装pip，执行命令升级pip即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h4 id="4-离线安装Pytorch"><a href="#4-离线安装Pytorch" class="headerlink" title="4.离线安装Pytorch"></a>4.离线安装Pytorch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links=torch-1.4.0+cpu-cp36-cp36m-linux_x86_64.whl torch</span><br></pre></td></tr></table></figure>

<h4 id="5-windows10卸载Pytorch-cpu版本并安装GPU版本"><a href="#5-windows10卸载Pytorch-cpu版本并安装GPU版本" class="headerlink" title="5.windows10卸载Pytorch-cpu版本并安装GPU版本"></a>5.windows10卸载Pytorch-cpu版本并安装GPU版本</h4><h5 id="5-1-卸载cpu版"><a href="#5-1-卸载cpu版" class="headerlink" title="5.1 卸载cpu版"></a>5.1 卸载cpu版</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall torch   		<span class="comment">#卸载torch</span></span><br><span class="line">pip uninstall torchvison    <span class="comment">#卸载torchvison</span></span><br></pre></td></tr></table></figure>

<h5 id="5-2-安装CUDA"><a href="#5-2-安装CUDA" class="headerlink" title="5.2 安装CUDA"></a>5.2 安装CUDA</h5><p><img src="https://ftp.fly97.cn/image/image-20200315143756001.png" alt="image-20200315143756001"></p>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>笔者使用的<code>Win10</code>，附上离线安装版链接：</p>
<p><del><a href="http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe">http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe</a></del></p>
<h6 id="Tips：最新版本的CUDA-10-2-现在还无法被Pytorch支持，安装10-1版本的即可。"><a href="#Tips：最新版本的CUDA-10-2-现在还无法被Pytorch支持，安装10-1版本的即可。" class="headerlink" title="Tips：最新版本的CUDA(10.2)现在还无法被Pytorch支持，安装10.1版本的即可。"></a>Tips：最新版本的CUDA(10.2)现在还无法被Pytorch支持，安装10.1版本的即可。</h6><p><a href="http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_426.00_win10.exe">http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_426.00_win10.exe</a></p>
<p>下载完毕，双击打开即可。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200315145247036.png" alt="image-20200315145247036"></p>
<p>点击OK选择下一步。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200315145432177.png" alt="image-20200315145432177"></p>
<p>等待进度条达到100%，会自动打开安装程序。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200315150124951.png" alt="image-20200315150124951"></p>
<p>选择自定义，然后全部选中，期间会升级本机的<strong>显卡驱动</strong>。</p>
<h6 id="Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA"><a href="#Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA" class="headerlink" title="Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA"></a><strong>Tips：</strong>升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装<strong>CUDA</strong></h6><p><img src="https://ftp.fly97.cn/image/image-20200315150240356.png" alt="image-20200315150240356"></p>
<p>等待安装完毕。</p>
<h5 id="5-3-安装cuDNN"><a href="#5-3-安装cuDNN" class="headerlink" title="5.3 安装cuDNN"></a>5.3 安装cuDNN</h5><p><strong>相比标准的cuda，它在一些常用的神经网络操作上进行了性能的优化，比如卷积，pooling，归一化，以及激活层等等。</strong></p>
<p>下载过程中需要注册 <strong>NVIDIA account</strong>。</p>
<p>下载完毕后执行解压：会生成<code>cuda/include、cuda/lib、cuda/bin</code>三个目录；</p>
<p>然后分别将<code>cuda/include、cuda/lib、cuda/bin</code>三个目录中的内容拷贝到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</code>对应的<code>include、lib、bin</code>目录下即可。</p>
<h5 id="5-4安装Pytorch-GPU版本"><a href="#5-4安装Pytorch-GPU版本" class="headerlink" title="5.4安装Pytorch-GPU版本"></a><strong>5.4安装Pytorch-GPU版本</strong></h5><p>下载Pytorch-CUDA版本的whl文件，用于离线安装。</p>
<p><a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20200315151856974.png" alt="image-20200315151856974"></p>
<p>其中，<strong>cu101</strong>代表CUDA版本是10.1，<strong>cp37</strong>代表CPython version 3.7（指的是C语言实现的Python，就是原汁原味的Python。除了CPython以外，还有用Java实现的Jython，用.NET实现的IronPython，使Python方便地和Java程序、.NET程序集成。另外还有一些实验性的Python解释器比如PyPy），<strong>win</strong>代表Windows操作系统，<strong>amd64</strong>代表64位CPU平台。</p>
<p>使用<strong>管理员权限</strong>打开<code>Anaconda Prompt (Anaconda3)</code>cmd窗口，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torch-1.4.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>等待安装完毕。</p>
<p>使用相同的操作安装 <code>torchvision</code>，其中包含流行的数据集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torchvision-0.5.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>至此<strong>Pytoch-GPU</strong>版已经全部安装完毕。</p>
<p><strong>5.5 测试是否安装成功</strong></p>
<p><img src="https://ftp.fly97.cn/image/image-20200315153854134.png" alt="image-20200315153854134"></p>
<p>打开cmd窗口，输入<strong>python</strong>进入<strong>python环境</strong>。依次输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>输出为<strong>True</strong>，安装完毕。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Pip镜像源</title>
    <url>/p/Modify-pip-mirror-source/</url>
    <content><![CDATA[<p>修改pip镜像源</p>
<a id="more"></a>

<p>清华源：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>
<p>豆瓣源：<a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a></p>
<p>使用方法</p>
<p>临时使用：可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>例如：<code>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple </code></p>
<p>永久修改：linux下，修改 <code>~/.pip/pip.conf</code>，设置为以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>

<p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\wf09\.pip，新建文件pip.ini，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Tkinter(一)</title>
    <url>/p/tkinter-tutorial-01/</url>
    <content><![CDATA[<p>基于 Python 的 Tkinter 常用于UI界面开发。</p>
<p>以下是Tkinter为验证函数提供的一些额外选项。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘%d’</td>
<td>操作代码：0表示删除操作；1表示插入操作；2表示获得、失去焦点或者<code>textvariable</code>变量的值被修改</td>
</tr>
<tr>
<td>‘%i’</td>
<td>当用户尝试插入或者删除操作时，该选项表示插入或者删除的位置(索引号)，如果是由于获得、失去焦点或<code>textvarible</code>变量的值被修改而调用验证函数，那么该值是-1</td>
</tr>
<tr>
<td>‘%P’</td>
<td>当输入框的值允许改变的时候，该值有效。该值作为输入框的最新文本内容。</td>
</tr>
<tr>
<td>‘%s’</td>
<td>该值为调用验证函数前输入框的文本内容</td>
</tr>
<tr>
<td>‘%S’</td>
<td>当插入或者删除操作触发验证函数时，该值有效。该选项表示文本被插入和删除的内容</td>
</tr>
<tr>
<td>‘%v’</td>
<td>该组件当前validate选项的值</td>
</tr>
<tr>
<td>‘%V’</td>
<td>调用该验证函数的原因。该值是’focusin’、’focusout’、’key’或’forced’（textvariable选项指定的变量值被修改）中的一个</td>
</tr>
<tr>
<td>‘%W’</td>
<td>该组件的名字</td>
</tr>
</tbody></table>
<p>启用验证的开关是validate选项，该选项可以设置的值如下表所示</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘focus’</td>
<td>当Entry组件获得或者失去焦点时候验证</td>
</tr>
<tr>
<td>‘focusin’</td>
<td>当Entry组件获得焦点的时候验证</td>
</tr>
<tr>
<td>‘focusont’</td>
<td>当Entry组件失去焦点的时候验证</td>
</tr>
<tr>
<td>‘key’</td>
<td>当输入框被编辑的时候验证</td>
</tr>
<tr>
<td>‘all’</td>
<td>当出现上面任何一种情况时验证</td>
</tr>
<tr>
<td>‘none’</td>
<td>关闭验证功能，默认设置。注意是字符串的<code>&#39;none&#39;</code>，而非<code>None</code></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Tkinter(二)</title>
    <url>/p/tkinter-tutorial-01/</url>
    <content><![CDATA[<p>基于 Python 的 Tkinter 常用于UI界面开发。</p>
<p>下表列出了Tkinter 框架的常用组件和用法，供查找。</p>
<a id="more"></a>


<table>
<thead>
<tr>
<th>组件名称</th>
<th>组件用法</th>
</tr>
</thead>
<tbody><tr>
<td>Label组件</td>
<td>是用于在界面上输出描述的标签</td>
</tr>
<tr>
<td>Button组件</td>
<td>用于实现一个按钮，它的绝大多数选项与Label组件是一样的。<strong>command选项可以接收用户的信息。</strong></td>
</tr>
<tr>
<td>Checkbutton组件</td>
<td>实现多选按钮</td>
</tr>
<tr>
<td>Radiobutton组件</td>
<td>与Checkbutton组件的用法基本一致。唯一不同的是Radiobutton实现的是<strong>“单选”</strong>的效果</td>
</tr>
<tr>
<td>LabelFrame组件</td>
<td>LabelFrame组件是<strong>Frame</strong>框架的进化版。也就是添加了Label的Frame。</td>
</tr>
<tr>
<td>Entry组件</td>
<td>用于实现平时所说的输入框。</td>
</tr>
<tr>
<td>Listbox组件</td>
<td>用于实现列表输入框</td>
</tr>
<tr>
<td>Scrollbar组件</td>
<td>用于实现垂直滚动条</td>
</tr>
<tr>
<td>Scale组件</td>
<td>与Scrollbar相似。Scale组件主要通过滑块来表示某个范围内的一个数字，可以通过修改选项设置范围以及分辨率（精度）</td>
</tr>
<tr>
<td><strong>Text组件</strong></td>
<td>用于显示和处理多行文本。主要任务是显示多行文本，但它常常也被作为<strong>简单的文本编辑器</strong>和<strong>网页浏览器</strong>使用。</td>
</tr>
<tr>
<td>Canvas组件</td>
<td><strong>通用组件</strong>，通常用于显示和编辑图形，可以用它来绘制直线、圆形、多边形，甚至是绘制其他组件。</td>
</tr>
<tr>
<td>Menu组件</td>
<td>用于实现顶级菜单、下拉菜单和弹出菜单。由于该组件是<strong>底层代码实现和优化</strong>，所以<strong>不建议自行</strong>通过按钮和其他组件来实现菜单功能。</td>
</tr>
<tr>
<td>Menubutton组件</td>
<td>用于实现一个与<strong>Menu组件</strong>相关联的按钮，它可以放在窗口中的任意位置，并且在被按下时弹出下拉菜单。</td>
</tr>
<tr>
<td>OptionMenu组件</td>
<td>该组件是下拉菜单的改版，用于实现下拉列表框。</td>
</tr>
<tr>
<td>Message组件</td>
<td>Entry组件的变体，用于显示多行文本消息。</td>
</tr>
<tr>
<td>Spinbox组件</td>
<td>Entry组件的变体，用于从一些固定的值中选取一个。</td>
</tr>
<tr>
<td>PanedWindow组件</td>
<td>类似于Frame组件，都是为组件提供一个框架。PanedWindow允许让用户调整应用程序的空间划分。</td>
</tr>
<tr>
<td>Toplevel组件</td>
<td>类似于Frame组件，但Toplevel组件是一个独立的顶级窗口，这种窗口通常拥有标题栏、边框等部件。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>初探docker(一)</title>
    <url>/p/docker-tutorial-01/</url>
    <content><![CDATA[<p>本文介绍的是docker的安装及常见命令。</p>
<p><strong>摘要：</strong><a href="https://www.docker.com/">Docker</a> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本。使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松。</p>
<p><strong>关键词：</strong>Docker</p>
<a id="more"></a>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure>

<h3 id="启动Docker-CE"><a href="#启动Docker-CE" class="headerlink" title="启动Docker-CE"></a>启动Docker-CE</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line">以下是输出：</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>

<h3 id="获取镜像加速器"><a href="#获取镜像加速器" class="headerlink" title="获取镜像加速器"></a>获取镜像加速器</h3><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p>
<ul>
<li><p>网易云加速器 <code>https://hub-mirror.c.163.com</code></p>
</li>
<li><p>百度云加速器 <code>https://mirror.baidubce.com</code></p>
</li>
<li><p><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors">阿里云加速器(需登录账号获取)</a></p>
<p>本节我们以 <a href="https://www.163yun.com/">网易云</a> 镜像服务 <code>https://hub-mirror.c.163.com</code> 为例进行介绍。</p>
</li>
</ul>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意要保证该文件符合 <strong>json</strong> 规范，否则 Docker 将不能启动。</p>
</blockquote>
<p>之后重启服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h4><p>对于使用 <code>Windows 10</code> 的用户，在任务栏托盘 Docker 图标内右键菜单选择 <code>Settings</code>，打开配置窗口后在左侧导航菜单选择 <code>Docker Engine</code>，在右侧像下边一样编辑 json 文件，之后点击 <code>Apply &amp; Restart</code> 保存后 Docker 就会重启并应用配置的镜像地址了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://28wgvhgl.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200718170304988.png"></p>
<h3 id="常见docker命令"><a href="#常见docker命令" class="headerlink" title="常见docker命令"></a>常见docker命令</h3><h4 id="取回容器"><a href="#取回容器" class="headerlink" title="取回容器"></a>取回容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull fly97/v2fly</span><br></pre></td></tr></table></figure>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name v2fly -v /etc/caddy:/etc/caddy  -p 443:443 fly97/v2fly</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-v ：启用目录挂载。冒号”:”前面的目录是<strong>宿主机目录</strong>，后面的目录是<strong>容器内目录</strong>。</p>
<p>-p：启用端口映射。</p>
<p>-d：在后台运行容器并打印容器ID。</p>
<p>–restart=always：保证每次docker服务重启后容器也自动重启</p>
<p>–network </p>
</blockquote>
<p>​    如果容器已经启动了而又想设置容器自动启动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker update --restart=always &lt;CONTAINER ID/CONTAINER NAME&gt;</span><br></pre></td></tr></table></figure>

<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it $(docker ps| grep fly97/v2fly | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /bin/sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-i： 交互式操作。</p>
<p>-t：启用终端运行。</p>
<p>/bin/sh：打开交互式 Shell</p>
</blockquote>
<h4 id="查看当前运行的容器"><a href="#查看当前运行的容器" class="headerlink" title="查看当前运行的容器"></a>查看当前运行的容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure>

<h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start CONTAINER_NAME</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop CONTAINER_NAME</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm CONTAINER_NAME</span><br></pre></td></tr></table></figure>

<h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGE_ID</span><br></pre></td></tr></table></figure>

<h4 id="全部命令"><a href="#全部命令" class="headerlink" title="全部命令"></a>全部命令</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\wf09\Desktop\v2fly<span class="literal">-docker</span>&gt; docker -<span class="literal">-help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker [<span class="type">OPTIONS</span>] COMMAND</span><br><span class="line"></span><br><span class="line">A self<span class="literal">-sufficient</span> runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      -<span class="literal">-config</span> string      Location of client config files (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker&quot;</span>)</span><br><span class="line">  <span class="literal">-c</span>, -<span class="literal">-context</span> string     Name of the context to use to connect to the</span><br><span class="line">                           daemon (overrides DOCKER_HOST env var and</span><br><span class="line">                           default context <span class="built_in">set</span> with <span class="string">&quot;docker context use&quot;</span>)</span><br><span class="line">  <span class="literal">-D</span>, -<span class="literal">-debug</span>              Enable debug mode</span><br><span class="line">  <span class="literal">-H</span>, -<span class="literal">-host</span> list          Daemon socket(s) to connect to</span><br><span class="line">  <span class="literal">-l</span>, -<span class="literal">-log</span><span class="literal">-level</span> string   <span class="built_in">Set</span> the logging level</span><br><span class="line">                           (<span class="string">&quot;debug&quot;</span>|<span class="string">&quot;info&quot;</span>|<span class="string">&quot;warn&quot;</span>|<span class="string">&quot;error&quot;</span>|<span class="string">&quot;fatal&quot;</span>)</span><br><span class="line">                           (default <span class="string">&quot;info&quot;</span>)</span><br><span class="line">      -<span class="literal">-tls</span>                Use TLS; implied by -<span class="literal">-tlsverify</span></span><br><span class="line">      -<span class="literal">-tlscacert</span> string   Trust certs signed only by this CA (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\ca.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlscert</span> string     Path to TLS certificate file (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\cert.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlskey</span> string      Path to TLS key file (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\key.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlsverify</span>          Use TLS and verify the remote</span><br><span class="line">  <span class="literal">-v</span>, -<span class="literal">-version</span>            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust on Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container<span class="string">&#x27;s changes</span></span><br><span class="line"><span class="string">  cp          Copy files/folders between a container and the local filesystem</span></span><br><span class="line"><span class="string">  create      Create a new container</span></span><br><span class="line"><span class="string">  diff        Inspect changes to files or directories on a container&#x27;</span>s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container<span class="string">&#x27;s filesystem as a tar archive</span></span><br><span class="line"><span class="string">  history     Show the history of an image</span></span><br><span class="line"><span class="string">  images      List images</span></span><br><span class="line"><span class="string">  import      Import the contents from a tarball to create a filesystem image</span></span><br><span class="line"><span class="string">  info        Display system-wide information</span></span><br><span class="line"><span class="string">  inspect     Return low-level information on Docker objects</span></span><br><span class="line"><span class="string">  kill        Kill one or more running containers</span></span><br><span class="line"><span class="string">  load        Load an image from a tar archive or STDIN</span></span><br><span class="line"><span class="string">  login       Log in to a Docker registry</span></span><br><span class="line"><span class="string">  logout      Log out from a Docker registry</span></span><br><span class="line"><span class="string">  logs        Fetch the logs of a container</span></span><br><span class="line"><span class="string">  pause       Pause all processes within one or more containers</span></span><br><span class="line"><span class="string">  port        List port mappings or a specific mapping for the container</span></span><br><span class="line"><span class="string">  ps          List containers</span></span><br><span class="line"><span class="string">  pull        Pull an image or a repository from a registry</span></span><br><span class="line"><span class="string">  push        Push an image or a repository to a registry</span></span><br><span class="line"><span class="string">  rename      Rename a container</span></span><br><span class="line"><span class="string">  restart     Restart one or more containers</span></span><br><span class="line"><span class="string">  rm          Remove one or more containers</span></span><br><span class="line"><span class="string">  rmi         Remove one or more images</span></span><br><span class="line"><span class="string">  run         Run a command in a new container</span></span><br><span class="line"><span class="string">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span></span><br><span class="line"><span class="string">  search      Search the Docker Hub for images</span></span><br><span class="line"><span class="string">  start       Start one or more stopped containers</span></span><br><span class="line"><span class="string">  stats       Display a live stream of container(s) resource usage statistics</span></span><br><span class="line"><span class="string">  stop        Stop one or more running containers</span></span><br><span class="line"><span class="string">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span></span><br><span class="line"><span class="string">  top         Display the running processes of a container</span></span><br><span class="line"><span class="string">  unpause     Unpause all processes within one or more containers</span></span><br><span class="line"><span class="string">  update      Update configuration of one or more containers</span></span><br><span class="line"><span class="string">  version     Show the Docker version information</span></span><br><span class="line"><span class="string">  wait        Block until one or more containers stop, then print their exit codes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run &#x27;</span>docker COMMAND -<span class="literal">-help</span><span class="string">&#x27; for more information on a command.</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Docker(二)</title>
    <url>/p/docker-tutorial-02/</url>
    <content><![CDATA[<p>本文主要介绍了Dockerfile。</p>
<p><strong>摘要：什么是 Dockerfile？</strong></p>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p><strong>关键词：</strong>Dockerfile</p>
<a id="more"></a>

<h3 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h3><h4 id="定制一个ubuntu镜像"><a href="#定制一个ubuntu镜像" class="headerlink" title="定制一个ubuntu镜像"></a>定制一个ubuntu镜像</h4><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;这是一个本地构建的ubuntu:18.04镜像&#x27;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="FROM-和-RUN-指令的作用"><a href="#FROM-和-RUN-指令的作用" class="headerlink" title="FROM 和 RUN 指令的作用"></a>FROM 和 RUN 指令的作用</h4><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 <strong>ubuntu:18.04</strong>就是定制需要的基础镜像。后续的操作都是基于 ubuntu。</p>
<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下两种格式：</p>
<p>Shell格式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>

<p>Exec 格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</p>
<p>​    例如：    </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>​    以上执行会创建 3 层镜像。可简化为以下格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p>
<h4 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h4><p>切换到<code>Dockerfile</code> 文件的存放目录，执行以下命令，开始构建对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t ubuntu:latest .</span><br></pre></td></tr></table></figure>

<p>以上示例，通过目录下的 Dockerfile 构建一个 <code>ubuntu:latest（镜像名称:镜像标签）</code>。</p>
<p><strong>注：最后的 . 代表本次执行的上下文路径，下一节会介绍。</strong></p>
<p><img src="https://ftp.fly97.cn/image/image-20200718201119692.png" alt="image-20200718201119692"></p>
<p>以上说明已经构建成功。</p>
<h4 id="上下文路径"><a href="#上下文路径" class="headerlink" title="上下文路径"></a>上下文路径</h4><p>上面提到 <strong>.</strong> 是上下文路径，那么什么是上下文路径呢？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t ubuntu:latest .</span><br></pre></td></tr></table></figure>

<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>
<blockquote>
<p>由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>
</blockquote>
<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>
<p><strong>注意：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</strong></p>
<h3 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h3><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>**[–chown=:]**：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>
<p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure>

<p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>
<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>
<ul>
<li>ADD 的优点：在执行 <strong>&lt;源文件&gt;</strong> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 **&lt;目标路径&gt;**。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ul>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build 时运行。</li>
</ul>
<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>
<p><strong>注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</strong></p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;shell 命令&gt; </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]  <span class="comment"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>
</blockquote>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>类似于 CMD 指令，但其不会被 <code>docker run</code> 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>
<p>但是, 如果运行 <code>docker run</code> 时使用了 <code>--entrypoint</code> 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p>
<p><strong>优点</strong>：在执行 <code>docker run</code> 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>
<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure>

<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>
<p>示例：</p>
<p>假设已通过 Dockerfile 构建了 <strong>nginx:test</strong> 镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参</span><br><span class="line">CMD [&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot;] # 变参 </span><br></pre></td></tr></table></figure>

<p>1、不传参运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash">  nginx:<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<p>容器内会默认运行以下命令，启动主进程。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>2、传参运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash">  nginx:<span class="built_in">test</span> -c /etc/nginx/new.conf</span></span><br></pre></td></tr></table></figure>

<p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure>

<h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>

<p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 <code>docker build</code> 的过程中有效，构建好的镜像内不存在此环境变量。</p>
<p>构建命令 <code>docker build</code> 中可以用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>

<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<p><strong>注意：</strong></p>
<ol>
<li>通过<code>docker run</code>命令的<code>-v</code>标识创建的挂载点只能对创建的容器有效。</li>
<li>通过 Dockerfile 的 VOLUME 指令可以在镜像中创建挂载点，这样只要通过该镜像创建的容器都有了挂载点。</li>
<li>通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的。</li>
<li><code>docker run</code>中使用 <code>--volumes-from</code>标记的镜像可以共享<strong>匿名数据卷</strong>。镜像可以是同一个镜像，也可以是不同镜像。</li>
</ol>
<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>暴露容器的端口。</p>
<p>作用：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure>

<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>
<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h4><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span></span><br></pre></td></tr></table></figure>

<h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>奥卡姆剃刀和没有免费的午餐定理</title>
    <url>/p/Occam&#39;s-razor-and-no-free-lunch-theorem/</url>
    <content><![CDATA[<p>本文原载于<a href="https://imlogm.github.io/">https://imlogm.github.io</a>，转载请注明出处！</p>
<p><strong>摘要</strong>：“奥卡姆剃刀”和“没有免费的午餐”是机器学习中两个很基本的原则和定理。由于名字有点怪，所以初学者可能在理解上陷入误区。本文试图用简洁易懂的方式解释这两个原则和定理，并告诉大家它们的名字是怎么来的。</p>
<p><strong>关键字</strong>：机器学习, 奥卡姆剃刀, 没有免费的午餐</p>
<a id="more"></a>

<p>“奥卡姆剃刀”和“没有免费的午餐”是机器学习中两个很基本的原则和定理，很多书都会提到它们来提升逼格。不过，烦就烦在它们的名字取的有些不好理解，初学者望文生义就容易错误理解。其实，了解了它们名字的由来，这两个原则和定理是很容易想明白的，也不用去纠结如何证明它们，因为它们更接近哲学思想，而不是你会在实际项目中用到的公式。</p>
<h4 id="奥卡姆剃刀（Occam’s-razor）"><a href="#奥卡姆剃刀（Occam’s-razor）" class="headerlink" title="奥卡姆剃刀（Occam’s razor）"></a>奥卡姆剃刀（Occam’s razor）</h4><p>“奥卡姆剃刀”其实并不是机器学习领域产生的定理，事实上，它是哲学领域的一个思想。这个思想说起来也很简单，7个字，<code>“简单的是最好的”</code>。</p>
<p>相信大家不难理解这个哲学思想，比如在数学领域，大多数数学家认为“好的公式应当是简洁明了的”，就是“奥卡姆剃刀”的体现。</p>
<p>这个思想我能理解，但为什么叫这么奇怪的名字？容易想到，“奥卡姆”是提出这个思想的人的名字；至于为什么叫“剃刀”是因为这个思想的提出，对封建旧思想来说是把锋利的剃刀，狠狠地剃除教会的旧思想。（具体是如何剃除旧思想的就不展开了）</p>
<p>那这个思想是怎么应用在机器学习领域的呢？用下图就可以概括：</p>
<img src="https://ftp.fly97.cn/image/overfit.png" style="zoom:80%;" align="center"/>

<p>了解机器学习的同学不难看出，上图表示的是过拟合问题，不了解的同学也不必担心，可以把上图想象成用曲线拟合几个点。</p>
<p>那么问题来了，上图中，哪种拟合方式是比较好的呢？相信大多数人都会选择左小图的拟合方式。机器学习领域也通常认为左小图是比较好的，原因就是“奥卡姆剃刀”的思想，“简单的是最好的”。</p>
<p>有些敢于挑战权威的同学可能会反驳，“怎么证明图1左小图是更简单的呢？我可以认为右小图更简单”。是的，这个问题周志华的西瓜书中也有提到，其实是没有办法说明哪种更简单。这也是哲学问题的通病，难以联系到实际中，往往会有多种解读。</p>
<p>不过我们不用去纠结怎样才算“简单”，只要明白这个词是什么意思就可以了。</p>
<p>可能还会有同学反驳，“我同意左小图是简单的，但万一实际情况中右小图才是更符合结果的拟合方式呢？”。这个想法也是对的，我们无法证明实际情况一定是左小图的拟合方式最好。这也就是下面“没有免费的午餐”定理要说明的。</p>
<h4 id="“没有免费的午餐”定理（no-free-lunch-NFL）"><a href="#“没有免费的午餐”定理（no-free-lunch-NFL）" class="headerlink" title="“没有免费的午餐”定理（no free lunch, NFL）"></a>“没有免费的午餐”定理（no free lunch, NFL）</h4><p>这个定理的名字乍一看很唬人，也有很多初学者因为这个名字陷入了误区。我们可以先把名字放在一边，先看定理的内容。</p>
<p>这个定理证明起来很复杂，一长串的数学公式，但说明白其实只要一句话，<code>“没有一种机器学习算法是适用于所有情况的”</code>。</p>
<p>这也符合我们的直觉。举个例子吧，比如上图，假设上图的左小图是机器算法A给出的拟合曲线，上图的右小图是机器算法B给出的拟合曲线。我们就一定能说机器算法A比机器算法B更好吗？或者说左小图的拟合曲线一定比右小图更符合实际情况吗？都不能。“没有免费的午餐”定理证明了对于所有机器学习问题，机器算法A更好与机器算法B更好的概率是一样的。<code>更一般地说，对于所有机器学习问题，任何一种算法（包括瞎猜）的期望效果都是一样的</code>。</p>
<p>那我们还学个啥？既然任何算法的期望效果和瞎猜一样，我们为什么还要学？</p>
<p>注意，这个定理有个前提：“对于所有机器学习问题，且所有问题同等重要”。而我们实际情况不是这样，我们在实际中往往更关心的是一个特定的机器学习问题，对于特定的问题，特定的机器学习算法效果自然比瞎猜更好。还是上图的例子，虽然“没有免费的午餐”定理告诉我们：我们不能预计到底是左小图拟合更好还是右小图拟合更好，但聪明的你一定能想到：是好是坏，代入到具体问题中检验一下不就知道了。</p>
<p>这个定理本质上就是告诉我们不要奢望能找到一种算法对所有问题都适用。这么说来，这个定理其实有点废话，因为我们面对的总是一个特定的问题，而不是所有问题。</p>
<p>但是这个定理其实揭示了一个哲学思想，“有得必有失”，某一个机器学习算法在某个领域好用，在另外一个领域就有可能不好用，瞎猜在一些情况下不好用，但在某个特定的问题上会很好用。就像能量守恒定理，这里的能量增加，另外一边的能量就会减少。天上掉馅饼被你捡到了，这个时刻你很幸运，但是之后你就会倒霉。</p>
<p>理解了上面一段话，也就明白了这个定理为什么取这么奇怪的名字。</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Fish自动匹配历史命令</title>
    <url>/p/install-fish-shell-to-automatically-match-historical-commands/</url>
    <content><![CDATA[<p>本文介绍了Fish的使用，使用Fish可以根据输入自动匹配历史命令。</p>
<p><strong>摘要</strong>：Fish的官网宣传语是 Finally, a command line shell for the 90s。 翻译过来就是 Fish shell 是一个为90后准备的 shell。有人说：“二逼青年用bash，普通青年用zsh，文艺青年用fish。”<br>其次由于zsh 的速度实在是太慢，所以决定换用fish，fish速度快，智能提示强大。</p>
<p><strong>关键字</strong>：Fish</p>
<a id="more"></a>

<h4 id="Fish入门使用"><a href="#Fish入门使用" class="headerlink" title="Fish入门使用"></a>Fish入门使用</h4><h5 id="Ubuntu安装Fish"><a href="#Ubuntu安装Fish" class="headerlink" title="Ubuntu安装Fish"></a>Ubuntu安装Fish</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:fish-shell/release-2</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br><span class="line"><span class="comment">#切换到fish</span></span><br><span class="line"><span class="built_in">echo</span> /usr/bin/fish | sudo tee -a /etc/shells</span><br><span class="line">sudo chsh -s /usr/bin/fish &amp;&amp; fish</span><br></pre></td></tr></table></figure>

<p>fish的鲜明特征在于安装时已经默认集成了很多需要的功能。<br>比如：</p>
<ul>
<li>命令行语法高亮，错误会显示红色</li>
<li>智能提示</li>
<li>可以使用web网页的进行终端配置</li>
</ul>
<p>fish 有智能提示，一个命令一旦输入过一次，会自动显示上一次的全部命令，细心一点会发现会有一层灰色的字体表示上一次的命令，按<code>Ctrl+F</code>或者 右方向键<code>→</code>， 即可自动补全。</p>
<p><img src="https://ftp.fly97.cn/image/20200811_144927.gif"></p>
<h5 id="网页配置Fish"><a href="#网页配置Fish" class="headerlink" title="网页配置Fish"></a>网页配置Fish</h5><p><code>fish_config</code> 可以直接跳出网页版本配置fish的界面。</p>
<p>web版本可以设置主题， 推荐其中的”Tomorrow Night”主题颜色。</p>
<p><img src="https://ftp.fly97.cn/image/2027280-11b7a5729b03227b.webp" alt="img"></p>
<p>选择想要的主题，然后点击set theme即可设置主题。<br>在命令里按enter 即可退出web版本的界面。</p>
<p>在prompt里面可以自己选择fish终端的主题。</p>
<p><img src="https://ftp.fly97.cn/image/2027280-3f8729b449ea454d.webp" alt="img"></p>
<h4 id="兼容Bash"><a href="#兼容Bash" class="headerlink" title="兼容Bash"></a>兼容Bash</h4><p>由于fish 很多<strong>不兼容</strong>bash的功能导致了很多脚本无法运行，这一点是很多人吐槽fish的地方，我们需要一种方式来运行bash脚本。</p>
<p>比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arc land --onto `git rev-parse --abbrev-ref HEAD` </span><br></pre></td></tr></table></figure>

<p>只需要在前面添加一个bash -c 命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;arc land --onto `git rev-parse --abbrev-ref HEAD`&quot;</span></span><br></pre></td></tr></table></figure>

<p>顺手加个alias就更方便了，可以直接在命令行里使用命令<code>arcl</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> arcl bash -c <span class="string">&quot;arc land --onto `git rev-parse --abbrev-ref HEAD`&quot;</span></span><br></pre></td></tr></table></figure>

<p>对于脚本文件，比如我将需要执行的命令或文件放到<code>repomerge.sh</code></p>
<p>在~/.config/fish/config.fish添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> up <span class="string">&quot;bash -c /usr/bin/repomerge.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以自由的使用up命令了</p>
<p>其中function fish_prompt 函数用于定义fish终端的显示样式。</p>
<p>我们只需要写一个fish_prompt函数即可。集成了git的分支名称以及当前的变化。</p>
<p>显示的样式如下：</p>
<p><img src="https://ftp.fly97.cn/image/2027280-2c1a98068158e5fd.webp" alt="img"></p>
<p><strong>说明:<br> ✔代表当前git项目是干净的。<br> %1 表示有一个文件未追踪<br> +1 表示一个文件已暂存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端显示样式的配置</span></span><br><span class="line"><span class="keyword">function</span> fish_prompt --description <span class="string">&#x27;Write out the prompt&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">set</span> -q __fish_prompt_normal</span><br><span class="line">        <span class="built_in">set</span> -g __fish_prompt_normal (set_color normal)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    __fish_git_prompt &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> git_is_repo</span><br><span class="line">        <span class="keyword">if</span> not <span class="built_in">set</span> -q __git_cb</span><br><span class="line">            <span class="built_in">set</span> __git_cb (set_color blue)<span class="string">&quot; (&quot;</span>(set_color brred)(git branch | grep \* | sed <span class="string">&#x27;s/* //&#x27;</span>) (set_color -o bryellow)(__fish_git_prompt_informative_status)(set_color blue)<span class="string">&quot;)&quot;</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">set</span> -q __fish_prompt_cwd</span><br><span class="line">        <span class="built_in">set</span> -g __fish_prompt_cwd (set_color <span class="variable">$fish_color_cwd</span>)</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&#x27;%s%s%s%s &#x27;</span> <span class="string">&quot;<span class="variable">$__fish_prompt_cwd</span>&quot;</span> (prompt_pwd) <span class="string">&quot;<span class="variable">$__fish_prompt_normal</span>&quot;</span> <span class="variable">$__git_cb</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="隐藏欢迎语"><a href="#隐藏欢迎语" class="headerlink" title="隐藏欢迎语"></a>隐藏欢迎语</h4><p>在confin.sh文件里添加如下函数即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fish_greeting</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> l <span class="string">&quot;ll&quot;</span></span><br><span class="line"><span class="built_in">alias</span> dir <span class="string">&quot;dde-file-manager . &amp;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> docker <span class="string">&quot;sudo docker&quot;</span></span><br><span class="line"><span class="built_in">alias</span> apt <span class="string">&quot;sudo apt&quot;</span></span><br></pre></td></tr></table></figure>



<p>作者：iceqing<br>链接：<a href="https://www.jianshu.com/p/bf03bce60987">https://www.jianshu.com/p/bf03bce60987</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>安装autojump自动切换目录</title>
    <url>/p/install-autojump-to-automatically-switch-directories/</url>
    <content><![CDATA[<p>本文介绍了autojump的使用，使用autojump可以很方便地切换目录。</p>
<p><strong>摘要</strong>：熟悉Linux 的小伙伴们都知道，在终端下需要使用命令<code>cd</code>切换目录。对于多层目录，还需要不停的用使用<code>cd</code>命令或者 Tab 键补齐，如果目录下文件夹过多，还需要使用<code>ls</code>查看当前目录下的文件。<a href="https://github.com/wting/autojump">autojump </a>是浏览文件系统的一种更快的方法。它通过维护命令行中最常用的目录的数据库来工作。autojump 是通过记录进入过的目录到数据库来实现的，所以必须是曾经进入过的目录才能跳转。</p>
<p><strong>关键字</strong>：autojump</p>
<a id="more"></a>

<h4 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h4><h5 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h5><p>克隆以下仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wting/autojump.git</span><br></pre></td></tr></table></figure>

<p>coding分流</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://e.coding.net/fly97/github-projects/autojump.git</span><br></pre></td></tr></table></figure>

<p>执行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">chmod +x install.py</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure>

<h5 id="fish-shell的设置"><a href="#fish-shell的设置" class="headerlink" title="fish shell的设置"></a>fish shell的设置</h5><p>执行以下命令以创建fish shell的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;if test -f /root/.autojump/share/autojump/autojump.fish; . /root/.autojump/share/autojump/autojump.fish; end&quot;</span> &gt;&gt; ~/.config/fish/config.fish</span><br></pre></td></tr></table></figure>

<h5 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=&quot;</span><span class="variable">$PATH</span>:/root/.autojump/bin<span class="string">&quot; &gt; /etc/profile</span></span><br></pre></td></tr></table></figure>

<h5 id="执行以下命令检查是否正常运行"><a href="#执行以下命令检查是否正常运行" class="headerlink" title="执行以下命令检查是否正常运行"></a>执行以下命令检查是否正常运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200811140853462.png" alt="image-20200811140853462"></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="查看-autojump-存储的目录的状态"><a href="#查看-autojump-存储的目录的状态" class="headerlink" title="查看 autojump 存储的目录的状态"></a>查看 <code>autojump</code> 存储的目录的状态</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j -s</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200811142040440.png" alt="image-20200811142040440"></p>
<h5 id="查看使用帮助"><a href="#查看使用帮助" class="headerlink" title="查看使用帮助"></a>查看使用帮助</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j -h</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.fly97.cn/image/image-20200811142133380.png" alt="image-20200811142133380"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>循环神经网络介绍</title>
    <url>/p/Introduction-to-Recurren-Neural-Networks/</url>
    <content><![CDATA[<p>什么是LSTM？</p>
<a id="more"></a>

<p>LSTM 即 Long Short Term 网络——一般就叫做LSTM——是一种特殊的RNN，可以学习长期依赖信息。LSTM由 <em>Hochreiter &amp; Schmidhuber</em> (1997) 提出， 并被 <em>Alex Graves</em> 进行了改良和推广。在很多问题，LSTM 都取得了相当巨大的成功，并得到了广泛的使用。</p>
<p>LSTM 通过刻意的设计来避免长期依赖问题。记住长期的信息是 LSTM 的默认行为，而非需要付出很大代价才能获得的能力。</p>
<p>所有的 RNN都具有一种重复神经网络模块的链式的形式，在标准的RNN中，这个重复的模块只有一个非常简单的结构，例如一个 <em>tanh</em> 层。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_450.png"></p>
<blockquote>
<p>上图即<strong>标准RNN中</strong>重复模块包含单一的层</p>
</blockquote>
<p>LSTM同样是这样的结构，但是重复的模块拥有一个不同的结构。不同于单一神经网络层，这里有四个，以一种非常特殊的方式进行交互。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_631.png"></p>
<blockquote>
<p>上图即<strong>LSTM</strong>中的重复模块包含的四个交互的层</p>
</blockquote>
<p>我们会一步一步的剖析LSTM解析图。现在，我们先来熟悉一下途中使用的各种元素的图标。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_777.png"></p>
<blockquote>
<p>LSTM中的图标</p>
</blockquote>
<p>在上面的图例中，每一条黑线传输着一整个向量，从一个节点的输出到其他节点的输入。粉色的圈代表 <em>pointwise</em> (逐点的)操作，诸如向量的和，而黄色的矩阵就是学习到的神经网络层。合在一起的线表示向量的连接，分开的线表示内容被复制，然后分发到不同的位置。</p>
<h4 id="2-LSTM核心内容"><a href="#2-LSTM核心内容" class="headerlink" title="2.LSTM核心内容"></a>2.LSTM核心内容</h4><p>LSTM的关键就是细胞状态（cell），水平线在图上方贯穿运行，细胞状态类似于传送带，直接在整个链上运行，只有一些少量的线性交互，信息在上面流传保持不变会很容易。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_640.png"></p>
<p>LSTM 有通过精心设计的称作”<strong>门</strong>“的结构来去除或者增加信息到细胞状态的能力。门是一种让信息选择式通过的方法。他们包含一个 <em>sigmoid</em> 神经网络层和一个 <em>pointwise</em> 乘法操作。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_567.png"></p>
<p><em>sigmoid</em> 层输出 0 到 1 之间的数值，描述每个部分有多少量可以通过。0 代表”不允许任何量通过”，1 就指”允许任何量通过”。</p>
<p>LSTM有三个门，来保护和控制细胞状态。</p>
<h4 id="3-逐步理解LSTM"><a href="#3-逐步理解LSTM" class="headerlink" title="3.逐步理解LSTM"></a>3.逐步理解LSTM</h4><p>LSTM中第一步是决定会从细胞状态中丢弃什么信息。这个决定通过一个称为 <strong>忘记门层</strong> 的门来完成。该门会读取 \(h_{t-1}\) 和 \(x_{t}\) ，输出一个在 0 到 1 之间的数值给每个在细胞状态中的数字。1 表示”完全保留”，0 代表”完全舍弃”。</p>
<p>让我们回到 <strong>语言模型</strong> 的例子中来基于已经看到的词预测下一个词。在这个问题中，细胞状态可能包含当前 <strong>主语</strong> 的类别，因此正确的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> ，我们希望忘记旧的 <strong>代词</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_259.png"></p>
<h5 id="3-1决定丢弃信息"><a href="#3-1决定丢弃信息" class="headerlink" title="3.1决定丢弃信息"></a>3.1决定丢弃信息</h5><p>下一步是确定什么样的新信息被存放在细胞状态中。这里包含两部分。第一，<em>sigmoid</em> 层称 “输入门层” 决定什么值我们将要更新。然后，一个 <em>tanh</em> 层创建一个一个新的候选值向量，\(\tilde{C_{t}}\)，会被加入到状态中。下一步，我们会将这两个信息来产生对状态的更新。</p>
<p>在我们 <strong>语言模型</strong> 的例子中，我们希望增加新的 <strong>代词</strong> 的类别到细胞状态中，来替代旧的需要忘记的 <strong>代词</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_897.png"></p>
<h5 id="3-2确定更新的信息"><a href="#3-2确定更新的信息" class="headerlink" title="3.2确定更新的信息"></a>3.2确定更新的信息</h5><p>现在是更新旧细胞状态的时间了，\(C_{t-1}\) 更新为 \(C_{t}\)</p>
<p>我们把旧状态与 \(f_t\) 相乘，丢弃掉确定丢弃的信息，接着加上 \(i_t * \tilde{C}_t\) ，这就是新的候选值。</p>
<p>在 <strong>语言模型</strong> 的例子中，这就是我们实际根据前面确定的目标，丢弃 <strong>旧代词</strong> 的类别信息并添加新的信息的地方。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_883.png"></p>
<h5 id="3-3更新细胞状态"><a href="#3-3更新细胞状态" class="headerlink" title="3.3更新细胞状态"></a>3.3更新细胞状态</h5><p>最终，我们需要确定输出什么值，这个输出将会基于我们的细胞状态，但是也是一个过滤后的版本。首先，我们运行一个 <em>sigmoid</em> 层来确定细胞状态的哪个部分将输出出去。接着，我们把细胞状态通过 <em>tanh</em> 进行处理，得到一个在 -1 到 1 之间的值，并将它和 sigmoid 门的输出相乘，最终我们仅仅会输出我们确定输出的那部分。</p>
<p>在 <strong>语言模型</strong> 的例子中，因为他就看到了一个  <strong>代词</strong> ，可能需要输出一个 <strong>代词</strong> 相关的信息。例如，可能输出是否代词是单数还是负数。如果是 <strong>动词</strong> 的话，我们也他要知道 <strong>动词</strong> 需要进行的词形变化。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_463.png"></p>
]]></content>
      <tags>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo并推送到GitHub Pages</title>
    <url>/p/build-a-hexo-blog-and-push-to-GitHub-Pages/</url>
    <content><![CDATA[<p>之前因为重装系统丢掉了已经搭建好的Hexo博客配置文件。经过这件事以后我深刻地记住了备份的重要性。趁着刚刚搭建完博客，于是写一篇文章水一下！</p>
<a id="more"></a>

<h3 id="安装git软件"><a href="#安装git软件" class="headerlink" title="安装git软件"></a>安装git软件</h3><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<img src="https://ftp.fly97.cn/image/image-20200119205126173.png" alt="image-20200119205126173" style="zoom: 50%;" />

<p>注意：此步需要添加git到环境变量，<del>因为写这边文章时，笔者已经安装完成了。</del></p>
<p>即最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>
<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p><a href="https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi">https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi</a></p>
<img src="https://ftp.fly97.cn/image/image-20200119205441241.png" alt="image-20200119205441241" style="zoom:50%;" />

<p>注意：此步需要添加<code>nodejs</code>到系统变量。</p>
<p>安装完毕后打开<code>cmd</code>输入<code>node -v npm -v</code>。如果显示版本号就说明安装完成了。</p>
<img src="https://ftp.fly97.cn/image/image-20200119210346780.png" alt="image-20200119210346780" style="zoom:50%;" />

<h4 id="给npm添加国内镜像源"><a href="#给npm添加国内镜像源" class="headerlink" title="给npm添加国内镜像源"></a>给npm添加国内镜像源</h4><p>由于众所周知的原因，官方源如此缓慢，故使用阿里爸爸的源进行加速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在合适的地方新建一个文件夹，用来存放自己的博客文件。比如我的博客文件都存放在</p>
<p><code>C:\Users\wf09\Desktop\hexo</code></p>
<p>在该目录下右键点击<code>Git Bash Here</code></p>
<img src="https://ftp.fly97.cn/image/image-20200119211049388.png" alt="image-20200119211049388" style="zoom:50%;" />

<p>在git命令行下依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g             <span class="comment">#安装hexo相关组件</span></span><br><span class="line">hexo -v                             <span class="comment">#检查是否安装完成</span></span><br><span class="line">hexo init                           <span class="comment">#初始化hexo博客目录</span></span><br><span class="line">npm install                         <span class="comment">#安装相关依赖</span></span><br><span class="line">npm install hexo-server --save      <span class="comment">#安装hexo服务器模块</span></span><br></pre></td></tr></table></figure>

<p>安装完成后，输入<code>hexo s</code>命令以启动服务器，网站会在 <code>http://localhost:4000</code>下启动。在服务器启动期间，Hexo会监视文件变动并自动更新，无须重启服务器。</p>
<p>可以通过 <code>-p</code> 选项指定其他端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -p 4000</span><br></pre></td></tr></table></figure>

<p>此时打开<code>http://localhost:4000</code>就可以成功启动网站了。</p>
<h3 id="推送到Github-Pages"><a href="#推送到Github-Pages" class="headerlink" title="推送到Github  Pages"></a>推送到Github  Pages</h3><h4 id="链接Github"><a href="#链接Github" class="headerlink" title="链接Github"></a>链接Github</h4><p>右键打开<code>Git Bash</code>，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@your.site&quot;</span></span><br></pre></td></tr></table></figure>

<p>用户名和邮件根据你注册GitHub的信息自行修改。</p>
<p>输入以下命令以生成SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@your.site&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开<a href="https://link.zhihu.com/?target=http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名称任意。</p>
<p><code>Git Bash</code> 中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将输出的内容复制到框中，点击确定保存。</p>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果出现一个警告，输入<code>yes</code>回车并忽略他就好。</p>
<p>如果回车看到：**<user_name > You’ve successfully authenticated, but GitHub does not provide shell access** 。表示已成功连上<code>github</code>。</p>
<h4 id="发布网站在GitHub-Pages"><a href="#发布网站在GitHub-Pages" class="headerlink" title="发布网站在GitHub Pages"></a>发布网站在GitHub Pages</h4><p>打开博客根目录下的<code>_config.yml</code>文件：</p>
<p>找到以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>默认分支是<code>master</code></p>
<p>在博客根目录下打开<code>Git Bash</code>，安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>
<p>打开你的<code>博客根目录\source\_posts</code>，会发现多了一个文件夹和一个markdown文件。文件夹用于存放图片等数据。</p>
<p>写完markdown文件后，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g                   <span class="comment">#生成静态网页</span></span><br><span class="line">hexo s                   <span class="comment">#本地预览效果</span></span><br><span class="line">hexo d                   <span class="comment">#把网页推送到GitHub</span></span><br></pre></td></tr></table></figure>

<p>此时打开你的<code>github.io</code>主页就可以看到发布的文章了。</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析第一章作业</title>
    <url>/p/Chapter-01-of-Numerical-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《数值分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，数值分析</p>
<a id="more"></a>

<p><img src="https://ftp.fly97.cn/image/image-20201013093358782.png" alt="image-20201013093358782"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013102937713.png" alt="image-20201013102937713"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013104909315.png" alt="image-20201013104909315"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013104922645.png" alt="image-20201013104922645"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013104953613.png" alt="image-20201013104953613"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013110136891.png" alt="image-20201013110136891"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201013110806596.png" alt="image-20201013110806596"><br>$$<br>2^{256}=2^{16} \times 2^{16}=[(2^{4})^{2}]^{2}<br>$$</p>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念01</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-01/</url>
    <content><![CDATA[<p>为了理解深度学习，先了解一下机器学习的基本术语。</p>
<a id="more"></a>


<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>机器学习的经典定义：<strong>利用经验改善系统自身的性能。</strong></p>
<p>机器学习所研究的主要内容，是关于在计算机上从数据中产生的模型的算法，即学习算法。有了学习算法，我们把经验数据提供给它，它就能基于这些数据产生模型。在面对新的情况时，模型会给我们相应的判断。</p>
<blockquote>
<p>【Mitchell,1997】给出了一个更形式化的定义：假设用<em>P</em>来评估计算机程序在某任务类<em>T</em>上的性能，若一个程序通过利用经验<em>E</em>在<em>T</em>中任务上获得了性能改善，则我们就说关于<em>T</em>和<em>P</em>，该程序对<em>E</em>进行了学习。</p>
</blockquote>
<p>模型：泛指从数据中学到的结果。有文献用”模型”指全局性结果(例如一颗决策树)，而用”模式”指局部性结果(例如一条规则).</p>
<h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><p>要进行机器学习，首先要有数据。假定收集了一批关于西瓜的数据，例如（色泽=青绿；根蒂=蜷缩；敲声=浊响），（色泽=乌黑；根蒂=稍蜷；敲声=沉闷），（色泽=浅白；根蒂=硬挺；敲声=清脆），······，每对括号内是一条记录，”=”的意思是”取值为”.</p>
<p>记录数据的集合称为一个**”数据集”(data set)<strong>，其中每条记录是关于一个事件和对象的叙述，称为一个</strong>“示例”（instance)或”样本”（sample）**。</p>
<p>反应事件或对象在某方面的表现或者性质的事项，例如”色泽”，”根蒂”，”敲声”，称为**”属性”（attribute)或”特征”（feature）**。</p>
<p>属性上的取值，例如”青绿”，”乌黑”，称为**”属性值”（attribute value）<strong>。属性张成的空间称为</strong>“属性空间”（attribute space）、”样本空间”（sample space）或”输入空间”**。</p>
<p>例如，我们把”色泽”、”根蒂”和”敲声”作为三个坐标轴，则他们张成的一个用于描述西瓜的三维空间，每个西瓜都可在这个空间找到他们自己的坐标位置。由于空间中的每个点对应一个坐标向量，因此也把一个示例称为一个**”特征向量”（feature vector）**。</p>
<p>​    一般地，令$ \small D=\{x_1,x_2,…,x_m\} $表示包含$m$个实例的数据集，每个实例由$d$个属性描述(例如上面的西瓜数据使用了3个属性)，则每个实例$x_i=\{x_{i1},x_{i2},…,x_{id}\}$是$d$维样本空间 $\chi$ 中一个向量，$x_i \in \chi$，其中$x_{ij}$是第$j$个属性上的取值(例如上述第3个西瓜在第二个属性上的属性是”硬挺”)，$d$称为样本$x_i$的**”维数”(dimensionality)**.</p>
<p>​    从数据中学得模型的过程称为**”学习”（learning）<strong>或者</strong>“训练”（training）<strong>，这个过程通过执行某个学习算法来完成。训练过程使用的数据称为</strong>“训练数据”（training data）<strong>，其中每个样本称为一个</strong>“训练样本”（training sample)<strong>，训练样本组成的集合称为</strong>“训练集”（training set）<strong>。学得模型对应了关于数据的某种潜在的规律，因此亦称</strong>“假设”（hypothesis）<strong>；这种潜在规律本身，则称为</strong>“真相”或”真实”(ground-truth)**，学习过程就是为了找出或逼近真相。</p>
<blockquote>
<p>训练样本亦称为”训练示例”（training instance）或者”训练例”。</p>
<p>学习算法通常由参数需要设置，使用不同的参数值和(或)训练数据，将产生不同的结果。</p>
<p>有时将模型称为”学习器”（learner)，可看作学习算法在给定数据和参数空间上的实例化。</p>
</blockquote>
<p>​    如果希望学得一个能够判断没剖开的是不是”好瓜”的模型，仅有前面的示例数据显然是不够的，要建立这样的关于**”预测”（prediction）<strong>的模型，需要获得训练样本的”结果”信息，例如”((色泽=青绿；根蒂=蜷缩；敲声=浊响)，好瓜)”。这里关于实例结果的信息，例如”好瓜”，称为</strong>“标记”（label）<strong>；拥有了标记信息的示例，则成为</strong>“样例”（example)<strong>。一般地，用$(x_i,y_i)$表示第$i$个样例，其中$y_i \in Y$是示例$x_i$的标记，$Y$ 是所有标记的集合，亦称为</strong>“标记空间”(label space)或”输出空间”**。</p>
<p>​    若我们欲预测的是离散值，例如”好瓜”、”坏瓜”，此类任务被称为**”分类”(classification)<strong>；若欲预测的是连续值，例如西瓜成熟度0.95，0.37，此类学习任务称为</strong>“回归”(regression)<strong>。对涉及两个类别的</strong>“二分类”(binary classification)<strong>任务，通常称其中一个类为</strong>“正类”(positive class)<strong>，另一个类称为</strong>“反类”(negative class)<strong>;涉及多个类别时，则成为</strong>“多分类”(multi-class classification)**任务。一般地，预测任务是希望通过对训练集${(x_1,y_1),(x_2,y_2),…,(x_m,y_m)}$进行学习，建立一个从输入空间$X$到输出空间$Y$的映射$f : X \to Y$。对于二分类任务，通常令$Y=\{-1,+1\}$或$\{0,1\}$；对多分类任务，$|Y|&gt;2$；对于回归任务，$Y=R$，$R$为实数集。</p>
<p>​    学得模型后，使用其进行预测的过程称为**”测试”(testing)<strong>，被预测的样本称为</strong>“测试样本”(testing sample)**。例如在学得$f$后，对测试例$x$可得到其预测标记$y=f(x)$。</p>
<p>​    还可以对西瓜做**”聚类”(clustering)<strong>，即将训练集中的西瓜分成若干组，每组称为一个</strong>“簇”（cluster）**；这些自动形成得簇可能对应一些潜在得概念划分，例如”浅色瓜”、”深色瓜”，甚至”本地瓜”、”外地瓜”。这样的学习过程有助于哦我们了解数据内在得规律，能为更深入地分析数据建立基础。需说明的是，在聚类分析中，”浅色瓜，本地瓜”这样得概念我们实现是不知道的，而且学习过程中使用的训练样本通常不拥有标记信息。</p>
<p>​    根据训练数据是否拥有标记信息，学习任务可大致分为两大类：**”监督学习”(supervised learning)<strong>和</strong>“无监督学习”(unsupervised learning)**。分类和回归是监督学习的代表，而聚类是无监督学习的代表。</p>
<p>​    需要注意的是，机器学习的目标是使学得的模型能很好地适用于”新样本”，而不是仅仅在训练样本上工作得很好；即便对聚类这样得无监督学习任务，我们也希望学得簇划分能适用于没在训练集中出现的样本。学得模型适用于新样本的能力，称为**”泛化”(generalization)能力**。具有强泛化能力的模型能够很好的适用于整个样本空间。尽管训练集通常只是样本空间的一个很小的采样，我们仍希望它能很好的反映出样本空间的特性，否则就很难再期望在训练集上学得的模型能在整个样本空间上都工作得很好。</p>
<blockquote>
<p>通常假设样本空间中全体样本服从一个未知**”分布”(distribution)<strong>$\small D$，我们获得的每个样本都是</strong>“独立同分布”(independent and identically distributed，简称$i.i.d$)**。一般而言，训练样本越多，我们得到得关于$D$的信息越多，这样就越有可能通过学习获得具有强泛化能力的模型。</p>
</blockquote>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念02</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-02/</url>
    <content><![CDATA[<p>机器学习中的假设空间。</p>
<a id="more"></a>

<h4 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h4><p>​    <strong>归纳(induction)和演绎(deduction)**是科学推理的两大基本手段。归纳是从特殊到一般的”泛化”(generalization)过程。即从具体的事实归结出一般性规律；演绎则是从一般到特殊的”特化”(specialization)过程，即从基础原理推演出具体状况。例如，在数学公理系统中，基于一组公理和推理规则推导出与之相恰的定理，这是演绎；而”从样例中学习”显然是一个归纳的过程，因此亦称为</strong>“归纳学习”(inductive learning)**</p>
<p>​    归纳学习有狭义和广义之分，广义的归纳学习大体相当于从样例中学习，而狭义的归纳学习则要求从训练数据中学得概念(concept),因此亦称为**”概念学习”或”概念形成”**.概念学习技术目前应用、研究都比较少，因为要学得泛化性能好而且语义明确的概念实在是太难了，现实常用的技术大多数产生”黑箱”模型.然而，对概念学习有所理解，有助于理解机器学习的一些基础思想。</p>
<p>​    概念学习中最基本的是<strong>布尔概念学习</strong>，即对”是””不是”这样的可表示为0/1布尔值的目标概念的学习.举一个简单的例子，假定我们获得了这样的一个训练数据集：</p>
<img src="https://ftp.fly97.cn/image/image-20200806202414852.png" alt="image-20200806202414852" style="zoom:50%;" />

<p>​    这里要学习的目标是”好瓜”，暂且假设”好瓜”可由”色泽””根蒂””敲声”这三个因素完全确定，换言之，只要某个瓜的三个属性取值明确了，我们就能判断出它是不是好瓜，于是，我们学到的将是”好瓜是某种色泽、某种根蒂、某种敲声的瓜”这样的概念，用布尔表达式写出来则是**”好瓜$ \leftrightarrow $(色泽=?)^(根蒂=?)^(敲声=?)”**，这里”?”表示尚未确定的取值，而我们的任务就是通过对上表的训练集进行学习，把”?”确定下来.</p>
<p>​    读者可能马上发现，上表第一行：**”(色泽=青绿)^(根蒂=蜷缩)^(敲声=浊响)”<strong>不就是好瓜吗？是的，但这是一个已见过的瓜，不要忘记学习的目的是</strong>“泛化”<strong>，即通过对训练集中的瓜的学习以获得对没见过瓜进行判断的能力.如果仅仅把训练集中的瓜”记住”，今后再见到一模一样的瓜当然可以判断，但是，对没见过的瓜，例如</strong>“(色泽=浅白)^(根蒂=蜷缩)^(敲声=浊响)”**怎么办呢？</p>
<p>​    我们可以把学习过程看作一个在<strong>所有假设组成的空间</strong>中进行搜索的过程，搜索目标是找到与训练集*<em>“匹配(fit)”<strong>的假设，即能够将训练集中的瓜判断正确的假设.假设的表示一旦确定，假设空间及其规模大小就确定了.这里我们的假设空间由形如</strong>“(色泽=?)^(根蒂=?)^(敲声=?)”**的可能取值所形成的假设组成.例如色泽有”青绿””乌黑””浅白”这三种可能取值；还需考虑到，也许色泽无论取什么值都合适，我们用通配符”</em>“来表示，例如*<em>“好瓜$ \leftrightarrow $(色泽=\</em>)^(根蒂=蜷缩)^(敲声=浊响)”**，即”好瓜是根蒂蜷缩、敲声浊响的瓜，什么色泽都行”.此外，还需要考虑极端情况，有可能”好瓜”这个概念根本不成立，世界上没有”好瓜”这种东西，我们用$ \emptyset $表示这个假设。这样，若”色泽””根蒂””敲声”分别有3、2、2种可能取值，则我们面临的假设空间规模大小为$4 \times 3 \times 3+1=37$.下图直观地显示了这个西瓜空间假设问题。</p>
<blockquote>
<p>这里我们假定训练样本不含噪声，而且不考虑”非青绿”这样的$\not\subset A$操作，由于训练集包含正例，因此$ \emptyset $假设自然不出现。</p>
</blockquote>
<p><img src="https://ftp.fly97.cn/image/image-20200806202019247.png" alt="image-20200806202019247"></p>
<p>​    可以有许多策略对这个假设空间进行搜索，例如自顶向下、从一般到特殊，或是自底向上、从特殊到一般，搜索过程种可以不断删除与正例不一致的假设和(或)与反例一致的假设.最终将会获得**与训练集一致(即对所有训练样本能够进行正确判断)**的假设，这就是我们学习的结果。</p>
<blockquote>
<p>有很多可能的选择，如在路径上自顶向下与自底向上同时进行，在操作上只删除与正例不一致的假设等。</p>
</blockquote>
<p>​    需注意的是，现实问题种我们常面临很大的假设空间，但学习过程是基于有限样本训练集进行的，因此，可能有多个假设与训练集一致，即存在一个<strong>与训练集一致的”假设集合”**，我们称之为</strong>“版本空间”(version space).**例如，在西瓜问题中，与表1.1训练集所对应的版本空间如图1.2所示.</p>
<img src="https://ftp.fly97.cn/image/image-20200806203152041.png" alt="image-20200806203152041"  />]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念03</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-03/</url>
    <content><![CDATA[<p>机器学习中的归纳偏好。</p>
<a id="more"></a>

<h4 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h4><p>通过学习得到的模型对应了假设空间的一个假设，于是，上文中的西瓜版本空间给我们带来了一个麻烦：现在有三个与训练集一致的假设，但与他们对应的模型在面临新样本的时候，却会产生不同的输出。例如，对色泽=青绿；根蒂=蜷缩；敲声=沉闷这个新收来的瓜，如果我们采用的是“好瓜《=》（色泽=<em>）^（敲声=\</em>)”。那么会把新瓜判断为好瓜，而如果采用了另外两个假设，则判断的结果将不是好瓜，那么，应该采用哪一个模型（或假设）呢？</p>
<p>​    若仅有上表中训练样本，则无法断定上述三个假设哪一个“更好”。然而，对于一个具体的学习算法而言，他必须要产生一个模型。这时，学习算法本身的“偏好”就会起到关键的作用。例如，若我们的算法喜欢尽可能特殊的模型，则他会选择“好瓜《=》（色泽=*）^（根蒂=蜷缩）^(敲声=浊响)”；但若我们的算法喜欢“尽可能一般”的模型，并且由于某种原因它更相信“根蒂”，则它会选择“好瓜《=》（色泽=<em>）^（根蒂=蜷缩）^(敲声=\</em>)”，机器学习算法在学习过程中对某种类型假设的偏好，称为“归纳偏好”(inductive bias)，或称为“偏好”。</p>
<blockquote>
<p>尽可能特殊即“适用情况尽可能少”；尽可能一般即“使用情况尽可能多”。</p>
<p>对“根蒂”还是对“敲声”更重视，看起来和属性选择，亦称为“特征选择”(feature selection)有关，但需注意的是，机器学习中的特征选择仍是基于对训练样本的模型的分析进行的，而在此处我们并非基于特征选择做出对根蒂的重视；这里对“根蒂”的信赖可视为基于某种领域的知识而产生的归纳偏好关于特征选择方面的内容可以参加后续的更新。</p>
</blockquote>
<p>任何一个有效的机器学习算法未必有其归纳偏好，否则它将被假设空间中看似在训练集上“等效”的假设所迷惑，而无法产生确定的学习结果。可以想象，如果没有偏好，我们的西瓜学习算法产生的模型每次在进行预测时随机抽选训练集上的等效假设，那么对这个新瓜————–学得模型时而告诉我们他是好的，时而告诉我们他是不好的，这样的学习结果显然没有意义。</p>
<p>归纳偏好的作用在图1.3这个回归学习图示中可能更直观，这里的每个训练样本是图中的一个点(x,y)，要学得一个与训练集一致的模型，相当于找到一条穿过所有训练样本点的曲线。显然，对有限个样本点组成的训练集，存在着很多条曲线与其一致，我们的学习算法必须有某种偏好，才能产出它认为”正确”的模型。例如，若认为相似的样本应有相似的输出(例如，在各种属性上都很像的西瓜，成熟程度应该比较接近)，则对应的学习算法可能偏好图1.3中比较“平滑”的曲线$A$而不是比较“崎岖”的曲线$B$.</p>
<p>归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或”价值观”.那么，有没有一般性的原则来引导算法确立“正确的”偏好呢？<strong>“奥卡姆剃刀”（Occam’s razor)**是一种常用的、自然科学研究中最基本的原则，即</strong>“若有若干个假设与观察一致，则选最简单的那个”**.如果采用这个原则，并且假设我们认为“更平滑”意味着“更简单”(例如曲线A更容易描述，其方程式是$y = -x_2+6x+1$，而曲线$B$则要复杂得多)，则在图1.3中我们会自然地偏好“平滑”的曲线$A$.</p>
<p>然而，奥卡姆剃刀并非唯一可行的原则，退一步说，即便假定我们是奥卡姆剃刀的铁杆拥簇，也需注意到，奥卡姆剃刀本身存在不同的诠释，使用奥卡姆剃刀原则并不平凡。例如对我们已经很熟悉的西瓜问题来说，“假设1：好瓜&lt;-&gt;(色泽=*)^(根蒂=蜷缩)^(敲声=浊响)”和“假设2：好瓜&lt;-&gt;(色泽=*)^(根蒂=蜷缩)^(敲声=*)”这两个假设，哪一个更“简单”呢？这个问题并不简单，需要借助其他机制才能解决.</p>
<p>事实上，归纳偏好对应了学习算法本身所作出的关于”什么样的模型更好”的假设.在具体的实现问题中，这个假设是否成立，即算法的归纳偏好是否与问题匹配，大多数时候直接决定了算法能否取得好的性能.</p>
<p>继续回头看图1.3，假设学习算法$\mathcal{L}$</p>
<p><strong>未完待续…..</strong></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习常见损失函数</title>
    <url>/p/common-loss-functions-for-deep-learning/</url>
    <content><![CDATA[<p>我们所说的优化，即优化网络权值使得损失函数值变小。但是，损失函数值变小是否能代表模型的分类/回归精度变高呢？那么多种损失函数，应该如何选择呢？</p>
<a id="more"></a>



<h4 id="L1范数损失-L1Loss"><a href="#L1范数损失-L1Loss" class="headerlink" title="L1范数损失  L1Loss"></a>L1范数损失  L1Loss</h4><p>功能： 计算 output 和 target 之差的绝对值，可选返回同维度的tensor或者是一个标量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="均方损失误差-MESLoss"><a href="#均方损失误差-MESLoss" class="headerlink" title="均方损失误差 MESLoss"></a>均方损失误差 MESLoss</h4><p>功能： 计算 output 和 target 之差的平方，可选返回同维度的tensor或者是一个标量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="交叉熵损失-CrossEntropyLoss"><a href="#交叉熵损失-CrossEntropyLoss" class="headerlink" title="交叉熵损失 CrossEntropyLoss"></a>交叉熵损失 CrossEntropyLoss</h4><p>功能： 将输入经过 softmax 激活函数之后，再计算其与 target 的交叉熵损失。即该方法将 nn.LogSoftmax() 和 nn.NLLLoss() 进行了结合。严格意义上的交叉熵损失函数应该是 nn.NLLLoss()。</p>
<p>当训练有 C 个类别的分类问题时很有效，可选参数<code>weight</code>必须是一个1维<code>Tensor</code>，权重将被分配给各个类别。对于不平衡的训练集非常有效。</p>
<p>在多分类任务中，经常采用 softmax 激活函数+交叉熵损失函数。因为交叉熵描述了两个<strong>概率分布</strong>的差异，然而神经网络输出的是向量，并不是概率分布的形式。所以需要 softmax 激活函数将一个向量进行“归一化”成概率分布的形式，再采用交叉熵损失函数计算 loss.<br>$$<br>loss(x,class)=weight[class]\left(-x[class]+log \left(\sum_{j}^{}exp(x[    j])\right)\right)<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.CrossEntropyLoss(weight=<span class="literal">None</span>,ignore_index=<span class="number">-100</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个类别的权重. 必须是一个长度为 C 的 Tensor</p>
<p>ignore_index (int, optional) – 设置一个目标值, 该目标值会被忽略, 从而不会影响到 输入的梯度。</p>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="KL散度损失-KLDivLoss"><a href="#KL散度损失-KLDivLoss" class="headerlink" title="KL散度损失 KLDivLoss"></a>KL散度损失 KLDivLoss</h4><p>功能：计算 input 和 target 之间的 KL 散度。KL散度可用于衡量不同的连续分布之间的距离，在连续的输出分布的空间上(离散采样)上进行直接回归时<strong>很有效</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.KLDivLoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<blockquote>
<p>补充：KL散度 KL散度( Kullback–Leibler divergence) 又称为相对熵(Relative Entropy)，用于描述两个概率分布之间的差异。计算公式(离散时)：</p>
<p>其中p表示真实分布，q表示p的拟合分布， D(P||Q)表示当用概率分布q来拟合真实分布p时，产生的信息损耗。这里的信息损耗，可以理解为损失，损失越低，拟合分布q越接近真实分布p。同时也可以从另外一个角度上观察这个公式，即计算的是 p 与 q 之间的对数差在 p 上的期望值。 特别注意，D(p||q) ≠ D(q||p)， 其不具有对称性，因此不能称为K-L距离。</p>
<p><strong>信息熵 = 交叉熵 - 相对熵</strong> 从信息论角度观察三者，其关系为信息熵 = 交叉熵 - 相对熵。在机器学习中，当训练数据固定，最小化相对熵 D(p||q) 等价于最小化交叉熵 H(p,q) 。</p>
</blockquote>
<p>使用注意事项： 要想获得真正的KL散度，需要如下操作：</p>
<ol>
<li><p>reduce = True ；size_average=False</p>
</li>
<li><p>计算得到的 loss 要对 batch 进行求平均</p>
</li>
</ol>
<h4 id="二进制交叉熵损失-BCELoss"><a href="#二进制交叉熵损失-BCELoss" class="headerlink" title="二进制交叉熵损失 BCELoss"></a>二进制交叉熵损失 BCELoss</h4><p>功能： 二分类任务时的交叉熵计算函数。此函数可以认为是nn.CrossEntropyLoss函数的特例。其分类限定为二分类，y必须是{0,1}。还需要注意的是，input应该为概率分布的形式，这样才符合交叉熵的应用。所以在BCELoss之前，input一般为sigmoid激活层的输出。该损失函数在自编码器中常用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.BCELoss(weight=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个 batch 元素的 loss 的权重. 必须是一个长度为 “nbatch” 的 的 Tensor</p>
</blockquote>
<h4 id="BCEWithLogitsLoss"><a href="#BCEWithLogitsLoss" class="headerlink" title="BCEWithLogitsLoss"></a>BCEWithLogitsLoss</h4><p>功能： 将Sigmoid与BCELoss结合，类似于CrossEntropyLoss(将nn.LogSoftmax()和 nn.NLLLoss()进行结合）。即input会经过Sigmoid激活函数，将input变成概率分布的形式。 计算公式：    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.BCEWithLogitsLoss(weight=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>, pos_weight=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个 batch 元素的 loss 的权重. 必须是一个长度 为 “nbatch” 的 Tensor</p>
</blockquote>
<h4 id="MarginRankingLoss"><a href="#MarginRankingLoss" class="headerlink" title="MarginRankingLoss"></a>MarginRankingLoss</h4><p>功能： 计算两个向量之间的相似度，当两个向量之间的距离大于margin，则loss为正，小于margin，loss为0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.MarginRankingLoss(margin=<span class="number">0.0</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>对于 mini-batch (小批量) 中每个实例的损失函数如下：<br>$$<br>loss(x,y)=max(0,-y*(x1-x2)+margin)<br>$$<br>参数：</p>
<blockquote>
<p>margin：默认值是0</p>
</blockquote>
<h4 id="HingeEmbeddingLoss"><a href="#HingeEmbeddingLoss" class="headerlink" title="HingeEmbeddingLoss"></a>HingeEmbeddingLoss</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.HingeEmbeddingLoss(margin=<span class="number">1.0</span>,  reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>功能： 未知。主要用于衡量两个输入是否相似。 used for learning nonlinear embeddings or semi-supervised 。</p>
<p>转载自：<a href="https://zhuanlan.zhihu.com/p/61379965">https://zhuanlan.zhihu.com/p/61379965</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>现代信号分析第二章作业</title>
    <url>/p/Chapter-01-of-Modern-Signal-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，现代信号分析</p>
<a id="more"></a>

<p><img src="https://ftp.fly97.cn/image/image-20200928193703316.png" alt="image-20200928193703316"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203228683.png" alt="image-20201011203228683"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203330808.png" alt="image-20201011203330808"></p>
<p><img src="https://ftp.fly97.cn/image/image-20200928193714036.png" alt="image-20200928193714036"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203626045.png" alt="image-20201011203626045"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203639917.png" alt="image-20201011203639917"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203658032.png" alt="image-20201011203658032"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203716172.png" alt="image-20201011203716172"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203748238.png" alt="image-20201011203748238"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203823320.png" alt="image-20201011203823320"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203917101.png" alt="image-20201011203917101"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011203848593.png" alt="image-20201011203848593"></p>
<p><img src="https://ftp.fly97.cn/image/image-20200928193737091.png" alt="image-20200928193737091"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204004991.png" alt="image-20201011204004991"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204054961.png" alt="image-20201011204054961"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204157647.png" alt="image-20201011204157647"></p>
<p><img src="https://ftp.fly97.cn/image/image-20200928193754540.png" alt="image-20200928193754540"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204330872.png" alt="image-20201011204330872"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204359072.png" alt="image-20201011204359072"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201011204438075.png" alt="image-20201011204438075"></p>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>现代信号分析第四章作业</title>
    <url>/p/Chapter-02-of-Modern-Signal-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，现代信号分析</p>
<a id="more"></a>

<p><img src="https://ftp.fly97.cn/image/image-20201012134854422.png" alt="image-20201012134854422"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012135051489.png" alt="image-20201012135051489"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012135105822.png" alt="image-20201012135105822"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012135149144.png" alt="image-20201012135149144"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012140126858.png" alt="image-20201012140126858"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012140338034.png" alt="image-20201012140338034"></p>
<p><img src="https://ftp.fly97.cn/image/image-20201012141112290.png" alt="image-20201012141112290"></p>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次重装系统</title>
    <url>/p/index/</url>
    <content><![CDATA[<p>本文主要介绍了如何使用U盘进行重装系统，主要面向电脑小白用户。</p>
<p><strong>关键字</strong>：重装win10，电脑重装</p>
<a id="more"></a>

<p><strong><font color="red">对重装系统过程有疑问的小伙伴可以点击右下角对话窗口联系我！切勿自己胡乱操作以免造成数据损失！</font></strong></p>
<p><strong>下载链接有时间和流量限制，不定期开放！若链接过期请自行寻找下载链接！</strong></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>大于<strong>8G</strong>的U盘</li>
<li>微PE，<a href="https://ftp.fly97.cn/file/wepe_64.exe">点击此处下载</a></li>
<li>Windows 10 1909原版系统镜像，<a href="https://ftp.fly97.cn/file/cn_windows_10_business_editions_version_1909_updated_april_2020_x64_dvd_5d3fcf2e.iso">点击此处下载</a></li>
</ol>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>制作系统盘期间需要格式化U盘，如有需要请先备份U盘的文件。</p>
<h4 id="打开微PE工具箱"><a href="#打开微PE工具箱" class="headerlink" title="打开微PE工具箱"></a>打开微PE工具箱</h4><p>双击打开即可。</p>
<p><img src="https://ftp.fly97.cn/image/20200826101947.png"></p>
<h4 id="选择其他安装方式"><a href="#选择其他安装方式" class="headerlink" title="选择其他安装方式"></a>选择其他安装方式</h4><p>注意不要点击<strong>立即安装进系统</strong></p>
<p><img src="https://ftp.fly97.cn/image/20200826102028.png"></p>
<h4 id="选择安装PE进U盘"><a href="#选择安装PE进U盘" class="headerlink" title="选择安装PE进U盘"></a>选择安装PE进U盘</h4><p>注意待写入U盘<strong>盘符、容量</strong>是不是正确，安装方法默认即可。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102211.png"></p>
<h4 id="等待安装完毕"><a href="#等待安装完毕" class="headerlink" title="等待安装完毕"></a>等待安装完毕</h4><p><img src="https://ftp.fly97.cn/image/20200826102242.png"></p>
<p>稍后片刻，安装速度视U盘写入速度决定，建议安装过程中<strong>不要操作电脑</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102535.png"></p>
<h4 id="检查启动盘是否制作成功"><a href="#检查启动盘是否制作成功" class="headerlink" title="检查启动盘是否制作成功"></a>检查启动盘是否制作成功</h4><p>安装完毕后，打开<strong>此电脑</strong>，如果发现多了两个盘符，则视为完整成功。</p>
<p>如果没有发现多余的盘符，重新插拔U盘后再尝试查看。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102652.png"></p>
<h4 id="将下载的镜像复制进U盘"><a href="#将下载的镜像复制进U盘" class="headerlink" title="将下载的镜像复制进U盘"></a>将下载的镜像复制进U盘</h4><p>切记切记！复制文件的速度视U盘读写速度决定，请耐心等待。</p>
<h3 id="切换到Windows-PE"><a href="#切换到Windows-PE" class="headerlink" title="切换到Windows PE"></a>切换到Windows PE</h3><p>将U盘插入电脑并重启电脑，切换到Windows PE系统。</p>
<p>大多数的电脑都提供了启动选项菜单，开机的时候按住对应的快捷键即可进入启动选择界面。</p>
<p>重启时，电脑亮屏后立马按下对应的快捷键。</p>
<p><img src="https://ftp.fly97.cn/image/1281268-20190308133836366-1665479547.jpg"></p>
<p>如果电脑键盘还有Fn键，且重启过程单独按下<strong>快捷键</strong>无效，那么可以尝试按下<strong>Fn键+快捷键</strong>，反复尝试几次。</p>
<h4 id="选择U盘启动"><a href="#选择U盘启动" class="headerlink" title="选择U盘启动"></a>选择U盘启动</h4><p>使用键盘的上下进行选择，然后敲回车。这里以<strong>Shinelon</strong>笔记本为例。这款笔记本的启动项选择的快捷键是<strong>F7</strong>.</p>
<p>不同品牌的笔记本启动项选择的界面可能不同，但都<strong>大同小异</strong>。</p>
<p>选择<strong>已经写入好PE</strong>的U盘，如下图所示。<img src="https://ftp.fly97.cn/image/photo_2020-08-27_16-18-31.jpg"></p>
<h4 id="进入PE系统"><a href="#进入PE系统" class="headerlink" title="进入PE系统"></a>进入PE系统</h4><p>如果上述操作没有问题，会出现一个<strong>Windows Boot Mananger</strong>的选择界面，选择第一项即可。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-27_16-18-35.jpg"></p>
<p>进入PE以后的界面，如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-06-55.png"></p>
<h4 id="进行磁盘分区"><a href="#进行磁盘分区" class="headerlink" title="进行磁盘分区"></a>进行磁盘分区</h4><p><strong><em>注意：如果不需要改变磁盘分区的大小，只想格式化原有的系统盘并安装全新的系统，此步可以跳过！直接跳转到下一步安装全新系统！强烈建议小白跳过此步！</em></strong></p>
<p>打开上图所示的<strong>分区助手</strong>，找到你要安装的磁盘，如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-07-46.png"></p>
<p><em>操作到这里要注意：</em></p>
<ol>
<li>如果你的电脑只有一个磁盘，继续操作会丢失<strong>全部硬盘</strong>的数据！切记切记！</li>
<li>如果你的电脑和我一样有多个磁盘，请选中你要安装系统的磁盘。继续操作会丢失<strong>以前系统盘</strong>的数据！</li>
</ol>
<p>进行<strong>磁盘分区</strong>是为了便于磁盘管理，和磁盘的个数无关。</p>
<ol>
<li>如果你的电脑只有一个磁盘，接下来进行的<strong>快捷分区操作</strong>你可以选择<u>多分出几个分区</u>，重装完毕后打开此电脑，你选了几个分区就会看到有几个盘。</li>
<li>如果你的电脑和我一样有多个磁盘，建议将要安装系统的磁盘<u>全部分成一个区</u>，这样后期不会因为C盘容量较小而影响系统正常运行。具体参照以下步骤。</li>
</ol>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-06.png"></p>
<p>注意，如果你的电脑有多个磁盘，请不要选错。分区数目视个人情况决定，多磁盘建议<strong>一个分区</strong>。磁盘的类型请选择<strong>GPT</strong>，注意勾选<strong>重建MBR</strong>、<strong>创建ESP和MSR分区</strong>。如果你的系统盘是<strong>固态硬盘</strong>，请<strong>勾选分区对其到4096扇区</strong>。</p>
<p>一般来说，如果你的电脑有多个磁盘，那么一个是<strong>传统的机械硬盘</strong>，一个是固态硬盘。固态硬盘的读写速度要比机械硬盘的读写速度要快得多。所以一般将固态硬盘安装成系统盘。</p>
<p>点击开始执行，进行系统分区。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-48.png"></p>
<p><strong><em>执行过程中请勿操作电脑！否则有可能对磁盘造成不可逆的损害！等待执行完毕。</em></strong></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-53.png"></p>
<p>执行完毕后的新磁盘，如下图所示：</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-10-15.png"></p>
<p>可以看到，磁盘已经被清空，且只有一个<strong>系统</strong>分区。</p>
<h4 id="还原系统镜像"><a href="#还原系统镜像" class="headerlink" title="还原系统镜像"></a>还原系统镜像</h4><p>此步是重装系统的核心步骤，主要就是将全新的系统还原到系统盘中。</p>
<p>打开PE系统桌面的<strong>CGI备份还原</strong>，如图所示：</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-11-47.png"></p>
<p>选择<strong>还原分区</strong>，一般来说，分区会默认选择好。通过<strong>盘符</strong>、<strong>可用空间</strong>和<strong>卷标</strong>来判断是不是系统盘。</p>
<p>镜像文件选择已经移动到U盘里的ISO文件，并选择<u>Windows 10 Pro</u> 即 <u>Windows10专业版</u> 的镜像。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-12-18.png"></p>
<p>点击执行，选中<strong>不保留目标分区的文件</strong>。最后点击确定。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-12-41.png"></p>
<p><strong><em>等待执行完毕，进度条大概会走三次，执行过程中请勿操作电脑！</em></strong></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-13-24.png"></p>
<p>执行完毕后，请自行重启。点击<strong>开始</strong> ==&gt; <strong>重启</strong>。电脑黑屏以后可以将U盘拔出，以免下次启动再进入U盘的PE系统。</p>
<h4 id="进入新系统"><a href="#进入新系统" class="headerlink" title="进入新系统"></a>进入新系统</h4><p>重启过程可能比较慢。请耐心等待。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-39-49.jpg"></p>
<p>海内存知己，天涯若比邻。无为在歧路，儿女共沾巾。</p>
<p>出自唐代诗人王勃《送杜少府之任蜀州》</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-30.jpg"></p>
<p>接下来是设置区域。默认帮你选好中国。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-32.jpg"></p>
<p>然后是设置网络。这里推荐设置，连接网络以后Win 10 可以帮你安装<strong>硬件设备的驱动</strong>。<strong>没有硬件驱动的电脑显卡，声卡，以及其他设备可能无法正常工作。</strong>由于个人网络原因这里选择不连接。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-35.jpg"></p>
<p>再次推荐你连接到网络。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-43.jpg"></p>
<p>接受许可协议。不接受无法继续安装23333</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-46.jpg"></p>
<p>设置用户名。这里推荐设置英文的用户名，以免安装一些软件时出现一些莫名其妙的问题。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-48.jpg"></p>
<p>接下来是设置密码。可以留空。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-55.jpg"></p>
<p>选择隐私设置。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-58.jpg"></p>
<p>继续下一步。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-44-01.jpg"></p>
<p>设置微软个人助理小娜。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-44-09.jpg"></p>
<p>耐心等待。这是最后一步了。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-47.jpg"></p>
<p>即将完成。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-50.jpg"></p>
<p>熟悉的Windows 窗口又回来了！</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-52.jpg"></p>
<p>至此，系统安装已经完成。后续还有<strong>激活系统，安装office办公软件</strong>等其他操作。</p>
<h3 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h3><h4 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h4><p>激活软件：<a href="https://ftp.fly97.cn/file/HWIDGen_CN.exe">点此下载</a></p>
<p>打开激活软件，需要<strong>连接网络</strong>。点击<strong>数字激活</strong>。稍后片刻提示激活成功。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-47-49.png"></p>
<p>接下来是还原<strong>此电脑，控制面板等一系列图标</strong></p>
<p>单机<strong>桌面</strong> ==&gt; <strong>个性化</strong>，找到<strong>主题</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-43-21.png"></p>
<p>下拉菜单，选择桌面光标设置</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-44-11.png"></p>
<p>根据需要找回桌面图标。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-44-43.png"></p>
<p>回到<strong>桌面</strong>，右击<strong>此电脑</strong>，找到<strong>属性</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-46-28.png"></p>
<p>这里提示，此电脑已激活。此项激活是永久激活。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-46-56.png"></p>
<p>激活系统的步骤到此结束。</p>
<h4 id="安装office-2019-办公软件"><a href="#安装office-2019-办公软件" class="headerlink" title="安装office 2019 办公软件"></a>安装office 2019 办公软件</h4><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><p>下载地址：<a href="https://ftp.fly97.cn/file/proplus2019retail.img">点此下载</a></p>
<h5 id="安装office"><a href="#安装office" class="headerlink" title="安装office"></a>安装office</h5><p>右键下载好的镜像，选择<strong>装载</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185027426.png">)</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185124252.png"></p>
<p>打开<strong>此电脑</strong>，此时会发现已经多出来一个<strong>DVD驱动器</strong>，如图所示。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185325374.png" alt="image-20200903185325374"></p>
<p>双击打开，点击<strong>setup.exe</strong>，开始安装。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185504419.png"></p>
<p>注意：如果不想安装office的全部组件，只想安装诸如<strong>word、excel、powerpoint</strong>等核心组件，请参考以下步骤：</p>
<h6 id="下载辅助安装软件"><a href="#下载辅助安装软件" class="headerlink" title="下载辅助安装软件"></a>下载辅助安装软件</h6><p>Office Tool v7.6：<a href="https://ftp.fly97.cn/file/Office-Tool-v7.6.zip">点击下载</a></p>
<h6 id="双击运行"><a href="#双击运行" class="headerlink" title="双击运行"></a>双击运行</h6><p>该软件无需安装，双击打开即可。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903190222874.png"></p>
<h6 id="开始部署office"><a href="#开始部署office" class="headerlink" title="开始部署office"></a>开始部署office</h6><p>点击部署，进入部署选择菜单</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-31-44.png"></p>
<p>选择<strong>已经挂载好的DVD驱动器</strong>，打开<strong>Office ==&gt; Data</strong>文件夹，选中<strong>v64</strong>，点击打开。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-32-45.png"></p>
<p>架构选择<strong>x64</strong>，安装方式为离线安装，安装模块为office部署工具。根据自身需要安装所需要的office应用程序。这里以<strong>Excel、PowerPoint和Word</strong>为例。最后点击开始部署。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-35-09.png"></p>
<h5 id="等待安装完毕-1"><a href="#等待安装完毕-1" class="headerlink" title="等待安装完毕"></a>等待安装完毕</h5><p>耐心等待即可。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-35-28.png"></p>
<h5 id="安装完毕"><a href="#安装完毕" class="headerlink" title="安装完毕"></a>安装完毕</h5><p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-37-09.png"></p>
<h5 id="使用KMS密钥管理服务激活office"><a href="#使用KMS密钥管理服务激活office" class="headerlink" title="使用KMS密钥管理服务激活office"></a>使用KMS密钥管理服务激活office</h5><p>打开上文提到的辅助安装工具，进入激活选择菜单。</p>
<p>许可证管理选项中，选择<strong>Office 2019 Volume</strong>，点击安装许可证。**<em>出现产品密钥安装成功则已安装完毕。**</em></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-50-20.png"></p>
<p>KMS管理选项中，输入<strong>windows.kms.app</strong>，检测KMS可用性。</p>
<p>右侧出现<strong>successful</strong>则说明这个kms服务器是可用的。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-50-40.png"></p>
<p>点击激活，最后出现<strong>产品激活成功</strong>。到此激活完毕。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-51-19.png"></p>
<p>使用密钥管理服务激活office，每次激活成功以后可以使用180天，180天以后自动重新激活，只要<strong>KMS激活服务器</strong>还在生效就可以一直续期。可以实现<strong>永久激活</strong>。</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的自动求导机制和计算图</title>
    <url>/p/automatic-derivation-mechanism-and-calculation-graph-in-PyTorch/</url>
    <content><![CDATA[<p>本文介绍了 PyTorch 的自动求导机制和计算图。</p>
<p><strong>摘要</strong>：深度学习的算法本质是通过反向传播求导数，PyTorch 的 <code>Autograd</code>模块实现了此功能。在 Tensor 上的所有操作，<code>Autograd</code>都能为他们自动提供微分，避免手动求导的复杂过程。</p>
<p><strong>关键字</strong>：PyTorch，自动求导，计算图</p>
<a id="more"></a>

<p>PyTorch会根据计算过程来自动生成动态图，然后根据动态图的创建过程进行反向传播，计算得到每个节点的梯度值。为了能够记录张量的梯度，首先需要在创建张量的时候设置一个参数<code>requires_grad=True</code>，意味着这个张量将会加入到计算图中，作为计算图的叶子节点参与计算通过一系列的计算最后输出结果张量，也就是根节点。几乎所有的张量创建方式都可以指定这个参数，一旦指定了这个参数，在后续的计算中得到的中间结果的张量都会被设置成<code>requires_grad=True</code>。对于PyTorch 来说，每一个张量都有一个<code>grad_fn</code>方法，这个方法包含创建该张量的运算的导数信息。在反向传播过程中，通过传入后一层的神经网络的梯度，该函数会计算出参与运算的所有张量的梯度，<code>grad_fn</code>本身也携带着计算图的信息，该方法本身有一个<code>next_functions</code>属性，包含连接该张量的其他张量的<code>grad_fn</code>。通过不断反向传播回溯中间张量的计算节点，可以得到所有张量的梯度。一个张量的梯度张量的信息保存在该张量的grad属性中。</p>
<p>除 PyTorch 张量本身外，PyTorch提供了一个专门用来自动求导的包，即<code>torch.autograd</code>.它包含了两个重要的函数，即<code>torch.autograd.backward</code>函数和<code>torch.autograd.grad</code>函数。</p>
<p><code>torch.autograd.backward</code>函数通过传入根节点张量，以及起始梯度张量(形状和当前张量的相同)，可以计算产生该根节点所有对应的叶子节点的梯度。当张量为标量张量(即只有一个元素的张量)时，可以不传入起始梯度张量，默认会设置初始梯度张量为1。当计算梯度张量时，原来建立起来的计算图会自动被释放，如果需要再次做自动求导，因为计算图会被自动释放，如果需要再次做自动求导，因为计算图已经不存在，就会报错。如果要在反向传播的时候保留计算图，可以设置<code>retain_graph=True</code>。另外，在自动求导的时候默认不会建立反向传播的计算图(反向传播也是一个计算过程，可以动态创建计算图)，如果需要在反向传播计算的同时建立和梯度张量有关的计算图(在某些情况下，如需要计算高阶导数的情况下，不过这种情况比较少)，可以设置<code>creat_graph=True</code>。对于一个可求导的张量，也可以直接调用该张量内部的<code>backward</code>方法来进行自动求导。</p>
<h2 id="自动求导机制实例"><a href="#自动求导机制实例" class="headerlink" title="自动求导机制实例"></a>自动求导机制实例</h2><p>下面举一个简单的例子来说明自动求导是如何使用的。根据高等数学的知识可知，若定义一个函数$f(x)=x^2$，则它的导数$f(x)=2x$。于是可以创建一个可求导的张量来测试具体的导数。具体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">t1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-0.6704,  1.1710,  0.7608],</span></span><br><span class="line"><span class="string">        [ 1.2378, -0.5393, -0.9865],</span></span><br><span class="line"><span class="string">        [ 0.2863,  0.5295, -0.4555]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum() </span><br><span class="line">t2.backward(retain_graph=<span class="literal">True</span>) <span class="comment">#梯度反向传播</span></span><br><span class="line">t1.grad <span class="comment">#梯度是张量原始分量的2倍</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;tensor([[-1.3407,  2.3419,  1.5216],</span></span><br><span class="line"><span class="string">        [ 2.4756, -1.0786, -1.9729],</span></span><br><span class="line"><span class="string">        [ 0.5725,  1.0589, -0.9110]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum()  <span class="comment">#再次计算张量的所有分量平方和</span></span><br><span class="line">t2.backward() <span class="comment"># 梯度再次反向传播</span></span><br><span class="line">t1.grad <span class="comment">#梯度累积</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-2.1156, -1.1415,  7.4562],</span></span><br><span class="line"><span class="string">        [ 0.0900, -4.8776, -0.5413],</span></span><br><span class="line"><span class="string">        [-8.0727, -0.1184, -6.8779]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.grad.zero_() <span class="comment">#梯度清零</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的一点是，张量绑定的梯度张量在不清空的情况下会逐渐累积。这种特性在某些情况下是有用的，比如，需要一次性求很多迷你批次的累计梯度，但在一般情况下，不需要用到这个特性，所以要注意将张量的梯度清零。</p>
<h2 id="梯度函数的使用"><a href="#梯度函数的使用" class="headerlink" title="梯度函数的使用"></a>梯度函数的使用</h2><p>在某些情况下，不需要求出当前张量对所有产生该张量的叶子节点的梯度，此时可以用<code>torch.autograd.grad</code>函数，这个函数的参数是两个张量，第一个张量是计算图的数据结果张量(或是张量列表)，第二个张量是需要对计算图求导的张量(或张量列表)。最后输出的结果是第一个张量对第二个张量求导的结果(注意梯度会累积，和前面介绍的<code>torch.autograd.backward</code>函数的行为一样)。<strong>需要注意的是</strong>，这个函数不会改变叶子节点的grad属性。而函数<code>torch.autograd.backward</code>会设置叶子节点的grad属性为最后求出梯度张量。<code>torch.autograd.grad</code>会在反向传播求导时释放计算图，如果需要保留计算图，同样可以设置<code>retain_graph=True</code>.如果需要反向传播的计算图，可以设置<code>create_graph=True</code>.</p>
<p>另外，有时候会碰到一种情况是求导的两个张量之间在计算图上没有关联，在这种情况下函数会报错，如果不需要函数的报错行为，可以设置allow_unused=True这个参数，结果会返回分量全为0的梯度张量(因为两个张量没有关联，所以求导的梯度为0).</p>
<p>具体的使用方法可以参考以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) <span class="comment">#初始化t1张量</span></span><br><span class="line">t1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-0.1082, -1.0099, -0.4560],</span></span><br><span class="line"><span class="string">        [-0.3910, -0.9767,  0.6419],</span></span><br><span class="line"><span class="string">        [ 1.1544,  0.3572, -1.3304]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum() <span class="comment">#根据t1张量求t2张量</span></span><br><span class="line">t.autograd.grad(t2, t1) <span class="comment"># t2张量对t1张量求导</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(tensor([[-0.2165, -2.0197, -0.9120],</span></span><br><span class="line"><span class="string">         [-0.7820, -1.9535,  1.2837],</span></span><br><span class="line"><span class="string">         [ 2.3088,  0.7145, -2.6608]]),)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算图的构建的启用和禁用"><a href="#计算图的构建的启用和禁用" class="headerlink" title="计算图的构建的启用和禁用"></a>计算图的构建的启用和禁用</h2><p>由于计算图的构建需要消耗内存和计算资源，在一些情况下，计算图并不是必要的，比如<strong>神经网络的推导</strong>。在这种情况下，可以使用<code>torch.no_grad</code>上下文管理器，在这个上下文管理器的作用域内进行的神经网络计算不会构建任何计算图。</p>
<p>另外，还有一种情况是对于一个张量，我们在反向传播的时候可能不需要让梯度通过这个张量的节点，也就是新建的计算图要和原来的计算图分离。在这种情况下，可以使用张量的<code>detach</code>方法，通过调用这个方法，可以返回一个新的张量，该张量会成为一个新的计算图的叶子节点，新的计算图和老的计算图互相分离，互不影响。具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">t2 = t1.sum()</span><br><span class="line"></span><br><span class="line">t2   <span class="comment">#t2的计算构建了计算图，输出结果带有grad_fn</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> tensor(2.2761, grad_fn=&lt;SumBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> t.no_grad():</span><br><span class="line">    t3 = t1.sum()</span><br><span class="line">    </span><br><span class="line">t3  <span class="comment">#t3的计算没有构建计算图，输出结果没有grad_fn</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.2761)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.sum()   <span class="comment">#保持原来的计算图</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.2761, grad_fn=&lt;SumBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.sum().detach()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> tensor(2.2761)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p>如果我们需要计算某个Tensor的导数，那么我们需要设置其<code>requires_grad=True</code>.</p>
<p>Tensor包含以下属性：</p>
<ul>
<li><code>grad</code>：保存tensor的梯度，形状与Tensor一致。每次在计算backward时都需要将前一时刻的梯度归零，否则梯度值会一直累加。</li>
<li><code>grad_fn</code>：指向一个Function，记录Tensor的操作历史，即它是什么操作的输出，用来构建计算图。如果某一个变量是由用户创建的，则他为<strong>叶子节点</strong>，对应的<code>grad_fn</code>等于<code>None</code>。只有<strong>根节点</strong>的<code>grad_fn</code>才有效，用于指示梯度函数是哪种类型。</li>
<li><code>is_leaf</code>: 用来指示该Tensor是否是叶子节点。</li>
<li><code>requires_grad</code>: 设置为<code>True</code>则表示该Tensor需要求导</li>
</ul>
<p>通过几个例子来了解一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">a = t.ones(<span class="number">3</span>, <span class="number">4</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">b = t.zeros(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[0., 0., 0., 0.],</span></span><br><span class="line"><span class="string">        [0., 0., 0., 0.],</span></span><br><span class="line"><span class="string">        [0., 0., 0., 0.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 张量加法</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">c</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">c = a.add(b)</span><br><span class="line">c</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">d = c.sum()</span><br><span class="line">d.backward() <span class="comment"># 反向传播</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意两者的区别</span></span><br><span class="line">c.data.sum(), c.sum()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(tensor(12.), tensor(12., grad_fn=&lt;SumBackward0&gt;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a.grad</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 此处虽然没有指定c需要求导，但c依赖于a，a需要求导</span></span><br><span class="line"><span class="comment"># 因此c的requires_grad属性会自动设为True</span></span><br><span class="line">a.requires_grad, b.requires_grad, c.requires_grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;(True, False, True)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由用户创建的 tensor 属于叶子节点，对应的grad_fn是None</span></span><br><span class="line">a.is_leaf, b.is_leaf, c.is_leaf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;(True, True, False)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.grad是None, c不是叶子节点, 他的梯度是用来计算a的梯度</span></span><br><span class="line"><span class="comment"># 虽然c.requires_grad = True, 但其梯度计算完了即被释放</span></span><br><span class="line"></span><br><span class="line">c.grad <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;True&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="torch-autograd-backward"><a href="#torch-autograd-backward" class="headerlink" title="torch.autograd.backward"></a>torch.autograd.backward</h3><p>先看一下backward的接口是如何定义的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">torch.autograd.backward(</span><br><span class="line">		tensors, </span><br><span class="line">		grad_tensors&#x3D;None, </span><br><span class="line">		retain_graph&#x3D;None, </span><br><span class="line">		create_graph&#x3D;False, </span><br><span class="line">		grad_variables&#x3D;None)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>tensor</code>: 用于计算梯度的tensor。也就是说这两种方式是等价的：<code>torch.autograd.backward(z) == z.backward()</code></li>
<li><code>grad_tensors</code>: 在计算矩阵的梯度时会用到。他其实也是一个tensor，shape一般需要和前面的<code>tensor</code>保持一致。</li>
<li><code>retain_graph</code>: 通常在调用一次backward后，PyTorch会自动把计算图销毁，所以要想对某个变量重复调用backward，则需要将该参数设置为<code>True</code></li>
<li><code>create_graph</code>: 当设置为<code>True</code>的时候可以用来计算更高阶的梯度</li>
<li><code>grad_variables</code>: 这个官方说法是grad_variables’ is deprecated. Use ‘grad_tensors’ instead.也就是说这个参数后面版本中应该会丢弃，直接使用<code>grad_tensors</code>.</li>
</ul>
<p>使用以下代码尝试解释<code>grad_tensors</code>的作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line">z.backward()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RuntimeError: grad can be implicitly created only for scalar outputs</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>当代码被运行，会有一个上述的<code>RuntimeError</code>被抛出。上面的报错信息意思是<strong>只有对标量输出它才会计算梯度</strong>，而求一个矩阵对令一个矩阵的导数束手无策。<br>$$<br>X=[x_0\quad x_1]\quad  Z=X+2=[x_0+2\quad x_1+2]\Rightarrow \frac{\partial Z}{\partial X}=?<br>$$<br>那么我们只要相办法把矩阵转变成一个标量不就好了？比如我们可以对<code>Z</code>求和，然后用求和得到的标量在对x求导，这样不会对结果有影响。即：<br>$$<br>Z_{sum}=\sum{z_i}=x_0+x_1+8\quad then \quad\frac{\partial Z_{sum}}{\partial X_0}=\frac{\partial Z_{sum}}{\partial X_1}=1<br>$$<br>我们可以看到对z求和以后再计算梯度没有报错，结果也和预期一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">x = t.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">z.sum().backward()</span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([1., 1.])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们再仔细想想，对z求和不就是等价于z<strong>点乘一个一样维度的全为1的矩阵</strong>吗？即$sum(Z)=dot(Z,I)$,而这个I也就是我们需要传入的<code>grad_tensor</code>参数。点乘只是对一维向量而言的，对于矩阵或更高维的张量，可以看作是<strong>对每一个维度做点乘</strong>。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line">x = t.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">z.backward(t.ones_like(z))</span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([1., 1.])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>弄个再复杂一点的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = t.tensor([[<span class="number">2.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = t.tensor([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z = t.mm(x, y)</span><br><span class="line">print(<span class="string">f&quot;z:<span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">z.backward(t.tensor([[<span class="number">1.</span>, <span class="number">0</span>]]), retain_graph=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">f&quot;x.grad:<span class="subst">&#123;x.grad&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;y.grad:<span class="subst">&#123;y.grad&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z:tensor([[5., 8.]], grad_fn=&lt;MmBackward&gt;)</span></span><br><span class="line"><span class="string">x.grad:tensor([[1., 3.]])</span></span><br><span class="line"><span class="string">y.grad:tensor([[2., 0.],</span></span><br><span class="line"><span class="string">        [1., 0.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：说了这么多，grad_tensors的作用其实可以简单地理解成在求梯度时候地权重，因为可能梯度对影响结果程度不同。</p>
<p><strong>知乎高赞评论：</strong>假设是在z点backward，输入<code>grad_tensors</code>应该是目标函数(scalar)f对z的梯度，那么<br>$$<br>\frac{\partial f}{\partial X}=\frac{\partial f}{\partial z} \times \frac{\partial z}{\partial x}<br>$$<br>其中，传入的第一项就是传入<code>grad_tensors</code></p>
<h3 id="导数运算"><a href="#导数运算" class="headerlink" title="导数运算"></a>导数运算</h3><p>接着我们来看看autograd计算的导数和我们手动推导的导数的区别。</p>
<p>给出下列函数表达式：<br>$$<br>y=x^2e^x<br>$$<br>他的导函数是：<br>$$<br>\frac{\partial y}{\partial x}=2xe^x+x^2e^x<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算y&quot;&quot;&quot;</span></span><br><span class="line">    y = x**<span class="number">2</span> * t.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradf</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;手动求导函数&quot;&quot;&quot;</span></span><br><span class="line">    dx = <span class="number">2</span>*x*t.exp(x) + x**<span class="number">2</span>*t.exp(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子, 使结果可以复现</span></span><br><span class="line">t.manual_seed(<span class="number">0</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = t.randn(<span class="number">3</span>, <span class="number">4</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = f(x)</span><br><span class="line">y</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[11.0879,  0.0642,  0.5373,  0.5705],</span></span><br><span class="line"><span class="string">        [ 0.3976,  0.4830,  0.2435,  1.6235],</span></span><br><span class="line"><span class="string">        [ 0.2520,  0.1087,  0.1960,  0.0398]], grad_fn=&lt;MulBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">y.backward(t.ones(y.size())) <span class="comment"># 和grad_tensor形状一致</span></span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y.sum().backward()</span><br><span class="line">x.grad</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># autograd的计算结果与利用公式手动计算的结果一致</span></span><br><span class="line">gradf(x)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h3><p>PyTorch 中的 autograd 的底层采用了计算图，计算图是一种<strong>特殊的有向无环图(DAG)</strong>.用于记录算子和变量之间的关系。一般用矩形表示算子，椭圆形表示变量。如表达式$z=wx+b$可以分解为$y=wx$和$z=y+b$，其计算图如下图所示，图中的<code>MUL</code>和<code>ADD</code>都是算子，$w、x、b$为变量。</p>
<img src="https://ftp.fly97.cn/image/image-20200820171041627.png" alt="image-20200820171041627" style="zoom:50%;" />

<p>如上有向无环图中，$X$和$b$是叶子节点(leaf node)，这些节点通常由用户自己创建，不依赖其他变量。$z$称为根节点，是计算图的最终目标。利用链式法则很容易求得各个叶子节点的梯度。<br>$$<br>\frac{\partial z}{\partial b}=1\quad\frac{\partial z}{\partial y}=1<br>$$</p>
<p>$$<br>\frac{\partial y}{\partial w}=x\quad\frac{\partial y}{\partial x}=w<br>$$</p>
<p>$$<br>\frac{\partial z}{\partial x}=\frac{\partial z}{\partial y} \times\frac{\partial y}{\partial x}=1\times w<br>$$</p>
<p>$$<br>\frac{\partial z}{\partial w}=\frac{\partial z}{\partial y} \times\frac{\partial y}{\partial w}=1\times x<br>$$</p>
<p>而有了计算图，上述链式求导即可利用计算图的反向传播自动完成，其传播过程如下图所示。</p>
<img src="https://ftp.fly97.cn/image/image-20200820172727826.png" alt="image-20200820172727826" style="zoom:50%;" />

<p>在 PyTorch 实现中，<code>autograd</code>会随着用户的操作，记录生成当前 <strong>Tensor</strong> 的所有操作，并由此建立一个有向无环图。用户没进行一个操作，相应的计算图就会发生改变。更底层的实现中，图中记录了操作<code>Function</code>，每个变量在图中的位置可通过其<code>grad_fn</code>属性在图中的位置可以推测得到。在反向传播过程中，<code>autograd</code>沿着这个图从当前变量(根节点$z$)溯源，可以利用链式求导法则计算所有叶子节点的梯度。每一个前向传播操作的函数都有与之对应的反向传播函数用来计算输入的各个Tensor的梯度，这些函数的函数名通常以<code>Backward</code>结尾。</p>
<p>部分转载自：<a href="https://zhuanlan.zhihu.com/p/83172023">https://zhuanlan.zhihu.com/p/83172023</a></p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中正则表达式用法</title>
    <url>/p/regular-expression-usage-in-python/</url>
    <content><![CDATA[<h4 id="正则表达式全集"><a href="#正则表达式全集" class="headerlink" title="正则表达式全集"></a>正则表达式全集</h4><a id="more"></a>

<table>
<thead>
<tr>
<th>字符</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td>
</tr>
<tr>
<td><strong>^</strong></td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td>
</tr>
<tr>
<td><strong>$</strong></td>
<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td>
</tr>
<tr>
<td>*****</td>
<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>
</tr>
<tr>
<td><strong>+</strong></td>
<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>
</tr>
<tr>
<td><strong>?</strong></td>
<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>
</tr>
<tr>
<td><strong>{n}</strong></td>
<td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>
</tr>
<tr>
<td><strong>{n,}</strong></td>
<td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td>
</tr>
<tr>
<td><strong>{n,m}</strong></td>
<td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td><strong>?</strong></td>
<td>当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>匹配除“<code>\</code>*<code>n</code><em>”之外的任何单个字符。要匹配包括“<code>\</code></em><code>n</code>*”在内的任何字符，请使用像“`(.</td>
</tr>
<tr>
<td><strong>(pattern)</strong></td>
<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td>
</tr>
<tr>
<td><strong>(?:pattern)</strong></td>
<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</td>
</tr>
<tr>
<td><strong>(?=pattern)</strong></td>
<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td>
</tr>
<tr>
<td><strong>(?!pattern)</strong></td>
<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td>
</tr>
<tr>
<td><strong>(?&lt;=pattern)</strong></td>
<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。</td>
</tr>
<tr>
<td><strong>(?&lt;!pattern)</strong></td>
<td>反向否定预查，与正向否定预查类拟，只是方向相反。</td>
</tr>
<tr>
<td><strong>x|y</strong></td>
<td>匹配x或y</td>
</tr>
<tr>
<td><strong>[xyz]</strong></td>
<td>字符集合。匹配所包含的任意一个字符。</td>
</tr>
<tr>
<td><strong>[^xyz]</strong></td>
<td>负值字符集合。匹配未包含的任意字符。</td>
</tr>
<tr>
<td><strong>[a-z]</strong></td>
<td>字符范围。匹配指定范围内的任意字符。</td>
</tr>
<tr>
<td><strong>[^a-z]</strong></td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。</td>
</tr>
<tr>
<td><strong>\b</strong></td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td><strong>\B</strong></td>
<td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td><strong>\cx</strong></td>
<td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>
</tr>
<tr>
<td><strong>\d</strong></td>
<td>匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td><strong>\f</strong></td>
<td>匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td><strong>\s</strong></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>匹配任何非空白字符。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td><strong>\w</strong></td>
<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td><strong>\xn</strong></td>
<td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr>
<td><strong>\num</strong></td>
<td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n为一个八进制转义值。</td>
</tr>
<tr>
<td><strong>\nm</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果\</em>nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则\</em>nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr>
<td><strong>\nml</strong></td>
<td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
<tr>
<td><strong>\un</strong></td>
<td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td>
</tr>
</tbody></table>
<h4 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h4><table>
<thead>
<tr>
<th align="right">用户名</th>
<th>/^[a-z0-9_-]{3,16}$/</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><strong>密码</strong></td>
<td>/^[a-z0-9_-]{6,18}$/</td>
</tr>
<tr>
<td align="right"><strong>十六进制值</strong></td>
<td>/^#?([a-f0-9]{6}</td>
</tr>
<tr>
<td align="right"><strong>电子邮箱</strong></td>
<td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/<br/>/^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>
</tr>
<tr>
<td align="right"><strong>URL</strong></td>
<td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$/</td>
</tr>
<tr>
<td align="right"><strong>HTML 标签</strong></td>
<td>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;/\1&gt;</td>
</tr>
<tr>
<td align="right"><strong>删除代码\注释</strong></td>
<td>(?&lt;!http:|\S)//.*$</td>
</tr>
<tr>
<td align="right"><strong>Unicode编码中的汉字范围</strong></td>
<td>/^[\u2E80-\u9FFF]+$/</td>
</tr>
</tbody></table>
<h4 id="Python-中常用的正则表达式处理函数"><a href="#Python-中常用的正则表达式处理函数" class="headerlink" title="Python 中常用的正则表达式处理函数"></a>Python 中常用的正则表达式处理函数</h4><h5 id="re-match函数："><a href="#re-match函数：" class="headerlink" title="re.match函数："></a>re.match函数：</h5><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<p>函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num=0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">print(re.match(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.match(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>))         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>以上实例输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<h5 id="re-search方法："><a href="#re-search方法：" class="headerlink" title="re.search方法："></a><strong>re.search方法：</strong></h5><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>函数语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>函数参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num=0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">print(re.search(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.search(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>以上实例运行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">(11, 14)</span><br></pre></td></tr></table></figure>

<h5 id="re-match与re-search的区别："><a href="#re-match与re-search的区别：" class="headerlink" title="re.match与re.search的区别："></a>re.match与re.search的区别：</h5><p>re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None，而 re.search 匹配整个字符串，直到找到一个匹配。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.match( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">matchObj = re.search( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>以上实例运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No match!!</span><br><span class="line">search --&gt; matchObj.group() :  dogs</span><br></pre></td></tr></table></figure>

<h5 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h5><p>Python 的re模块提供了re.sub用于替换字符串中的匹配项。</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
<li>flags : 编译时用的匹配模式，数字形式。</li>
</ul>
<p>前三个为必选参数，后两个为可选参数。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个电话号码&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除注释</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 移除非数字的内容</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br></pre></td></tr></table></figure>

<p>以上实例执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">电话号码 :  <span class="number">2004</span><span class="number">-959</span><span class="number">-559</span> </span><br><span class="line">电话号码 :  <span class="number">2004959559</span></span><br></pre></td></tr></table></figure>

<p>若 repl 参数是一个函数：以下实例中将字符串中的匹配的数字乘于 2</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘于 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">matched</span>):</span></span><br><span class="line">    value = int(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> str(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line">print(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))</span><br></pre></td></tr></table></figure>

<p>执行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A46G8HFD1134</span><br></pre></td></tr></table></figure>

<h5 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile 函数"></a>compile 函数</h5><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<p>语法格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(pattern[, flags])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>pattern : 一个字符串形式的正则表达式</p>
</li>
<li><p>flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</p>
</li>
<li><ul>
<li><p>re.I 忽略大小写</p>
</li>
<li><p>re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</p>
</li>
<li><p>re.M 多行模式</p>
</li>
<li><p>re.S 即为’ . ‘并且包括换行符在内的任意字符（’ . ‘不包括换行符）</p>
</li>
<li><p>re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</p>
</li>
<li><p>re.X 为了增加可读性，忽略空格和’ # ‘后面的注释</p>
</li>
</ul>
</li>
</ul>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r&#x27;\d+&#x27;</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;e&#x27;的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;1&#x27;的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )                                        <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>
<ul>
<li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li>
<li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li>
<li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>
<li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li>
</ul>
<h5 id="findall函数："><a href="#findall函数：" class="headerlink" title="findall函数："></a><strong>findall函数</strong>：</h5><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p>
<p><strong>注意：</strong> match 和 search 是匹配一次 findall 匹配所有。</p>
<p>语法格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><strong>string</strong> 待匹配的字符串。</li>
<li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li>
<li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>
</ul>
<p>查找字符串中的所有数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r&#x27;\d+&#x27;</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">&#x27;run88oob123google456&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure>

<h5 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a><strong>re.finditer</strong></h5><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;12a32bc43jf3&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> it: </span><br><span class="line">    <span class="keyword">print</span> (match.group() )</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">32</span> </span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h5 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a><strong>re.split</strong></h5><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">maxsplit</td>
<td align="left">分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;(\W+)&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>, <span class="number">1</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;a*&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>)   <span class="comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span></span><br><span class="line">[<span class="string">&#x27;hello world&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h5><p><strong>re.RegexObject</strong></p>
<p>re.compile() 返回 RegexObject 对象。</p>
<p><strong>re.MatchObject</strong></p>
<p>group() 返回被 RE 匹配的字符串。</p>
<ul>
<li><strong>start()</strong> 返回匹配开始的位置</li>
<li><strong>end()</strong> 返回匹配结束的位置</li>
<li><strong>span()</strong> 返回一个元组包含匹配 (开始,结束) 的位置</li>
</ul>
<h5 id="正则表达式修饰符-可选标志"><a href="#正则表达式修饰符-可选标志" class="headerlink" title="正则表达式修饰符 - 可选标志"></a>正则表达式修饰符 - 可选标志</h5><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">re.I</td>
<td align="left">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="left">re.L</td>
<td align="left">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="left">re.M</td>
<td align="left">多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td align="left">re.S</td>
<td align="left">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="left">re.U</td>
<td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td align="left">re.X</td>
<td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
<h5 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h5><p>模式字符串使用特殊的语法来表示一个正则表达式：</p>
<p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p>
<p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p>
<p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p>
<p>反斜杠本身需要使用反斜杠转义。</p>
<p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 <strong>r’\t’**，等价于 **\t</strong> )匹配相应的特殊字符。</p>
<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配字符串的末尾。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td align="left">re*</td>
<td align="left">匹配0个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re+</td>
<td align="left">匹配1个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re?</td>
<td align="left">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td align="left">re{ n}</td>
<td align="left">匹配n个前面表达式。例如，”o{2}”不能匹配”Bob”中的”o”，但是能匹配”food”中的两个o。</td>
</tr>
<tr>
<td align="left">re{ n,}</td>
<td align="left">精确匹配n个前面表达式。例如，”o{2,}”不能匹配”Bob”中的”o”，但能匹配”foooood”中的所有o。”o{1,}”等价于”o+”。”o{0,}”则等价于”o*”。</td>
</tr>
<tr>
<td align="left">re{ n, m}</td>
<td align="left">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td align="left">a| b</td>
<td align="left">匹配a或b</td>
</tr>
<tr>
<td align="left">(re)</td>
<td align="left">匹配括号内的表达式，也表示一个组</td>
</tr>
<tr>
<td align="left">(?imx)</td>
<td align="left">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?-imx)</td>
<td align="left">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?: re)</td>
<td align="left">类似 (…), 但是不表示一个组</td>
</tr>
<tr>
<td align="left">(?imx: re)</td>
<td align="left">在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?-imx: re)</td>
<td align="left">在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?#…)</td>
<td align="left">注释.</td>
</tr>
<tr>
<td align="left">(?= re)</td>
<td align="left">前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td align="left">(?! re)</td>
<td align="left">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。</td>
</tr>
<tr>
<td align="left">(?&gt; re)</td>
<td align="left">匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配数字字母下划线</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配非数字字母下划线</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符，等价于 [\t\n\r\f]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配任意数字，等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配任意非数字</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开始</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结束</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\n, \t, 等。</td>
<td align="left">匹配一个换行符。匹配一个制表符, 等</td>
</tr>
<tr>
<td align="left">\1…\9</td>
<td align="left">匹配第n个分组的内容。</td>
</tr>
<tr>
<td align="left">\10</td>
<td align="left">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody></table>
<h5 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a>正则表达式实例</h5><h6 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">python</td>
<td align="left">匹配 “python”.</td>
</tr>
</tbody></table>
<h6 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[Pp]ython</td>
<td align="left">匹配 “Python” 或 “python”</td>
</tr>
<tr>
<td align="left">rub[ye]</td>
<td align="left">匹配 “ruby” 或 “rube”</td>
</tr>
<tr>
<td align="left">[aeiou]</td>
<td align="left">匹配中括号内的任意一个字母</td>
</tr>
<tr>
<td align="left">[0-9]</td>
<td align="left">匹配任何数字。类似于 [0123456789]</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">匹配任何小写字母</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">匹配任何大写字母</td>
</tr>
<tr>
<td align="left">[a-zA-Z0-9]</td>
<td align="left">匹配任何字母及数字</td>
</tr>
<tr>
<td align="left">[^aeiou]</td>
<td align="left">除了aeiou字母以外的所有字符</td>
</tr>
<tr>
<td align="left">[^0-9]</td>
<td align="left">匹配除了数字外的字符</td>
</tr>
</tbody></table>
<h6 id="特殊字符类"><a href="#特殊字符类" class="headerlink" title="特殊字符类"></a>特殊字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf配置文件详解</title>
    <url>/p/How-to-configure-nginx-conf/</url>
    <content><![CDATA[<p>本文主要介绍了nginx的配置文件。</p>
<p><strong>摘要：</strong>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。main 部分设置的指令影响其他所有部分的设置；server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p>
<p><strong>关键词：</strong>Nginx</p>
<a id="more"></a>

<p>当前 nginx 支持的几个指令上下文()：</p>
<h4 id="nginx-conf-配置文件"><a href="#nginx-conf-配置文件" class="headerlink" title="nginx.conf 配置文件"></a>nginx.conf 配置文件</h4><hr>
<p>下面是 nginx.conf 详细的配置文件介绍（<strong>以下配置参数很多时候并不一定用的到，只是作为配置参数说明参考，可以看下面的通用版介绍</strong>）</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span> www www; </span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，通常设置成和cpu的数量相等</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数+进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span></span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#keepalive 超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">128k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;    <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;    <span class="comment">#压缩缓冲区</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;     <span class="comment">#压缩等级</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    <span class="attribute">upstream</span> piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.121:80</span> weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.122:80</span> weight=<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.123:80</span> weight=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server server1;</span></span><br><span class="line">        <span class="comment">#    server server2;</span></span><br><span class="line">        <span class="comment">#    fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server squid1:3128;</span></span><br><span class="line">        <span class="comment">#    server squid2:3128;</span></span><br><span class="line">        <span class="comment">#    hash $request_uri;</span></span><br><span class="line">        <span class="comment">#    hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        <span class="attribute">server_name</span> www.jd.com jd.com;</span><br><span class="line">        <span class="comment">#默认入口文件名称</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span> /data/www/jd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">            <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        <span class="attribute">log_format</span> access <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; <span class="variable">$http_x_forwarded_for</span>&#x27;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.<span class="number">404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#对 &quot;/connect-controller&quot; 启用反向代理</span></span><br><span class="line">        <span class="attribute">location</span> /connect-controller &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:88; <span class="comment">#请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
