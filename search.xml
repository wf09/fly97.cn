<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anacoda3 安装Pytorch小记录</title>
    <url>/p/Install-Pytorch-using-Anaconda3/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>
<h4 id="下载anadoda3安装包">1.下载Anadoda3安装包</h4>
<ul>
<li><p>可以选择清华镜像源</p>
<p>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Windows-x86_64.exe</p></li>
</ul>
<p><img src="https://ftp.fly97.cn/image/image-20191228165427982.png" /></p>
<ul>
<li><p>有条件的可以选择官网下载</p>
<p>https://repo.anaconda.com/archive/Anaconda3-2019.10-Windows-x86_64.exe</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228170139071.png" alt="image-20191228170139071" /><figcaption>image-20191228170139071</figcaption>
</figure></li>
</ul>
<h4 id="双击安装">2.双击安装</h4>
<p><em>注意：安装时可以选择将Anaconda注册为默认的Python环境</em></p>
<p>​ <img src="https://ftp.fly97.cn/image/image-20191228170508433.png" alt="image-20191228170508433" style="zoom:67%;" /></p>
<p>然后一路next就可以了</p>
<p>安装完成！</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228170821162.png" alt="image-20191228170821162" /><figcaption>image-20191228170821162</figcaption>
</figure>
<p>接下来到了很重要的环节————</p>
<h4 id="创建conda虚拟环境">3.创建conda虚拟环境</h4>
<p>为什么要创建虚拟环境呢？</p>
<p>Anaconda主要是对python中的各个包进行管理与部署，从而方便用户的使用体验。</p>
<p>在从github上面下载别人的代码之后，不同的代码往往需要特定的运行环境。比如说有些代码需要在python3.6的环境下运行，有些代码需要在python2.7的环境下运行。</p>
<p>这个时候，就需要conda出马了</p>
<h5 id="选择anaconda-prompt-anaconda3以管理员身份运行">选择Anaconda Prompt (Anaconda3)以管理员身份运行</h5>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228171544280.png" alt="image-20191228171544280" /><figcaption>image-20191228171544280</figcaption>
</figure>
<h5 id="输入命令">输入命令：</h5>
<p><code>conda create -n environment_name python=3 numpy  pytorch torchvision cpuonly -c pytorch</code></p>
<p>注意：以上命令是安装CPU版本的Pytorch</p>
<h5 id="如需安装gpu版本的pytorch可以去官网查看对应命令">如需安装GPU版本的Pytorch可以去官网查看对应命令</h5>
<p>https://pytorch.org/get-started/locally/</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228172220826.png" alt="image-20191228172220826" /><figcaption>image-20191228172220826</figcaption>
</figure>
<h5 id="然后一路敲y直到安装完成">然后一路敲y直到安装完成</h5>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228172356834.png" alt="image-20191228172356834" /><figcaption>image-20191228172356834</figcaption>
</figure>
<p>接下来需要切换到刚刚创建好的虚拟环境</p>
<h5 id="输入命令-1">输入命令：</h5>
<p><code>conda activate pytorch</code></p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228172503786.png" alt="image-20191228172503786" /><figcaption>image-20191228172503786</figcaption>
</figure>
<h5 id="安装-librosa-音频处理库">安装 librosa 音频处理库</h5>
<p><code>conda install -c conda-forge librosa</code></p>
<h4 id="最后一步安装spyder-ide">4.最后一步：安装Spyder IDE</h4>
<h5 id="输入命令-2">输入命令：</h5>
<p><code>conda install spyder</code></p>
<h5 id="没有问题的话输入命令">没有问题的话输入命令：</h5>
<p><code>spyder</code></p>
<p>会自动打开spyder4窗口</p>
<h5 id="如果出现">如果出现</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Windows\system32&gt;spyder</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py&quot;</span>, line <span class="number">204</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> PySide <span class="keyword">import</span> __version__ <span class="keyword">as</span> PYSIDE_VERSION  <span class="comment"># analysis:ignore</span></span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;PySide&#x27;</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\Scripts\spyder-script.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\start.py&quot;</span>, line <span class="number">201</span>, <span class="keyword">in</span> main</span><br><span class="line">    <span class="keyword">from</span> spyder.app <span class="keyword">import</span> mainwindow</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\mainwindow.py&quot;</span>, line <span class="number">52</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    requirements.check_qt()</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\requirements.py&quot;</span>, line <span class="number">41</span>, <span class="keyword">in</span> check_qt</span><br><span class="line">    <span class="keyword">import</span> qtpy</span><br><span class="line">  File <span class="string">&quot;C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py&quot;</span>, line <span class="number">210</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> PythonQtError(<span class="string">&#x27;No Qt bindings could be found&#x27;</span>)</span><br><span class="line">qtpy.PythonQtError: No Qt bindings could be found</span><br></pre></td></tr></table></figure>
<p>说明没有安装 pyqt</p>
<p>输入命令</p>
<p><code>conda install pyqt</code></p>
<p>即可</p>
<h5 id="至此pytorch安装完成你又可以愉快的机器学习了">至此，pytorch安装完成，你又可以愉快的机器学习了</h5>
<p>安装完成后，你会发现开始栏多了一个Spyder，从此，可以直接从这里打开你刚刚创建的虚拟环境对应的Spyder~</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228174316358.png" alt="image-20191228174316358" /><figcaption>image-20191228174316358</figcaption>
</figure>
]]></content>
      <tags>
        <tag>Anacoda3</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Anaconda3(一)</title>
    <url>/p/Chapter-01-of-how-to-install-anaconda/</url>
    <content><![CDATA[<p>Python是一种面向对象的解释型计算机程序设计语言，其使用，具有跨平台的特点，可以在Linux、macOS以及Windows系统中搭建环境并使用，其编写的代码在不同平台上运行时，几乎不需要做较大的改动，使用者无不受益于它的便捷性。</p>
<p>此外，Python的强大之处在于它的应用领域范围之广，遍及人工智能、科学计算、Web开发、系统运维、大数据及云计算、金融、游戏开发等。实现其强大功能的前提，就是Python具有数量庞大且功能相对完善的标准库和第三方库。通过对库的引用，能够实现对不同领域业务的开发。然而，正是由于库的数量庞大，对于管理这些库以及对库作及时的维护成为既重要但复杂度又高的事情。</p>
<p><strong>Anaconda（<a href="https://link.zhihu.com/?target=https%3A//www.anaconda.com/download/%23macos">官方网站</a>）就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。</strong></p>
<a id="more"></a>
<h3 id="下载anadoda3安装包">下载Anadoda3安装包</h3>
<ul>
<li><p>可以选择清华镜像源</p>
<p>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</p>
<p><img src="https://ftp.fly97.cn/image/image-20191228165427982.png" /></p></li>
</ul>
<p>注意时间，选择最近的即可</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201015093722350.png" alt="image-20201015093722350" /><figcaption>image-20201015093722350</figcaption>
</figure>
<ul>
<li><p><del>官网下载(网速特别慢)</del></p>
<p>https://repo.anaconda.com/archive/</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201015094427422.png" alt="image-20201015094427422" /><figcaption>image-20201015094427422</figcaption>
</figure></li>
</ul>
<p>等待下载完成（以下以2019.10的版本为例）。</p>
<h3 id="双击安装">双击安装</h3>
<p><em>注意：安装时可以选择将Anaconda注册为默认的Python环境</em></p>
<p>​ <img src="https://ftp.fly97.cn/image/image-20191228170508433.png" alt="image-20191228170508433" style="zoom:67%;" /></p>
<p><strong>注意：官方不推荐第一个选项。勾选第二个选项即可。</strong></p>
<p>等待安装完成。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20191228170821162.png" alt="image-20191228170821162" /><figcaption>image-20191228170821162</figcaption>
</figure>
<h3 id="验证安装完成">验证安装完成</h3>
<p>点击开始 -&gt; Anaconda3</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723190040460.png" alt="image-20200723190040460" /><figcaption>image-20200723190040460</figcaption>
</figure>
<p>找到<strong>Anaconda Prompt (Anaconda3)</strong></p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723190154019.png" alt="image-20200723190154019" /><figcaption>image-20200723190154019</figcaption>
</figure>
<p>点击并输入Python，敲回车以后出现以下提示说明安装完成。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723190228823.png" alt="image-20200723190228823" /><figcaption>image-20200723190228823</figcaption>
</figure>
<h3 id="程序编写">程序编写</h3>
<p>点击<strong>开始 -&gt; Anaconda3 -&gt; Spyder</strong></p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723191007101.png" alt="image-20200723191007101" /><figcaption>image-20200723191007101</figcaption>
</figure>
<p>也可以点击<strong>开始 -&gt; Anaconda3 -&gt; Jupyter Notebook (Anaconda3)</strong></p>
<p>等待片刻后会自动打开浏览器</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723191158884.png" alt="image-20200723191158884" /><figcaption>image-20200723191158884</figcaption>
</figure>
<p>输入代码以后，按住<strong>shift+回车</strong>，即可运行代码。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200723191351960.png" alt="image-20200723191351960" /><figcaption>image-20200723191351960</figcaption>
</figure>
<p>未完待续......</p>
]]></content>
      <tags>
        <tag>Anacoda3</tag>
      </tags>
  </entry>
  <entry>
    <title>Caddy web docker镜像</title>
    <url>/p/How-to-use-Caddy-web-docker-image/</url>
    <content><![CDATA[<p>基于Go语言的web服务器</p>
<p>Caddy服务器是一个开源的，使用 Golang 编写，支持 HTTP/2 的 Web 服务端。它使用Golang 标准库提供HTTP 功能。 Caddy 一个显著的特性是默认启用HTTPS。它是第一个无需额外配置即可提供HTTPS 特性的Web 服务器。</p>
<a id="more"></a>
<p>拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull fly97&#x2F;caddy</span><br></pre></td></tr></table></figure>
<p>后台运行容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name caddy \</span><br><span class="line">    -p 443:443 -p 80:80 \</span><br><span class="line">    -v /var/caddywww/:/var/caddywww \</span><br><span class="line">    -v /var/<span class="built_in">log</span>/caddy:/var/<span class="built_in">log</span>/caddy \</span><br><span class="line">    -v /etc/caddy:/etc/caddy \</span><br><span class="line">    --restart=always fly97/caddy </span><br></pre></td></tr></table></figure>
<p>配置文件放在以下目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/caddy/Caddyfile</span><br><span class="line">http:///hub.docker.com https:///hub.docker.com * &#123;</span><br><span class="line">        root /var/caddywww/hub.docker.com</span><br><span class="line">        gzip</span><br><span class="line">        tls /var/caddywww/.ssl/hub.docker.com/_hub.docker.com_bundle.pem /var/caddywww/.ssl/hub.docker.com/_hub.docker.com.pem</span><br><span class="line">        <span class="built_in">log</span> /var/<span class="built_in">log</span>/caddy/access.log</span><br><span class="line">        errors /var/<span class="built_in">log</span>/caddy/error.log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>Dedian10使用Rclone同步ondrive</title>
    <url>/p/rclone-on-debian/</url>
    <content><![CDATA[<p>Dedian10 使用Rclone同步onedrive</p>
<a id="more"></a>
<h3 id="安装rclone">安装Rclone</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="rclone连接onedrive">Rclone连接Onedrive</h3>
<h4 id="获取token">获取Token</h4>
<p>在本地Windows电脑上<a href="https://rclone.org/downloads/">下载</a>，进入文件夹，资源管理器路径那一栏输入<code>cmd</code>,会在当前目录打开cmd命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rclone authorize <span class="string">&quot;onedrive&quot;</span></span><br></pre></td></tr></table></figure>
<p>接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210505/rclone.png" />包含access_token的{}保存好，稍后安装rclone的时候会用到。</p>
<h3 id="配置-rclone">配置 Rclone</h3>
<p>输入 <code>rclone config</code> 命令，会出现以下信息，参照以下进行操作。</p>
<p>其中，id和机密可以进入https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">admin@ip-172-26-5-120:~$ rclone config</span><br><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br><span class="line">name&gt; e5</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">&quot;fichier&quot;</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">&quot;alias&quot;</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">&quot;amazon cloud drive&quot;</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS</span><br><span class="line">   \ <span class="string">&quot;s3&quot;</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">&quot;b2&quot;</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">&quot;box&quot;</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">&quot;cache&quot;</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">&quot;sharefile&quot;</span></span><br><span class="line"> 9 / Compress a remote</span><br><span class="line">   \ <span class="string">&quot;compress&quot;</span></span><br><span class="line">10 / Dropbox</span><br><span class="line">   \ <span class="string">&quot;dropbox&quot;</span></span><br><span class="line">11 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">&quot;crypt&quot;</span></span><br><span class="line">12 / Enterprise File Fabric</span><br><span class="line">   \ <span class="string">&quot;filefabric&quot;</span></span><br><span class="line">13 / FTP Connection</span><br><span class="line">   \ <span class="string">&quot;ftp&quot;</span></span><br><span class="line">14 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">&quot;google cloud storage&quot;</span></span><br><span class="line">15 / Google Drive</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line">16 / Google Photos</span><br><span class="line">   \ <span class="string">&quot;google photos&quot;</span></span><br><span class="line">17 / Hadoop distributed file system</span><br><span class="line">   \ <span class="string">&quot;hdfs&quot;</span></span><br><span class="line">18 / Hubic</span><br><span class="line">   \ <span class="string">&quot;hubic&quot;</span></span><br><span class="line">19 / In memory object storage system.</span><br><span class="line">   \ <span class="string">&quot;memory&quot;</span></span><br><span class="line">20 / Jottacloud</span><br><span class="line">   \ <span class="string">&quot;jottacloud&quot;</span></span><br><span class="line">21 / Koofr</span><br><span class="line">   \ <span class="string">&quot;koofr&quot;</span></span><br><span class="line">22 / Local Disk</span><br><span class="line">   \ <span class="string">&quot;local&quot;</span></span><br><span class="line">23 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">&quot;mailru&quot;</span></span><br><span class="line">24 / Mega</span><br><span class="line">   \ <span class="string">&quot;mega&quot;</span></span><br><span class="line">25 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">&quot;azureblob&quot;</span></span><br><span class="line">26 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line">27 / OpenDrive</span><br><span class="line">   \ <span class="string">&quot;opendrive&quot;</span></span><br><span class="line">28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">&quot;swift&quot;</span></span><br><span class="line">29 / Pcloud</span><br><span class="line">   \ <span class="string">&quot;pcloud&quot;</span></span><br><span class="line">30 / Put.io</span><br><span class="line">   \ <span class="string">&quot;putio&quot;</span></span><br><span class="line">31 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">&quot;qingstor&quot;</span></span><br><span class="line">32 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">&quot;sftp&quot;</span></span><br><span class="line">33 / Sugarsync</span><br><span class="line">   \ <span class="string">&quot;sugarsync&quot;</span></span><br><span class="line">34 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">&quot;tardigrade&quot;</span></span><br><span class="line">35 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">&quot;chunker&quot;</span></span><br><span class="line">36 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">&quot;union&quot;</span></span><br><span class="line">37 / Webdav</span><br><span class="line">   \ <span class="string">&quot;webdav&quot;</span></span><br><span class="line">38 / Yandex Disk</span><br><span class="line">   \ <span class="string">&quot;yandex&quot;</span></span><br><span class="line">39 / Zoho</span><br><span class="line">   \ <span class="string">&quot;zoho&quot;</span></span><br><span class="line">40 / http Connection</span><br><span class="line">   \ <span class="string">&quot;http&quot;</span></span><br><span class="line">41 / premiumize.me</span><br><span class="line">   \ <span class="string">&quot;premiumizeme&quot;</span></span><br><span class="line">42 / seafile</span><br><span class="line">   \ <span class="string">&quot;seafile&quot;</span></span><br><span class="line">Storage&gt; onedrive</span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">OAuth Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_id&gt; <span class="comment">####&lt;client_id&gt;</span></span><br><span class="line">OAuth Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_secret&gt; <span class="comment">####&lt;client_secret&gt;</span></span><br><span class="line">Choose national cloud region <span class="keyword">for</span> OneDrive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;global&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ <span class="string">&quot;global&quot;</span></span><br><span class="line"> 2 / Microsoft Cloud <span class="keyword">for</span> US Government</span><br><span class="line">   \ <span class="string">&quot;us&quot;</span></span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ <span class="string">&quot;de&quot;</span></span><br><span class="line"> 4 / Azure and Office 365 operated by 21Vianet <span class="keyword">in</span> China</span><br><span class="line">   \ <span class="string">&quot;cn&quot;</span></span><br><span class="line">region&gt; 1</span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt;</span><br><span class="line">Remote config</span><br><span class="line">Make sure your Redirect URL is <span class="built_in">set</span> to <span class="string">&quot;http://localhost:53682/&quot;</span> <span class="keyword">in</span> your custom config.</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">For this to work, you will need rclone available on a machine that has</span><br><span class="line">a web browser available.</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span> and alternate methods see: https://rclone.org/remote_setup/</span><br><span class="line"></span><br><span class="line">Execute the following on the machine with the web browser (same rclone</span><br><span class="line">version recommended):</span><br><span class="line"></span><br><span class="line">        rclone authorize <span class="string">&quot;onedrive&quot;</span> -- <span class="string">&quot;02c884a6-5468-455c-a268-74cdc7203438&quot;</span> <span class="string">&quot;IrjLga~Ac3EiDM~b8Rnj~_.52-9qkl-diz&quot;</span></span><br><span class="line"></span><br><span class="line">Then paste the result below:</span><br><span class="line">result&gt; <span class="comment">###&lt;粘贴刚刚复制的access_token&gt;</span></span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;sharepoint&quot;</span></span><br><span class="line"> 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)</span><br><span class="line">   \ <span class="string">&quot;url&quot;</span></span><br><span class="line"> 4 / Search <span class="keyword">for</span> a Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;search&quot;</span></span><br><span class="line"> 5 / Type <span class="keyword">in</span> driveID (advanced)</span><br><span class="line">   \ <span class="string">&quot;driveid&quot;</span></span><br><span class="line"> 6 / Type <span class="keyword">in</span> SiteID (advanced)</span><br><span class="line">   \ <span class="string">&quot;siteid&quot;</span></span><br><span class="line"> 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)</span><br><span class="line">   \ <span class="string">&quot;path&quot;</span></span><br><span class="line">Your choice&gt; 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0: OneDrive (business) id=b!lIxfd2Pu9EqZkOv48-aPSRheOv8JQpVMuSEfiWP0gw_uuFm5MjSKT7k1T4f5GToI</span><br><span class="line">Chose drive to use:&gt; 0</span><br><span class="line">Found drive <span class="string">&#x27;root&#x27;</span> of <span class="built_in">type</span> <span class="string">&#x27;business&#x27;</span>, URL: https://fly97-my.sharepoint.com/personal/xiaofeifei_fly97_fun/Documents</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">--------------------</span><br><span class="line">[e5]</span><br><span class="line"><span class="built_in">type</span> = onedrive</span><br><span class="line">client_id = 02c884a6-5468-455c-a268-74cdc7203438</span><br><span class="line">client_secret = IrjLga~Ac3EiDM~b8Rnj~_.52-9qkl-diz</span><br><span class="line">region = global</span><br><span class="line">token = &lt;token&gt;</span><br><span class="line">drive_id = b!lIxfd2Pu9EqZkOv48-aPSRheOv8JQpVMuSEfiWP0gw_uuFm5MjSKT7k1T4f5GToI</span><br><span class="line">drive_type = business</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">e5                   onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure>
<h3 id="配置自动挂载">配置自动挂载</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rclone.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Rclone</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;rclone mount e5: &#x2F;home&#x2F;e5 \</span><br><span class="line"> --umask 0777 \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --transfers 10 \</span><br><span class="line"> --buffer-size 32M \</span><br><span class="line"> --low-level-retries 200 \</span><br><span class="line"> --vfs-cache-mode full</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line">User&#x3D;root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;default.target</span><br></pre></td></tr></table></figure>
<h3 id="一些常用命令">一些常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地到网盘</span></span><br><span class="line">rclone [功能选项] &lt;本地路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网盘到本地</span></span><br><span class="line">rclone [功能选项] &lt;网盘名称:路径&gt; &lt;本地路径&gt; [参数] [参数] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网盘到网盘</span></span><br><span class="line">rclone [功能选项] &lt;网盘名称:路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用功能选项</span><br><span class="line">rclone copy - 复制</span><br><span class="line">rclone move - 移动，如果要在移动后删除空源目录，请加上 --delete-empty-src-dirs 参数</span><br><span class="line">rclone sync - 同步：将源目录同步到目标目录，只更改目标目录。</span><br><span class="line">rclone size - 查看网盘文件占用大小。</span><br><span class="line">rclone delete - 删除路径下的文件内容。</span><br><span class="line">rclone purge - 删除路径及其所有文件内容。</span><br><span class="line">rclone mkdir - 创建目录。</span><br><span class="line">rclone rmdir - 删除目录。</span><br><span class="line">rclone rmdirs - 删除指定灵境下的空目录。如果加上 --leave-root 参数，则不会删除根目录。</span><br><span class="line">rclone check - 检查源和目的地址数据是否匹配。</span><br><span class="line">rclone ls - 列出指定路径下的所有的文件以及文件大小和路径。</span><br><span class="line">rclone lsl - 比上面多一个显示上传时间。</span><br><span class="line">rclone lsd 列出指定路径下的目录</span><br><span class="line">rclone lsf - 列出指定路径下的目录和文件</span><br><span class="line">常用参数</span><br><span class="line">-n = --dry-run - 测试运行，用来查看 rclone 在实际运行中会进行哪些操作。</span><br><span class="line">-P = --progress - 显示实时传输进度，500mS 刷新一次，否则默认 1 分钟刷新一次。</span><br><span class="line">--cache-chunk-size SizeSuffi - 块的大小，默认5M，理论上是越大上传速度越快，同时占用内存也越多。如果设置得太大，可能会导致进程中断。</span><br><span class="line">--cache-chunk-total-size SizeSuffix - 块可以在本地磁盘上占用的总大小，默认10G。</span><br><span class="line">--transfers=N - 并行文件数，默认为4。在比较小的内存的VPS上建议调小这个参数，比如128M的小鸡上使用建议设置为1。</span><br><span class="line">--config string - 指定配置文件路径，string为配置文件路径。</span><br><span class="line">--ignore-errors - 跳过错误。比如 OneDrive 在传了某些特殊文件后会提示Failed to copy: failed to open <span class="built_in">source</span> object: malwareDetected: Malware detected，这会导致后续的传输任务被终止掉，此时就可以加上这个参数跳过错误。但需要注意 RCLONE 的退出状态码不会为0。</span><br></pre></td></tr></table></figure>
<p>参考：https://p3terx.com/archives/rclone-advanced-user-manual-common-command-parameters.html</p>
]]></content>
      <tags>
        <tag>Debian</tag>
        <tag>qbittorrent-nox</tag>
      </tags>
  </entry>
  <entry>
    <title>Dedian 10 使用qbittorrent-nox web</title>
    <url>/p/qbittorrent-nox-on-debian/</url>
    <content><![CDATA[<p>Dedian 10 使用qbittorrent-nox web</p>
<a id="more"></a>
<h3 id="下载安装包">下载安装包</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install qbittorrent qbittorrent-nox</span><br></pre></td></tr></table></figure>
<h3 id="创建用于运行qbittorrent-nox的用户及组">创建用于运行qbittorrent-nox的用户及组</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo adduer --system --group qbittorrent-nox</span><br></pre></td></tr></table></figure>
<p>也可以将系统原有用添加到qbittorrent-nox组中，此处用户主要用于qbittorrnet-nox 的systemd启动脚本</p>
<h3 id="添加qbittorrent-nox服务设置开机自启及启动">添加qbittorrent-nox服务，设置开机自启及启动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /lib/systemd/system/qbittorrent-nox.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;qBittorrent Command Line Client</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">User&#x3D;qbittorrent-nox</span><br><span class="line">Group&#x3D;qbittorrent-nox</span><br><span class="line">UMask&#x3D;007</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox -d --webui-port&#x3D;8090</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<p>webui-port用于浏览器访问的端口，可以自行更改（非root用户需使用1024-65535以上未被使用的端口）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox</span><br><span class="line">sudo systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure>
<h3 id="修改web访问用户及密码">修改web访问用户及密码</h3>
<p>使用8090端口访问qbittorrent web页面，默认用户admin，密码adminadmin</p>
<p>在tools-options-Web UI中找到Authentication，修改username及password。</p>
]]></content>
      <tags>
        <tag>Debian</tag>
        <tag>qbittorrent-nox</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的网络模式</title>
    <url>/p/Docker-network-mode/</url>
    <content><![CDATA[<p><code>docker</code>目前支持以下5种网络模式：</p>
<p>使用<code>docker run</code> 创建 <code>Docker</code> 容器时，可以用 <code>--network</code> 选项指定容器的网络模式。</p>
<a id="more"></a>
<h3 id="host模式">host模式</h3>
<p>​ 使用 <code>--netrork=host</code> 指定。与宿主机共享网络，此时容器没有使用网络的namespace，宿主机的所有设备，如Dbus会暴露到容器中，因此存在安全隐患。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</p>
<h3 id="container模式">container模式</h3>
<p>使用 <code>--network=container:NAME or ID</code> 指定。指定与某个容器实例共享网络。这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<h3 id="none模式">none模式</h3>
<p>使用 <code>--network=none</code> 指定。不设置网络，相当于容器内没有配置网卡，用户可以手动配置。</p>
<h3 id="bridge模式-默认设置">bridge模式 （默认设置）</h3>
<p>使用 <code>--network=bridge</code> 指定，默认设置。</p>
<p>bridge 模式是 Docker 默认的网络设置，此模式会为每一个容器分配 Network Namespace、设置 IP 等，并将一个主机上的 Docker 容器连接到一个虚拟网桥上。</p>
<p>当 Docker server 启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>接下来就要为容器分配 IP 了，Docker 会从 RFC1918 所定义的私有 IP 网段中，选择一个和宿主机不同的IP地址和子网分配给 docker0，连接到 docker0 的容器就从这个子网中选择一个未占用的 IP 使用。如一般 Docker 会使用 172.17.0.0/16 这个网段，并将 172.17.42.1/16 分配给 docker0 网桥（在主机上使用 ifconfig 命令是可以看到 docker0 的，可以认为它是网桥的管理接口，在宿主机上作为一块虚拟网卡使用）</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<p><strong>默认是桥接模式，网络地址为172.17.0.0/16，同一主机的容器实例能够通信，但不能跨主机通信。</strong></p>
<h3 id="自定义模式">自定义模式</h3>
<p>使用自定义网络，可以使用docker network create创建，并且默认支持多种网络驱动，用户可以自由创建桥接网络或者overlay网络。</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见操作</title>
    <url>/p/Git-common-operations/</url>
    <content><![CDATA[<p>不说废话，上教程。</p>
<a id="more"></a>
<p><img src="https://ftp.fly97.cn/blog/images/20210518/git.png" /></p>
<p>几个专用名称的译名如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Workspace: 工作区</span><br><span class="line">Index &#x2F; Stage: 暂存区</span><br><span class="line">Repository: 仓库区(或本地仓库)</span><br><span class="line">Remote: 远程仓库</span><br></pre></td></tr></table></figure>
<h3 id="新建代码库">新建代码库</h3>
<h4 id="在当前目录新建一个git代码库">在当前目录新建一个Git代码库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="新建一个目录并将其初始化为git代码库">新建一个目录，并将其初始化为Git代码库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure>
<h4 id="下载一个项目和它的整个代码历史">下载一个项目和它的整个代码历史</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>Git的设置文件为<code>.gitconfig</code>,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<h4 id="显示当前的git配置">显示当前的git配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h4 id="编辑git配置文件">编辑Git配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -e [--global]</span><br></pre></td></tr></table></figure>
<h4 id="设置提交的代码时的用户信息">设置提交的代码时的用户信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="增加删除文件">增加删除文件</h3>
<h4 id="添加空文件夹">添加空文件夹</h4>
<p>空目录无法被提交，在空目录中随便放一个空文件即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch build/.keep</span><br><span class="line">git add build/.keep</span><br></pre></td></tr></table></figure>
<h4 id="添加指定文件到暂存区">添加指定文件到暂存区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2]</span><br></pre></td></tr></table></figure>
<h4 id="添加指定目录到暂存区">添加指定目录到暂存区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2]</span><br></pre></td></tr></table></figure>
<h4 id="添加当前目录的所有文件到暂存区">添加当前目录的所有文件到暂存区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h4 id="添加时忽略.gitignore文件规则">添加时忽略.gitignore文件规则</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -f [文件名称]</span><br></pre></td></tr></table></figure>
<h4 id="添加每个变化前都会要求确认">添加每个变化前，都会要求确认</h4>
<p>对于同一个文件的多处变化，可以实现多次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure>
<p>将文件添加到暂存区后，使用<code>git status</code>命令查看。</p>
<p>若文件出现在<code>Changes to be committed</code>这行下面，说明文件已经被放到暂存区。</p>
<p>若文件出现在<code>Changes not staged for commit</code>这行下面，说明已跟踪文件内容发生了变化，但还没有放到暂存区。</p>
<h4 id="删除工作区文件并将这次删除放入暂存区">删除工作区文件，并将这次删除放入暂存区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm [file1] [file2]</span><br></pre></td></tr></table></figure>
<h4 id="从暂存区撤销这次删除的文件工作区文件不改变">从暂存区撤销这次删除的文件，工作区文件不改变</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore --staged [file]</span><br></pre></td></tr></table></figure>
<h4 id="恢复工作区删除的文件">恢复工作区删除的文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore [file]</span><br></pre></td></tr></table></figure>
<h4 id="停止追踪指定文件但该文件会保留在工作区">停止追踪指定文件，但该文件会保留在工作区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached [file]</span><br></pre></td></tr></table></figure>
<h4 id="改名文件并将这个改名放入暂存区">改名文件，并将这个改名放入暂存区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="代码提交">代码提交</h3>
<h4 id="提交暂存区到仓库区">提交暂存区到仓库区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>
<h4 id="提交暂存区的指定文件到仓库区">提交暂存区的指定文件到仓库区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>
<h4 id="提交工作区自上次commit之后的变化直接到仓库区">提交工作区自上次commit之后的变化，直接到仓库区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>
<h4 id="提交时显示所有diff信息">提交时显示所有diff信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -v </span><br></pre></td></tr></table></figure>
<h4 id="使用一次新的commit替代上一次提交">使用一次新的commit，替代上一次提交</h4>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<p><strong>注意：</strong>如果需要push到远程仓库，需要添加 <code>--force</code> 选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>
<h4 id="重做上一次commit并包括指定文件的新变化">重做上一次commit，并包括指定文件的新变化</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend [file1] [file2]</span><br></pre></td></tr></table></figure>
<h4 id="提交一个空的commit">提交一个空的commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --allow-empty -m [message]</span><br></pre></td></tr></table></figure>
<h3 id="分支">分支</h3>
<h4 id="列出所有本地分支">列出所有本地分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h4 id="列出所有远程分支">列出所有远程分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<h4 id="列出所有本地分支和远程分支">列出所有本地分支和远程分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<h4 id="新建一个分支但依然停留在当前分支">新建一个分支，但依然停留在当前分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch-name]</span><br></pre></td></tr></table></figure>
<h4 id="新建一个分支并切换到这个分支">新建一个分支，并切换到这个分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch]</span><br></pre></td></tr></table></figure>
<h4 id="新建一个分支指向指定commit">新建一个分支，指向指定commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [commit]</span><br></pre></td></tr></table></figure>
<h4 id="新建一个分支与指定的远程分支建立追踪关系">新建一个分支，与指定的远程分支建立追踪关系</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>
<h4 id="切换到指定分支并更新工作区">切换到指定分支，并更新工作区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>
<h4 id="切换到上一个分支">切换到上一个分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>
<h4 id="建立追踪关系在现有分支与指定分支之间">建立追踪关系，在现有分支与指定分支之间</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>
<h4 id="合并指定分支到当前分支">合并指定分支到当前分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure>
<h4 id="选择一个commit合并进当前分支">选择一个commit，合并进当前分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick [commit]</span><br></pre></td></tr></table></figure>
<h4 id="删除分支">删除分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure>
<h4 id="删除远程分支">删除远程分支</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h3 id="标签">标签</h3>
<h4 id="列出所有tag">列出所有tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<h4 id="新建一个tag在当前commit">新建一个tag在当前commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag [tag]</span><br></pre></td></tr></table></figure>
<h4 id="新建一个tag在指定commit">新建一个tag在指定commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag [tag] [commit]</span><br></pre></td></tr></table></figure>
<h4 id="删除本地tag">删除本地tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -d [tag]</span><br></pre></td></tr></table></figure>
<h4 id="删除远程tag">删除远程tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>
<h4 id="查看tag信息">查看tag信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show [tag]</span><br></pre></td></tr></table></figure>
<h4 id="提交指定tag">提交指定tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote] [tag]</span><br></pre></td></tr></table></figure>
<h4 id="提交所有tag">提交所有tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote] --tags</span><br></pre></td></tr></table></figure>
<h4 id="新建一个分支指向某个tag">新建一个分支，指向某个tag</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h3 id="查看信息">查看信息</h3>
<h4 id="显示有变更的文件">显示有变更的文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<h4 id="以简洁的方式查看更改">以简洁的方式查看更改</h4>
<p>新添加的未跟踪文件有？？标记，新添加到暂存区中的文件有A标记，修改过的文件前面有M标记。修改过，暂存后又做了修改的文件前面有MM标记。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -S</span><br></pre></td></tr></table></figure>
<h4 id="显示当前分支的版本历史">显示当前分支的版本历史</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h4 id="查看日志点线图">查看日志点线图</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --graph</span><br></pre></td></tr></table></figure>
<h4 id="查找某个人的commit">查找某个人的commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --author=[username]</span><br></pre></td></tr></table></figure>
<h4 id="显示commit历史以及每次commit发生变更的文件">显示commit历史，以及每次commit发生变更的文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>
<h4 id="查找commit信息中是否含有某些关键字">查找commit信息中是否含有某些关键字</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --grep=[keyword]</span><br></pre></td></tr></table></figure>
<h4 id="查找某一时间段的commit">查找某一时间段的commit</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --since=<span class="string">&quot;1pm&quot;</span> --until=<span class="string">&quot;4pm&quot;</span> --after=<span class="string">&quot;2021-05&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="搜索提交历史根据关键词">搜索提交历史，根据关键词</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S [keyword]</span><br></pre></td></tr></table></figure>
<h4 id="显示某个commit之后的所有变动其提交说明必须符合搜索条件">显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> [tag] HEAD --grap feature</span><br></pre></td></tr></table></figure>
<h4 id="显示某个文件的版本历史包括文件改名">显示某个文件的版本历史，包括文件改名</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --follow [file]</span><br><span class="line">git whatchanged [file]</span><br></pre></td></tr></table></figure>
<h4 id="显示指定文件夹的每一次diff">显示指定文件夹的每一次diff</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p [file]</span><br></pre></td></tr></table></figure>
<h4 id="显示过去五次提交">显示过去五次提交</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -5 --pretty --oneline</span><br></pre></td></tr></table></figure>
<h4 id="显示所有提交过的用户按提交次数排序">显示所有提交过的用户，按提交次数排序</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git shortlog -sn</span><br></pre></td></tr></table></figure>
<h4 id="显示指定文件是什么人在什么时间修改过">显示指定文件是什么人在什么时间修改过</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame [file]</span><br></pre></td></tr></table></figure>
<h4 id="显示暂存区和工作区的差异">显示暂存区和工作区的差异</h4>
<p>此命令比较的是工作目录（workspace）中当前文件和暂存区域（staged）快照之间的差异。也就是修改之后还没有暂存起来的变化内容。</p>
<p><code>git diff</code>本身只显示<em>尚未暂存的改动</em>，而不是自上次提交以来所做的所有改动，所以有时候一下子暂存了所有更新过的文件，运行<code>git diff</code>后却什么也没有，就是这个原因。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff </span><br></pre></td></tr></table></figure>
<h4 id="显示暂存区和上一个commit的差异">显示暂存区和上一个commit的差异</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached [file]</span><br><span class="line"><span class="comment">#git diff --staged [file]   #用法相同</span></span><br></pre></td></tr></table></figure>
<h4 id="显示工作区与当前分支最新commit之间的差异">显示工作区与当前分支最新commit之间的差异</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<h4 id="显示两次提交之间的差异">显示两次提交之间的差异</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>
<h4 id="显示今天你写了多少行代码">显示今天你写了多少行代码</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="显示某次提交的元数据和内容变化">显示某次提交的元数据和内容变化</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show [commit]</span><br></pre></td></tr></table></figure>
<h4 id="显示某次提交发生变化的文件">显示某次提交发生变化的文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show --name-only [commit]</span><br></pre></td></tr></table></figure>
<h4 id="显示某次提交时某个文件的内容">显示某次提交时，某个文件的内容</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show [commit]:[filename]</span><br></pre></td></tr></table></figure>
<h4 id="显示当前分支的最近的几次提交">显示当前分支的最近的几次提交</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h3 id="远程同步">远程同步</h3>
<h4 id="下载远程仓库的所有变动">下载远程仓库的所有变动</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [remote]</span><br></pre></td></tr></table></figure>
<h4 id="显示所有远程仓库">显示所有远程仓库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="显示某个远程仓库的信息">显示某个远程仓库的信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote show [remote]</span><br></pre></td></tr></table></figure>
<h4 id="增加一个新的远程仓库并命名">增加一个新的远程仓库，并命名</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>
<h4 id="取回远程仓库的变化并于本地分支合并">取回远程仓库的变化，并于本地分支合并</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure>
<h4 id="上传本地指定分支到远程仓库">上传本地指定分支到远程仓库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>
<h4 id="强行推送当前分支到远程仓库即使有冲突">强行推送当前分支到远程仓库，即使有冲突</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote] --force</span><br></pre></td></tr></table></figure>
<h4 id="推送所有分支到远程仓库">推送所有分支到远程仓库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>
<h3 id="撤销">撤销</h3>
<h4 id="恢复暂存区的指定文件到工作区">恢复暂存区的指定文件到工作区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [file]</span><br></pre></td></tr></table></figure>
<h4 id="恢复某个commit的指定文件到暂存区和工作区">恢复某个commit的指定文件到暂存区和工作区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [commit] [file]</span><br></pre></td></tr></table></figure>
<h4 id="恢复暂存区的所有文件到工作区">恢复暂存区的所有文件到工作区</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<h4 id="重置暂存区的指定文件与上一次commit保持一致但是工作区不变">重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset [file]</span><br></pre></td></tr></table></figure>
<h4 id="重置暂存区与工作区与上一次commit保持一致">重置暂存区与工作区，与上一次commit保持一致</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<h4 id="重置当前分支的head为指定commit同时重置暂存区但工作区保持不变">重置当前分支的HEAD为指定commit，同时重置暂存区，但工作区保持不变</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset [commit]</span><br></pre></td></tr></table></figure>
<h4 id="重置当前分支的head为指定commit同时重置暂存区和工作区与指定commit一致">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard [commit]</span><br></pre></td></tr></table></figure>
<h4 id="重置当前分支的head为指定commit但工作区和暂存区保持不变">重置当前分支的HEAD为指定commit，但工作区和暂存区保持不变</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --keep [commit]</span><br></pre></td></tr></table></figure>
<h4 id="新建一个commit用来撤销指定commit">新建一个commit，用来撤销指定commit</h4>
<p>后者的所有变化都被前者抵消，并且应用到当前分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert commit</span><br></pre></td></tr></table></figure>
<h4 id="暂时将为提交的变化移除稍后再移入">暂时将为提交的变化移除，稍后再移入</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash </span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<h4 id="生成一个可供发布的压缩包">生成一个可供发布的压缩包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive</span><br></pre></td></tr></table></figure>
<h4 id="在本地目录下关联远程仓库">在本地目录下关联远程仓库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:git_username/repository_name.git</span><br></pre></td></tr></table></figure>
<h4 id="取消本地目录下关联的远程库">取消本地目录下关联的远程库：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>
<h4 id="查看git-commit-历史">查看git commit 历史</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h4 id="回退到某个commit版本">回退到某个commit版本</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;COMMIT_ID&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看本地分支">查看本地分支</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<h4 id="切换到某个分支">切换到某个分支</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>但是，这时候 git 可能会提示你当前处于一个“detached HEAD" 状态。因为 tag 相当于是一个快照，是不能更改它的代码的。</p>
<p>如果要在 tag 代码的基础上做修改，你需要一个分支：</p>
<h4 id="创建并切换到新分支">创建并切换到新分支</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;新分支&gt; &lt;本地分支&gt;</span><br></pre></td></tr></table></figure>
<h4 id="tag和branch的区别">tag和branch的区别</h4>
<p>tag就像是一个里程碑一个标志一个点，branch是一个新的征程一条线；</p>
<p>tag就是一个只读的branch，一般为每一个可发布的里程碑版本打一个tag。</p>
<p>tag就是给commit的hash校验和取的一个名字，比较直观，方便记忆和使用，和branch不是一个维度，点与线的区别.</p>
<h4 id="文件的变化周期">文件的变化周期</h4>
<p><img src="https://ftp.fly97.cn/blog/images/20210518/file_change_stage.png" /></p>
<h4 id="gitignore-编写">.gitignore 编写</h4>
<p>规范：</p>
<ol type="1">
<li>所有空行或者以#开头的行都会被Git忽略。</li>
<li>可以应用标准的glob模式匹配，他回递归地应用在整个工作区中。</li>
<li>匹配模式可以以/开头放在递归。</li>
<li>匹配模式可以以/开头结尾指定目录。</li>
<li>要忽略指定模式以外的文件或者目录，可以在模式前面加上<code>!</code>叹号取反。</li>
</ol>
<h5 id="glob模式">glob模式</h5>
<p>glob模式是指shell所使用的简化了的正则表达式。</p>
<ul>
<li>星号(*)匹配零个或多个任意字符；</li>
<li>[abc]匹配任何一个序列在方括号中的字符（要么匹配一个a，要么匹配一个b，要么匹配一个c）；</li>
<li>问号(?)只匹配一个任意字符；</li>
<li>在方括号中使用短划线分割两个字符，表示所有在这两个字符范围内的都可以匹配（比如【0-9】表示匹配所有0到9的数字）；</li>
<li>使用两个星号(**)表示匹配任意中间目录，比如<code>a/**/z</code>可以匹配<code>a/z</code>、<code>a/b/z</code>、或<code>a/b/c/z</code>等。</li>
</ul>
<h5 id="gitignore例子">.gitignore例子</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 忽略所有的.a文件</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># 但跟踪所有的lib.a, 即使你在前面忽略了.a文件</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># 只忽略当前目录的TODO文件，而不忽略subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"></span><br><span class="line"># 忽略db目录下所有后缀是 .sqlite3的文件</span><br><span class="line">&#x2F;db&#x2F;*.sqlite3</span><br><span class="line"></span><br><span class="line"># 忽略任何目录下名下为build的文件夹</span><br><span class="line">build&#x2F;</span><br><span class="line"></span><br><span class="line"># 忽略 doc&#x2F;notes.txt, 但不忽略 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br><span class="line"></span><br><span class="line"># 忽略 doc&#x2F; 目录以及所有子目录下的 .pdf文件</span><br><span class="line">doc&#x2F;**&#x2F;*.pdf</span><br></pre></td></tr></table></figure>
<p>具体文件的编写可以参考：https://github.com/github/gitignore</p>
<p>一个仓库可以只有根目录下有一个.gitignore文件，它递归地应用到整个仓库。子目录下也可以有额外的.gitignore文件，这只作用于它所在的目录。</p>
<p>新增文件时，只要符合.gitignore的规定，这个文件就会被无视</p>
<h4 id="git-clean">git clean</h4>
<p><code>git clean</code> 命令用来从工作目录中删除没有被tracked的文件。</p>
<p><code>git clean</code> 经常和 <code>git reset --hard</code>一起结合使用。reset只影响被跟踪过的文件，所以需要clean来删除没有track过的文件，结合使用这两个命令能让工作目录完全回到一个指定的<code>commit</code>状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示那些文件会被删除</span></span><br><span class="line">git clean -n </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除当前目录下所有没有被跟踪的文件，不会删除.gitignore文件里指定的文件夹和文件，不管这些文件有没有被跟踪过</span></span><br><span class="line">git clean -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定目录下没有被跟踪过的文件</span></span><br><span class="line">git clean -f [path]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除当前目录下没有被跟踪过的文件和文件夹</span></span><br><span class="line">git clean -df</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除当前目录下所有没被跟踪过的文件，不管它是否是.gitignore文件里面指定的文件或文件夹</span></span><br><span class="line">git clean -xf</span><br></pre></td></tr></table></figure>
<p>下面的例子要删除所有工作目录下面的修改, 包括新添加的文件. 假设你已经提交了一些快照了, 而且做了一些新的开发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git clean -df</span><br></pre></td></tr></table></figure>
<p>运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录, 又是一个新的开始了！</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Intel Realsense T265使用教程</title>
    <url>/p/Intel-Realsense-T265-in-ubuntu/</url>
    <content><![CDATA[<p><strong>摘要</strong>：英特尔® 实感™ 追踪摄像头 T265 是一款全新的独立同步定位与建图设备，可用于机器人、无人机等领域。本文主要介绍了如何在ubuntu系统上安装Intel Realsense T265追踪摄像头。</p>
<p><strong>关键词</strong>：T265，ROS</p>
<a id="more"></a>
<h3 id="t265参数">T265参数</h3>
<ol type="1">
<li>T265采用了2视觉处理单元（VPU），V-SLAM算法可以直接在VPU上运行，可直接输出相机位姿；</li>
<li>T265使用了双目鱼眼相机，分辨率848*800，刷新频率30Hz，可以生成单色图像，视场角163(±5°)；</li>
<li>惯性测量单元（IMU）型号为BM1055；</li>
<li>相机与IMU的参数都保存了传感器中，可以通过示例直接读取相机的内参和相机与IMU之间的外参；</li>
<li>相机外形尺寸108x24.5x12.5mm</li>
</ol>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/t265.png" /></p>
<h3 id="t265开发环境搭建">T265开发环境搭建</h3>
<h4 id="注册公钥">注册公钥</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</span><br></pre></td></tr></table></figure>
<h4 id="添加库">添加库</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb https:&#x2F;&#x2F;librealsense.intel.com&#x2F;Debian&#x2F;apt-repo $(lsb_release -sc) main&quot; -u</span><br></pre></td></tr></table></figure>
<h4 id="安装库">安装库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br></pre></td></tr></table></figure>
<p>以上两行将部署 librealsense2 udev 规则，构建并激活内核模块，运行时库以及可执行的演示和工具。</p>
<h4 id="安装开发库可选">安装开发库（可选）</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dev</span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure>
<p>安装了dev软件包后，可以使用<code>g++ -std=c++11 filename.cpp -lrealsense2</code>或者在IDE中使用<code>librealsense2</code>编译应用程序。</p>
<h4 id="检查安装是否成功">检查安装是否成功</h4>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">realsense-viewer</span><br></pre></td></tr></table></figure>
<p>系统会自动打开一个窗口</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/realsense-viewer.png" /></p>
<p>一旦速度过快，T265输出的位姿就会飞掉。</p>
<h3 id="读取t265内外参数信息">读取T265内外参数信息</h3>
<p>T265在出厂前就对相机进行了标定，每个相机内部都带有相机的内参和外参，终端输入以下命令，即可读取T265的配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs-enumerate-devices</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/rs-enumerate-devices.png" /></p>
<p>如果需要读取相机内参和外参，以及IMU的参数可以使用如下命令（添加 -c 参数）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs-enumerate-devices -c</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/rs-enumerate-devices-c.png" /></p>
<h3 id="使用ros包读取t265数据">使用ROS包读取T265数据</h3>
<p>使用环境ROS melodic 版本</p>
<h4 id="安装依赖">安装依赖</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-<span class="variable">$ROS_DISTRO</span>-ddynamic-reconfigure</span><br></pre></td></tr></table></figure>
<h4 id="下载安装ros包-realsense-ros">下载安装ROS包 realsense-ros</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IntelRealSense/realsense-ros.git</span><br><span class="line"><span class="built_in">cd</span> realsense-ros/</span><br><span class="line">git checkout `git tag | sort -V | grep -P <span class="string">&quot;^2.\d+\.\d+&quot;</span> | tail -1`</span><br><span class="line"><span class="built_in">cd</span>  ~/catkin_ws/</span><br><span class="line">catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>
<h4 id="启动测试demo即可看到t265的位姿数据">启动测试demo，即可看到T265的位姿数据</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch realsense2_camera demo_t265.launch</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/demo_t265.jpg" /></p>
<p>如果需要查看鱼眼相机图像数据，则需要对<code>rs_t265.launch</code>文件进行修改，使能图像输出</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/rs_t265.png" /></p>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roslaunch realsense2_camera demo_t265.launch</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/demo_t265_2.png" /></p>
]]></content>
      <tags>
        <tag>T265</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Xavier 开发实录</title>
    <url>/p/How-to-use-Jetson-Xavier/</url>
    <content><![CDATA[<p><strong>摘要：</strong>最近实验室买了两块嵌入式NVIDIA Jetson Xavie NX 开发板，学长拿来让我折腾下，遂有了这篇文章。</p>
<p><strong>关键词：</strong>Jetson，NVIDIA，CUDA</p>
<a id="more"></a>
<h3 id="介绍">介绍</h3>
<p>略</p>
<h3 id="制作启动盘">制作启动盘</h3>
<p>NVIDIA Jetson Xavie NX镜像下载地址：https://developer.nvidia.com/zh-cn/embedded/downloads</p>
<p>板子使用的是SD卡作为引导盘和存储盘的，首先要格式化内存卡。使用<strong>SD Card Formatter</strong>格式化内存卡。<a href="https://www.sdcard.org/downloads/formatter/eula_windows/">SD Card Formatter下载地址</a></p>
<p>格式化时注意<strong>盘符</strong>，随后点击<strong>Format</strong>.</p>
<h4 id="烧录镜像到内存卡">烧录镜像到内存卡</h4>
<p>使用<strong>balenaEtcher</strong>软件烧录镜像。下载地址：https://www.balena.io/etcher/</p>
<p>选择下载好的<strong>jetson-nx-jp441-sd-card-image</strong>文件，点击Flash.</p>
<p>刷写完以后会有一个验证数据的操作，不建议跳过。</p>
<p>稍后片刻，等待完成。</p>
<h3 id="点亮主机">点亮主机</h3>
<p>把SD卡插入卡槽，将HDMI线连接到屏幕上，插入鼠标和键盘，启动电源。</p>
<h3 id="初始配置">初始配置</h3>
<h4 id="采用m.2-key-m-ssd作为启动盘">采用M.2 Key M SSD作为启动盘</h4>
<ol type="1">
<li><p>打开Ubuntu18.04自带 Disks 工具，'Ctrl+F' 或点击右上角选择‘Format Disk' 并将其格式化为GPT 格式</p></li>
<li><p>格式化时必须选择“Ext4”， 等待完成后，点击下方 '三角按钮'，mount 到固定目录如<code>/media/nvidia/xxxx</code></p></li>
<li><p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jetsonhacks/rootOnNVMe.git</span><br><span class="line"><span class="built_in">cd</span> rootOnNVMe</span><br><span class="line">./copy-rootfs-ssd.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-service.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="更改apt源">更改apt源</h4>
<p>感谢<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像</a>对开源软件的大力支持。</p>
<p>备份原有源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>
<p>将以下内容粘贴到终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu-ports&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>更新系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure>
<h4 id="更改pypi源">更改pypi源</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo install python3-pip</span><br><span class="line">python3 -m pip install -i https://mirrors.cloud.tencent.com/pypi/simple --upgrade pip</span><br><span class="line">python3 -m pip install config set <span class="keyword">global</span>.index-url https://mirrors.cloud.tencent.com/pypi/simple</span><br></pre></td></tr></table></figure>
<h4 id="风扇控制">风扇控制</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 255 &gt; /sys/devices/pwm-fan/target_pwm</span><br><span class="line"><span class="comment">#范围0-255,风扇默认是不开的</span></span><br></pre></td></tr></table></figure>
<p>重启以后风扇是不转的，所以需要设置开机运行： 创建<code>/etc/rc.local</code>，并添加如下内容： （注：系统启动的时候会执行<code>/etc/rc.local</code>，如果已存在rc.local，则在<code>exit 0</code>之前加入那3句命令即可）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sleep 10</span><br><span class="line">sudo /usr/bin/jetson_clocks</span><br><span class="line">sudo sh -c <span class="string">&#x27;echo 255 &gt; /sys/devices/pwm-fan/target_pwm&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>添加执行权限： <code>sudo chmod 755 /etc/rc.local</code></p>
<p>以后重启就会自动开启最大性能并启动风扇了。</p>
<h4 id="远程桌面">远程桌面</h4>
<p>开机以后SSH默认是开启的。这里使用Nomachine作为远程桌面软件。Nomachine的专有NX协议在高延迟低带宽的链路上提供了近乎本地速度的响应能力。</p>
<p><a href="https://fly97.coding.net/p/github-projects/d/nomachine/git/raw/master/nomachine_6.12.3_5_arm64.deb">ARM64客户端下载链接</a></p>
<p><a href="https://fly97.coding.net/p/github-projects/d/nomachine/git/raw/master/nomachine_6.12.3_7.exe">Windows客户端下载链接</a></p>
<h4 id="设置分辨率">设置分辨率</h4>
<p>如果没有显示器连接，默认VNC 连接后的分辨率为640x480 ，将以下内容添加到<code>/etc/X11/xorg.conf</code>文件，将其设置为默认VNC分辨率设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Section <span class="string">&quot;Screen&quot;</span></span><br><span class="line">   Identifier    <span class="string">&quot;Default Screen&quot;</span></span><br><span class="line">   Monitor       <span class="string">&quot;Configured Monitor&quot;</span></span><br><span class="line">   Device        <span class="string">&quot;Tegra0&quot;</span></span><br><span class="line">   SubSection <span class="string">&quot;Display&quot;</span></span><br><span class="line">       Depth    24</span><br><span class="line">       Virtual 1024 768 <span class="comment"># Modify the resolution by editing these values</span></span><br><span class="line">   EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<h4 id="快捷设置代理">快捷设置代理</h4>
<p>在<code>/home</code>目录下，把一下内容加入到<code>.bashrc</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;export all_proxy=http://127.0.0.1:10809</span></span><br><span class="line"><span class="string">export https_proxy=http://127.0.0.1:10809</span></span><br><span class="line"><span class="string">export socks_proxy=socks5://127.0.0.1:10808&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;unset all_proxy https_proxy socks_proxy&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="安装jtop">安装Jtop</h4>
<p>Jtop（一个系统监视实用程序，可在终端上运行，并实时查看和控制 NVIDIA Jetson的状态 ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install jetson-stats </span><br><span class="line">sudo jtop</span><br></pre></td></tr></table></figure>
<h4 id="查看当前运行功率">查看当前运行功率</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询当前状态</span></span><br><span class="line">sudo nvpmodel --query</span><br><span class="line"><span class="comment">#切换状态</span></span><br><span class="line">sudo nvpmodel -m <span class="comment">#Mode_ID</span></span><br><span class="line"><span class="comment">#查看处理器状态</span></span><br><span class="line">sudo jetson_clocks --show</span><br><span class="line"><span class="comment">#如果jetson_clocks 后没有参数，则直接开启static MAX 模式</span></span><br><span class="line">sudo jetson=_clocks</span><br></pre></td></tr></table></figure>
<h4 id="安装pytorch">安装Pytorch</h4>
<p><a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-7-0-now-available/72048">下载地址</a></p>
<p><a href="https://wf09.coding.net/p/jetson/d/Pytorch/git/raw/master/torch-1.7.0-cp36-cp36m-linux_aarch64.whl">备用地址</a></p>
<p>根据自己的Python环境下载whl文件.这里是Python 3.6.9，安装的版本是PyTorch v1.7。</p>
<p>安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip libopenblas-base libopenmpi-dev </span><br><span class="line">python3 -m pip install Cython</span><br><span class="line">python3 -m pip install numpy torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>
<h5 id="安装torchvision">安装torchvision</h5>
<p>以<strong>v0.8.1</strong>为例.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">git <span class="built_in">clone</span> --branch v0.8.1 https://e.coding.net/fly97/mechine-learning/torchvision.git   <span class="comment"># see below for version of torchvision to download</span></span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=v0.8.1  <span class="comment"># where 0.x.0 is the torchvision version</span></span><br><span class="line">python3 -m pip  <span class="string">&#x27;pillow&lt;7&#x27;</span> <span class="comment"># always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6</span></span><br><span class="line">sudo python setup.py install     <span class="comment"># use python3 if installing for Python 3.6</span></span><br><span class="line"><span class="built_in">cd</span> ../  <span class="comment"># attempting to load torchvision from build dir will result in import error</span></span><br></pre></td></tr></table></figure>
<p>对应版本：</p>
<ul>
<li>PyTorch v1.0 - torchvision v0.2.2</li>
<li>PyTorch v1.1 - torchvision v0.3.0</li>
<li>PyTorch v1.2 - torchvision v0.4.0</li>
<li>PyTorch v1.3 - torchvision v0.4.2</li>
<li>PyTorch v1.4 - torchvision v0.5.0</li>
<li>PyTorch v1.5 - torchvision v0.6.0</li>
<li>PyTorch v1.6 - torchvision v0.7.0</li>
<li>PyTorch v1.7 - torchvision v0.8.1</li>
</ul>
<h4 id="cuda">CUDA</h4>
<p>官网最新镜像文件自带cuda 版本为10.2，OpenCV4</p>
<p>将以下命令写入<code>~/.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-10.2</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-10.2/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-10.2/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>退出后保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure>
<p>返回的文字如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_21:14:42_PDT_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure>
<h5 id="安装ros仓库">安装ROS仓库</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.bfsu.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="添加ros密钥">添加ROS密钥</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver &#39;hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80&#39; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure>
<h5 id="启用额外的软件库">启用额外的软件库</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository universe</span><br><span class="line">sudo apt-add-repository multiverse</span><br><span class="line">sudo apt-add-repository restricted</span><br></pre></td></tr></table></figure>
<h5 id="添加ros">添加ROS</h5>
<h4 id="opencv">OpenCV</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg-config opencv4 --modversion</span><br></pre></td></tr></table></figure>
<p>返回的文字如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.1.1</span><br></pre></td></tr></table></figure>
<h5 id="安装cuda-opencv">安装CUDA OpenCV</h5>
<h6 id="移除原有opencv">移除原有OpenCV</h6>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> purge libopencv*</span><br><span class="line">sudo apt autoremove                  <span class="meta">#此步不建议运行, 有可能产生奇怪的依赖问题</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> update</span><br></pre></td></tr></table></figure>
<h6 id="安装依赖">安装依赖</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装必备库，cmake,git,g++</span><br><span class="line">sudo apt-get install -y build-essential checkinstall cmake pkg-config yasm git gfortran</span><br><span class="line">sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev</span><br><span class="line">sudo apt-get install -y libjpeg8-dev libjasper-dev libpng12-dev libtiff5-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev</span><br><span class="line">sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libtbb-dev libatlas-base-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev x264 v4l-utils</span><br><span class="line"># 处理图像所需的包</span><br><span class="line">sudo apt-get install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev </span><br><span class="line"># 处理视频所需的包</span><br><span class="line">sudo apt-get install libxvidcore-dev libx264-dev ffmpeg</span><br><span class="line"># opencv功能优化</span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="下载opencv源代码">下载OpenCV源代码</h6>
<p>下载地址：https://opencv.org/releases/</p>
<p>此次编译使用的是<code>opencv-4.4.0.zip</code>版本。</p>
<p>额外的库：https://github.com/opencv/opencv_contrib</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip opencv-4.4.0.zip</span><br><span class="line"><span class="built_in">cd</span> opencv-4.4.0</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure>
<p>执行CMAKE</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">-DOPENCV_ENABLE_NONFREE=1 \</span><br><span class="line">-DBUILD_opencv_python2=1 \</span><br><span class="line">-DBUILD_opencv_python3=1 \</span><br><span class="line">-DWITH_FFMPEG=1 \</span><br><span class="line">-DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 \</span><br><span class="line">-DCUDA_ARCH_BIN=7.2 \</span><br><span class="line">-DCUDA_ARCH_PTX=7.2 \</span><br><span class="line">-DWITH_CUDA=1 \</span><br><span class="line">-DENABLE_FAST_MATH=1 \</span><br><span class="line">-DCUDA_FAST_MATH=1 \</span><br><span class="line">-DWITH_CUBLAS=1 \</span><br><span class="line">-DOPENCV_GENERATE_PKGCONFIG=1 \</span><br><span class="line">-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.4.0/modules \</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<p>注意<strong>：opencv_contrib-4.4.0是放在opencv-4.4.0中，注意文件的路径！！！</strong></p>
<p><strong>使用cuda，-DWITH_CUDA=1.</strong></p>
<p>官方文档的cmake的配置情况：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=<span class="regexp">/usr \</span></span><br><span class="line"><span class="regexp">-DBUILD_PNG=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_TIFF=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_TBB=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_JPEG=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_JASPER=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_ZLIB=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_EXAMPLES=ON \</span></span><br><span class="line"><span class="regexp">-DBUILD_JAVA=OFF \</span></span><br><span class="line"><span class="regexp">-DBUILD_opencv_python2=ON \</span></span><br><span class="line"><span class="regexp">-DBUILD_opencv_python3=OFF \</span></span><br><span class="line"><span class="regexp">-DENABLE_NEON=ON \</span></span><br><span class="line"><span class="regexp">-DWITH_OPENCL=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_OPENMP=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_FFMPEG=ON \</span></span><br><span class="line"><span class="regexp">-DWITH_GSTREAMER=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_GSTREAMER_0_10=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_CUDA=ON \</span></span><br><span class="line"><span class="regexp">-DWITH_GTK=ON \</span></span><br><span class="line"><span class="regexp">-DWITH_VTK=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_TBB=ON \</span></span><br><span class="line"><span class="regexp">-DWITH_1394=OFF \</span></span><br><span class="line"><span class="regexp">-DWITH_OPENEXR=OFF \</span></span><br><span class="line"><span class="regexp">-DCUDA_TOOLKIT_ROOT_DIR=/usr</span><span class="regexp">/local/cuda</span>-<span class="number">8.0</span> \</span><br><span class="line">-DCUDA_ARCH_BIN=<span class="number">6.2</span> \</span><br><span class="line">-DCUDA_ARCH_PTX=<span class="string">&quot;&quot;</span> \</span><br><span class="line">-DINSTALL_C_EXAMPLES=ON \</span><br><span class="line">-DINSTALL_TESTS=OFF \</span><br><span class="line">-DOPENCV_TEST_DATA_PATH=../opencv_extra/testdata \</span><br><span class="line">../opencv</span><br></pre></td></tr></table></figure>
<p>注意：<strong>请根据自己的的CUDA版本和实际路径修改参数！</strong></p>
<p>参考链接：<a href="https://docs.opencv.org/4.4.0/d6/d15/tutorial_building_tegra_cuda.html#tutorial_building_tegra_cuda_installing">OpenCV: Building OpenCV for Tegra with CUDA</a></p>
<h6 id="编译">编译</h6>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j1</span><br></pre></td></tr></table></figure>
<p>其中1指的线程，初次编译建议使用单线程,，解决一些奇怪问题。</p>
<h6 id="安装">安装</h6>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h6 id="成功啦">成功啦</h6>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210318/success.png" /></p>
<h6 id="解决各种出错问题">解决各种出错问题</h6>
<ol type="1">
<li><strong>src/grfmt_jpeg2000.cpp.o failed</strong></li>
</ol>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210318/bug.png" /></p>
<p>编译时关闭如下tag：<strong>-DBUILD_JASPER=OFF</strong> 即可.</p>
<ol start="2" type="1">
<li><p><strong>fatal error: boostdesc_bgm.i: No such file or directory</strong></p>
<p>可参考：https://github.com/AastaNV/JEP/issues/20</p>
<p>https://github.com/opencv/opencv_contrib/issues/1301#issuecomment-618262386</p></li>
</ol>
<p>将下载好的文件解压到以下文件夹：</p>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210318/issue.png" /></p>
<h4 id="cudnn">cuDNN</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/cudnn_samples_v8/mnistCUDNN</span><br><span class="line">sudo make</span><br><span class="line">sudo chmod a+x mnistCUDNN</span><br><span class="line">./mnistCUDNN</span><br></pre></td></tr></table></figure>
<h4 id="更改桌面">更改桌面</h4>
<p>默认的桌面环境是Unity，此次更改成更轻量的<code>ubuntu-mate</code>.</p>
<p>注意：安装过程中请勿卸载现有的桌面登录管理器，以免出现无法登录进系统的尴尬。</p>
<p>安装更轻量的桌面登录管理器<strong>LightDM</strong>：LightDM是2010年开始的新项目，且被设计为轻量、小巧、快速。相较于GDM-GTK、KDM-Qt、LightDM实际上与界面无关，它仅支持本地图形界面获得最好兼容性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install lightdm</span><br></pre></td></tr></table></figure>
<p>安装<code>ubuntu-mate-destop</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ubuntu-mate-core ubuntu-mate-desktop</span><br></pre></td></tr></table></figure>
<h5 id="lightdm设置自动登录">lightdm设置自动登录</h5>
<p>设置<strong>autologin-user</strong>来设置系统启动时自动登录某个帐户。设置<strong>autologin-user-timeout</strong>限制用户在设定秒内如果没有自动登录则不能自动登录。</p>
<p>编辑以下文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;lightdm&#x2F;lightdm.conf </span><br></pre></td></tr></table></figure>
<p>设置<strong>autologin-user</strong>来设置系统启动时自动登录某个帐户。设置<strong>autologin-user-timeout</strong>限制用户在设定秒内如果没有自动登录则不能自动登录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">autologin-user&#x3D;username</span><br><span class="line">autologin-user-timeout&#x3D;delay</span><br></pre></td></tr></table></figure>
<h5 id="lightdm修改默认会话"><strong>lightdm修改默认会话</strong></h5>
<p>默认会话设置保存在<strong>/usr/share/lightdm/lightdm.conf.d</strong>会话包中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">user-session&#x3D;name</span><br></pre></td></tr></table></figure>
<p>其中name代表<strong>/usr/share/xsessions/*.desktop</strong>中<name>.desktop。</p>
<p>转载自：https://www.cnblogs.com/EasonJim/p/7128317.html</p>
<h4 id="sudo无需输入密码">sudo无需输入密码</h4>
<p>切换到<code>root</code>用户，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure>
<p>在最后一行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;用户名&gt; ALL&#x3D;(ALL) NOPASSWD: ALL </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Jetson</tag>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Xavier nx实现串口通信</title>
    <url>/p/serial-communication-on-jetson-xavier-nx/</url>
    <content><![CDATA[<p>利用Jetson Xavier和传感器模块进行串口通信</p>
<a id="more"></a>
<h3 id="硬件连接">硬件连接</h3>
<p>默认情况下，Jetson Xavier NX分配I2C和UART引脚，所有其他引脚（电源和接地除外）均分配为GPIO，建议使用下面标有其他功能的引脚。</p>
<p>这里我们用的是UART1，设备地址<code>/dev/ttyTHS0</code>.</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/jetson_data_sheet.png" /></p>
<p>其中，第8和10引脚就是我们需要的TXD和RXD引脚。</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/jetson_xavier_nx.jpg" /></p>
<p><strong>注意：和电脑连接调试时需要注意，USB转TTL的RXD引脚需和板子的TXD引脚连接，USB转TTL的TXD引脚需和板子的RXD引脚相连。两者的GND引脚也要连起来。</strong></p>
<h3 id="相关代码">相关代码</h3>
<h4 id="安装相关依赖">安装相关依赖</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pyserial</span><br></pre></td></tr></table></figure>
<h4 id="测试代码">测试代码</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;UART Demonstration Program&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serial_port = serial.Serial(</span><br><span class="line">    port=<span class="string">&quot;/dev/ttyTHS1&quot;</span>,                                      <span class="comment">#串口设备地址</span></span><br><span class="line">    baudrate=<span class="number">115200</span>,                                          <span class="comment">#信号波特率</span></span><br><span class="line">    bytesize=serial.EIGHTBITS,                                <span class="comment">#数据位</span></span><br><span class="line">    parity=serial.PARITY_NONE,  						    <span class="comment">#是否启用奇偶校验</span></span><br><span class="line">    stopbits=serial.STOPBITS_ONE,                             <span class="comment">#停止位</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># Wait a second to let the port initialize</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Send a simple header</span></span><br><span class="line">    serial_port.write(<span class="string">&quot;UART Demonstration Program\r\n&quot;</span>.encode())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> serial_port.inWaiting() &gt; <span class="number">0</span>:</span><br><span class="line">            data = serial_port.read()</span><br><span class="line">            print(data)</span><br><span class="line">            serial_port.write(data)</span><br><span class="line">            <span class="comment"># if we get a carriage return, add a line feed too</span></span><br><span class="line">            <span class="comment"># \r is a carriage return; \n is a line feed</span></span><br><span class="line">            <span class="comment"># This is to help the tty program on the other end </span></span><br><span class="line">            <span class="comment"># Windows is \r\n for carriage return, line feed</span></span><br><span class="line">            <span class="comment"># Macintosh and Linux use \n</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">&quot;\r&quot;</span>.encode():</span><br><span class="line">                <span class="comment"># For Windows boxen on the other end</span></span><br><span class="line">                serial_port.write(<span class="string">&quot;\n&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">&quot;Exiting Program&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exception_error:</span><br><span class="line">    print(<span class="string">&quot;Error occurred. Exiting Program&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Error: &quot;</span> + str(exception_error))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    serial_port.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210508/uart_demo.png" /></p>
<p>参考资料：</p>
<p>https://www.jetsonhacks.com/2019/10/10/jetson-nano-uart/</p>
<p>https://github.com/JetsonHacksNano/UARTDemo</p>
<p>https://github.com/pyserial/pyserial</p>
<p>​</p>
]]></content>
      <tags>
        <tag>Jetson</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter NoteBook的快捷键使用指南</title>
    <url>/p/jupyter-notebook-keyboard-shortcut/</url>
    <content><![CDATA[<p><strong>概述：</strong>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</p>
<p>此文简单介绍了 Jupyter Notebook 的快捷键用法。</p>
<p><strong>关键词：</strong>Jupyter Notebook</p>
<a id="more"></a>
<p><strong>Jupyter Notebook</strong> 有两种键盘输入模式。即命令模式和编辑模式，这与 <a href="http://www.vim.org/">Vim</a> 有些类似。</p>
<p>在<strong>编辑模式</strong>下，可以往单元中键入代码或文本，<u>此时单元格被绿色的框线包围，且命令模式下的快捷键不生效。</u></p>
<p>在<strong>命令模式</strong>下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，<u>此时的单元格被灰色的框线包围，且编辑模式下的快捷键不生效。</u></p>
<p>从命令模式进入编辑模式需按 <code>Enter</code> 键，从编辑模式切换到命令模式需按 <code>Esc</code> 键。</p>
<p>以下两表分别是对命令和编辑两种模式下快捷键的简单说明：</p>
<h3 id="命令模式">命令模式</h3>
<p><strong>快捷键（按 Esc 键开启）:</strong></p>
<table>
<thead>
<tr class="header">
<th>快捷键</th>
<th style="text-align: center;">作用</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Enter</strong></td>
<td style="text-align: center;">转入编辑模式</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Shift-Enter</strong></td>
<td style="text-align: center;">运行本单元，选中下个单元</td>
<td style="text-align: center;">新单元默认为命令模式</td>
</tr>
<tr class="odd">
<td><strong>Ctrl-Enter</strong></td>
<td style="text-align: center;">运行本单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Alt-Enter</strong></td>
<td style="text-align: center;">运行本单元，在其下插入新单元</td>
<td style="text-align: center;">新单元默认为编辑模式</td>
</tr>
<tr class="odd">
<td><strong>Y</strong></td>
<td style="text-align: center;">单元转入代码状态</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>M</strong></td>
<td style="text-align: center;">单元转入 <strong>markdown</strong> 状态</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>R</strong></td>
<td style="text-align: center;">单元转入 raw 状态</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>1</strong></td>
<td style="text-align: center;">设定 1 级标题</td>
<td style="text-align: center;">仅在 markdown 状态下时建议使用标题相关快捷键，如果单元处于其他状态，则会强制切换到 markdown 状态</td>
</tr>
<tr class="odd">
<td><strong>2</strong></td>
<td style="text-align: center;">设定 2 级标题</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>3</strong></td>
<td style="text-align: center;">设定 3 级标题</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>4</strong></td>
<td style="text-align: center;">设定 4 级标题</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>5</strong></td>
<td style="text-align: center;">设定 5 级标题</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>6</strong></td>
<td style="text-align: center;">设定 6 级标题</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Up</strong></td>
<td style="text-align: center;">选中上方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>K</strong></td>
<td style="text-align: center;">选中上方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Down</strong></td>
<td style="text-align: center;">选中下方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>J</strong></td>
<td style="text-align: center;">选中下方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Shift-K</strong></td>
<td style="text-align: center;">连续选择上方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Shift-J</strong></td>
<td style="text-align: center;">连续选择下方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>A</strong></td>
<td style="text-align: center;">在上方插入新单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>B</strong></td>
<td style="text-align: center;">在下方插入新单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>X</strong></td>
<td style="text-align: center;">剪切选中的单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>C</strong></td>
<td style="text-align: center;">复制选中的单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Shift-V</strong></td>
<td style="text-align: center;">粘贴到上方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>V</strong></td>
<td style="text-align: center;">粘贴到下方单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Z</strong></td>
<td style="text-align: center;">恢复删除的最后一个单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>D,D</strong></td>
<td style="text-align: center;">删除选中的单元</td>
<td style="text-align: center;">连续按两个 D 键</td>
</tr>
<tr class="even">
<td><strong>Shift-M</strong></td>
<td style="text-align: center;">合并选中的单元</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Ctrl-S</strong></td>
<td style="text-align: center;">保存当前 NoteBook</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>S</strong></td>
<td style="text-align: center;">保存当前 NoteBook</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>L</strong></td>
<td style="text-align: center;">开关行号</td>
<td style="text-align: center;">编辑框的行号是可以开启和关闭的</td>
</tr>
<tr class="even">
<td><strong>O</strong></td>
<td style="text-align: center;">转换输出</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Shift-O</strong></td>
<td style="text-align: center;">转换输出滚动</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Esc</strong></td>
<td style="text-align: center;">关闭页面</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Q</strong></td>
<td style="text-align: center;">关闭页面</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>H</strong></td>
<td style="text-align: center;">显示快捷键帮助</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>I,I</strong></td>
<td style="text-align: center;">中断 NoteBook 内核</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>0,0</strong></td>
<td style="text-align: center;">重启 NoteBook 内核</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Shift</strong></td>
<td style="text-align: center;">忽略</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td><strong>Shift-Space </strong></td>
<td style="text-align: center;">向上滚动</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td><strong>Space</strong></td>
<td style="text-align: center;">向下滚动</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h3 id="编辑模式">编辑模式</h3>
<p><strong>快捷键（ 按 Enter 键启动）:</strong></p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">快捷键</th>
<th style="text-align: left;">作用</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Tab</strong></td>
<td style="text-align: left;">代码补全或缩进</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Shift-Tab</strong></td>
<td style="text-align: left;">提示</td>
<td style="text-align: left;">输出帮助信息，部分函数、类、方法等会显示其定义原型，如果在其后加 <code>?</code> 再运行会显示更加详细的帮助</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-]</strong></td>
<td style="text-align: left;">缩进</td>
<td style="text-align: left;">向右缩进</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-[</strong></td>
<td style="text-align: left;">解除缩进</td>
<td style="text-align: left;">向左缩进</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-A</strong></td>
<td style="text-align: left;">全选</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Z</strong></td>
<td style="text-align: left;">撤销</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-Shift-Z</strong></td>
<td style="text-align: left;">重做</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Y</strong></td>
<td style="text-align: left;">重做</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-Home</strong></td>
<td style="text-align: left;">跳到单元开头</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Up</strong></td>
<td style="text-align: left;">跳到单元开头</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-End</strong></td>
<td style="text-align: left;">跳到单元末尾</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Down</strong></td>
<td style="text-align: left;">跳到单元末尾</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-Left</strong></td>
<td style="text-align: left;">跳到左边一个字首</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Right</strong></td>
<td style="text-align: left;">跳到右边一个字首</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-Backspace</strong></td>
<td style="text-align: left;">删除前面一个字</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Delete</strong></td>
<td style="text-align: left;">删除后面一个字</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Esc</strong></td>
<td style="text-align: left;">切换到命令模式</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-M</strong></td>
<td style="text-align: left;">切换到命令模式</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Shift-Enter</strong></td>
<td style="text-align: left;">运行本单元，选中下一单元</td>
<td style="text-align: left;">新单元默认为命令模式</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Enter</strong></td>
<td style="text-align: left;">运行本单元</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Alt-Enter</strong></td>
<td style="text-align: left;">运行本单元，在下面插入一单元</td>
<td style="text-align: left;">新单元默认为编辑模式</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-Shift--</strong></td>
<td style="text-align: left;">分割单元</td>
<td style="text-align: left;">按光标所在行进行分割</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Ctrl-Shift-Subtract</strong></td>
<td style="text-align: left;">分割单元</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-S</strong></td>
<td style="text-align: left;">保存当前 NoteBook</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Shift</strong></td>
<td style="text-align: left;">忽略</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Up</strong></td>
<td style="text-align: left;">光标上移或转入上一单元</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Down</strong></td>
<td style="text-align: left;">光标下移或转入下一单元</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Ctrl-/</strong></td>
<td style="text-align: left;">注释整行/撤销注释</td>
<td style="text-align: left;">仅代码状态有效</td>
</tr>
</tbody>
</table>
<p><strong>注：</strong> 如果快捷键被系统中的其它应用占用，则可能会失效</p>
]]></content>
      <tags>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之crontab定时任务</title>
    <url>/p/how-to-use-crontab/</url>
    <content><![CDATA[<p>Linux中的crontab - - - -一个自定义定时器</p>
<a id="more"></a>
<h5 id="crontab命令">1.crontab命令</h5>
<p>重新指定crobtab定时任务文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab $filepath</span><br></pre></td></tr></table></figure>
<p>查看crontab定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p>编辑、安装定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p><strong>2.crontab时间举例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天早上6点 </span></span><br><span class="line">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每两个小时 </span></span><br><span class="line">0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 晚上11点到早上8点之间每两个小时和早上八点 </span></span><br><span class="line">0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </span></span><br><span class="line">0 11 4 * 1-3 command line</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1月1日早上4点 </span></span><br><span class="line">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时（第一分钟）执行/etc/cron.hourly内的脚本</span></span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天（凌晨4：02）执行/etc/cron.daily内的脚本</span></span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本</span></span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 </span></span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:  <span class="string">&quot;run-parts&quot;</span>这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span></span><br><span class="line">5，15，25，35，45，55 16，17，18 * * * command</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</span></span><br><span class="line">00 15 * *1，3，5 shutdown -r +5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </span></span><br><span class="line">10，40 * * * * innd/bbslink </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的1分执行用户目录下的bin/account这个指令： </span></span><br><span class="line">1 * * * * bin/account</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每1分钟执行以下命令</span></span><br><span class="line">*/1 * * * * bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： </span></span><br><span class="line">203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　</span><br></pre></td></tr></table></figure>
<h5 id="crontab任务举例">3.crontab任务举例</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /bin/bash /root/kaoyan/tiaoji.sh</span><br></pre></td></tr></table></figure>
<p>sh写法举例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">cd /root/kaoyan</span><br><span class="line">/root/***/python3 *.py &gt;&gt; /root/****/*.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有输出写入日志文件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>NLTK简介</title>
    <url>/p/an-introduction-to-NLTK/</url>
    <content><![CDATA[<p>本文主要介绍了NLTK语言工具包。</p>
<p><strong>摘要：</strong>自然语言处理（NLP）是计算机科学领域与人工智能的一个重要方向。他研究实现人与计算机之间用自然语言进行有效的通信的各种领域和方法，涉及所有用计算机对自然语言处理进行的操作。以下例子是基于Python语言和一个名为NLTK的自然语言工具包的开源库实现的。</p>
<p><strong>关键词：</strong>自然语言处理，NLP，NLTK</p>
<a id="more"></a>
<p>NLTK创建于2001年，最初是宾夕法尼亚州立大学计算机与信息科学系计算语言学课程的一部分。从那以后，在数十名贡献者的帮助下不断发展壮大，如今，它已被数十所大学的课程所采纳，并作为许多项目研究的基础。</p>
<h3 id="第一章-语言处理与python">第一章 语言处理与Python</h3>
<p>提出问题：</p>
<ol type="1">
<li>通过将技术性较为简单的程序与大规模文本结合起来，我们能实现什么？</li>
<li>如何自动的提取处关键字和词组，用来总结文本的风格和内容？</li>
<li>Python编程语言为上述工作提供了哪些工具和技术？</li>
<li>自然语言处理中有哪些有趣的挑战呢？</li>
</ol>
<h4 id="语言计算文本和词汇">语言计算：文本和词汇</h4>
<h5 id="安装nltk">安装nltk</h5>
<p>使用pip进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure>
<p>输入以下命令来安装数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.download()</span><br></pre></td></tr></table></figure>
<p>或者直接点击以下链接进行下载：<a href="https://github.com/nltk/nltk_data/archive/gh-pages.zip">点击下载</a></p>
<p>这里使用第二种方法。</p>
<p>下载完毕以后得到如图所示的压缩文件</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917210303624.png" alt="image-20200917210303624" /><figcaption>image-20200917210303624</figcaption>
</figure>
<p>解压并打开文件夹</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917210405366.png" alt="image-20200917210405366" /><figcaption>image-20200917210405366</figcaption>
</figure>
<p>打开packages，复制路径，添加<code>NLTK_DATA</code>到环境变量</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917210518955.png" alt="image-20200917210518955" /><figcaption>image-20200917210518955</figcaption>
</figure>
<p>测试是否安装成功</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917210938768.png" alt="image-20200917210938768" /><figcaption>image-20200917210938768</figcaption>
</figure>
<p>输入以下命令加载一些我们需要的文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917211222091.png" alt="image-20200917211222091" /><figcaption>image-20200917211222091</figcaption>
</figure>
<p>无论什么时候想要找到这些文本，只需要在Python提示符后面输入它的名字即可</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917211343198.png" alt="image-20200917211343198" /><figcaption>image-20200917211343198</figcaption>
</figure>
<h5 id="搜索文本">搜索文本</h5>
<p>除了简单地阅读文本之外，还有很多方法可以用来查看文本内容。词语索引视图可以显示指定单词地出现情况，同时可以显示一些上下文。</p>
<p>使用以下方法搜索<code>text1</code>文本中的<code>monstrous</code>单词。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text1.concordance(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>搜索结果</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917212148198.png" alt="image-20200917212148198" /><figcaption>image-20200917212148198</figcaption>
</figure>
<p>小试牛刀：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text2.concordance(<span class="string">&#x27;lived&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917212629370.png" alt="image-20200917212629370" /><figcaption>image-20200917212629370</figcaption>
</figure>
<p>关键词索引可以让我们看到上下文中的词，例如，可以看到monstrous出现在文章中，如the __ pictures 和 the __ size，<strong>还有那些词出现在相似地上下文</strong>中？可以通过以下函数查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text1.similar(<span class="string">&#x27;monstrous&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/image/image-20200917220851114.png" /></p>
<p>使用以下函数研究<strong>共用两个或者两个以上的词汇的上下文</strong>，如monstrous 和 very. 使用方括号和圆括号讲这些词括起来，中间用逗号分割。</p>
<p>【在<strong>text2</strong>找到用法、意义与该单词集合相似的词 】</p>
<p>【用来识别2个关键词相似的词语。】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text2.common_contexts([&quot;monstrous&quot;, &quot;very&quot;])</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200917223058920.png" alt="image-20200917223058920" /><figcaption>image-20200917223058920</figcaption>
</figure>
]]></content>
      <tags>
        <tag>自然语言处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox VE显卡直通</title>
    <url>/p/pve-pci-passthrough/</url>
    <content><![CDATA[<p>什么是PVE？</p>
<p>Proxmox VE是一个既可以运行虚拟机也可以运行容器的虚拟化平台。Proxmox VE基于Debian Linux 开发，而且完全开源。处于灵活性的考虑，Proxmox VE同时支持两种虚拟化技术：KVM虚拟机和LXC容器。以下操作基于KVM虚拟机。</p>
<a id="more"></a>
<p><strong>任务背景：</strong>实验室有一台闲置的服务器，配置是64GB内存，10GB NVIDIA RTX 2080 Ti 显卡，i9-10900K 20核CPU。组内有师姐需要跑深度学习代码，而师兄的项目需要在服务器上运行数据库。为了实现数据隔离（生产环境不影响开发环境），考虑了一下两种方案：</p>
<p>1.Docker方案。服务器装ubuntu系统，每个任务运行一个docker 容器。优点是运行任务简单，直接<code>docker pull</code> 相应的容器即可。缺点对于不熟悉docker运维的人来说，维护相对复杂，有些任务需要持久化，需要将不同容器的不同目录映射到ubuntu下的目录。这样无法实现数据隔离，违背了初衷，而且无法实现<code>ip</code>直接访问，需要设置端口映射。遂放弃。</p>
<p>2.PVE-KVM方案。宿主机安装基于<code>debian</code>的<code>Proxmox VE</code>操作系统，不同的任务创建不同的客户机，根据<code>VM ID</code>和<code>ip</code>区分客户机。缺点是配置复杂。<strong><font color="red">不过生命在于折腾，生命不止，折腾不息。</font></strong></p>
<h4 id="准备工作">准备工作</h4>
<p>检查CPU是否支持VT-d ： https://ark.intel.com/content/www/cn/zh/ark.html</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112135114468.png" /></p>
<h4 id="创建虚拟机">创建虚拟机</h4>
<p>千万注意不要设置自启动！！</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112135351055.png" /></p>
<p>选择自己上传的系统镜像，这里以Ubuntu 2004为例。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112135506814.png" /></p>
<p>设置系统选项，注意使用<font color="red"><strong>EFI模式</strong></font></p>
<p><img src="https://ftp.fly97.cn/image/image-20210112140758741.png" /></p>
<p>选择CPU时，请根据你的CPU核心数选择。类别选择host。此种模式下客户机下可以看到当前CPU的型号，同时尽量保证虚拟机内的CPU指令集和宿主机内一致。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112140906881.png" /></p>
<p><strong>网络选择：</strong>一般情况下选择默认即可。默认是网桥接入。网桥相当于一个软件实现的物理交换机。所有虚拟机共享一个网桥。网桥接入模式下，可以在上一级网关设备查看当前客户机的IP地址。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112141534116.png" /></p>
<p>确认设置，<strong>先不要开启虚拟机</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112141614131.png" /></p>
<h4 id="配置显卡直通">配置显卡直通</h4>
<p>首先编辑GRUB配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/default/grub</span><br></pre></td></tr></table></figure>
<p>开启开启IOMMU支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet intel_iommu&#x3D;on video&#x3D;efifb:off&quot;</span><br></pre></td></tr></table></figure>
<p>如果是AMD的CPU：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet amd_iommu&#x3D;on video&#x3D;efifb:off&quot;</span><br></pre></td></tr></table></figure>
<p>我是Intel的CPU，因此修改为：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112142014140.png" /></p>
<p>更新GRUB：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>添加所需的系统模块（驱动）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_iommu_type1&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_pci&quot;</span> &gt;&gt; /etc/modules</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vfio_virqfd&quot;</span> &gt;&gt; /etc/modules</span><br></pre></td></tr></table></figure>
<p>接着添加模块（驱动）黑名单，即让GPU设备在下次系统启动之后不使用这些驱动，把设备腾出来给<code>vfio</code>驱动用：</p>
<p>N卡/A卡：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist nouveau&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist nvidiafb&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;blacklist radeon&quot;</span> &gt;&gt; /etc/modprobe.d/pve-blacklist.conf</span><br></pre></td></tr></table></figure>
<p>如果是N卡还需要加入下面的配置到kvm.conf（据老外说是避免一些莫名其妙的错误）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;options vfio_iommu_type1 allow_unsafe_interrupts&#x3D;1&quot; &gt; &#x2F;etc&#x2F;modprobe.d&#x2F;iommu_unsafe_interrupts.conf</span><br><span class="line">echo &quot;options kvm ignore_msrs&#x3D;1&quot; &gt; &#x2F;etc&#x2F;modprobe.d&#x2F;kvm.conf</span><br></pre></td></tr></table></figure>
<p>更新内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure>
<p>重启机器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启上来之后检查模块是否正常加载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep vfio</span><br></pre></td></tr></table></figure>
<p>成功的话有类似回显：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112142429876.png" /></p>
<p>查看GPU设备ID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci -nn | grep VGA</span><br></pre></td></tr></table></figure>
<p>会有类似的回显：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112142511212.png" /></p>
<p>再执行下面的命令<strong>(01:00.0请替换成你的显卡ID)</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci -vvv -s 01:00.0</span><br></pre></td></tr></table></figure>
<p>会有类似的回显：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112152426155.png" /></p>
<p><img src="https://ftp.fly97.cn/image/image-20210112152400447.png" /></p>
<p>现在把需要直通给虚拟机的设备ID写到vfio.conf内，注意这次这里的ID不是01:00.0而是自己查看自己设备的ID，ID查看在上面回显里：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112152916014.png" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;options vfio-pci ids=10de:1e07&quot;</span> &gt;&gt; /etc/modprobe.d/vfio.conf</span><br></pre></td></tr></table></figure>
<p>然后应用更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-grub</span><br><span class="line">update-initramfs</span><br></pre></td></tr></table></figure>
<h4 id="更改虚拟机主机类型">更改虚拟机主机类型</h4>
<p>其中100 是VM ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qm set 100 -machine pc-q35-3.1</span><br></pre></td></tr></table></figure>
<h4 id="添加显卡">添加显卡</h4>
<p>添加PCI设备，注意ID要选择你的电脑对应的显卡ID。注意不要添加成其他设备，如Audio device等。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112153802857.png" /></p>
<p><img src="https://ftp.fly97.cn/image/image-20210112154050976.png" /></p>
<h4 id="安装操作系统">安装操作系统</h4>
<p>此过程略</p>
<h4 id="伪装cpu">伪装CPU</h4>
<p>由于NVIDIA官方限制在虚拟机中使用显卡，通过修改CPU类型，可以达到欺骗NVIDIA显卡驱动的目的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/pve/qemu-server/&lt;你的虚拟机的ID&gt;.conf</span><br></pre></td></tr></table></figure>
<p>找到CPU那一行，删掉，然后改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpu: host,hidden&#x3D;1,flags&#x3D;+pcid</span><br><span class="line">args: -cpu &#39;host,+kvm_pv_unhalt,+kvm_pv_eoi,hv_vendor_id&#x3D;NV43FIX,kvm&#x3D;off&#39;</span><br></pre></td></tr></table></figure>
<p>如下图：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112154651328.png" /></p>
<h4 id="安装显卡驱动">安装显卡驱动</h4>
<p>以下操作是在<font color="red">客户机</font>上完成的，根据显卡选择合适的驱动安装。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112155127152.png" /></p>
<p>安装完毕，重启客户机。执行一下命令查看驱动是否安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p>有下图所示回显说明安装成功：</p>
<p><img src="https://ftp.fly97.cn/image/image-20210112155315385.png" /></p>
]]></content>
      <tags>
        <tag>PVE</tag>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5教程</title>
    <url>/p/PyQt5-Chinese-tutorial/</url>
    <content><![CDATA[<p>学习PyQt的基本功能。</p>
<a id="more"></a>
<h3 id="例1-简单的窗口">例1 简单的窗口</h3>
<p>这个简单的小例子展示的是一个小窗口。但是我们可以在这个小窗口上面很多事情，改变大小，最大化，最小化等。这需要很多代码能实现。这在很多应用中很常见，没必要每次都要重写这一部分代码，Qt已经提供了这些功能。PyQt5是一个高级的工具集合，相比使用低级的工具，能省略上百行代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    </span><br><span class="line">    w = QWidget()</span><br><span class="line">    w.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">    w.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    w.setWindowTitle(<span class="string">&#x27;Simple&#x27;</span>)</span><br><span class="line">    w.show()</span><br><span class="line">    </span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>运行上面的代码，能展示出一个小窗口。</p>
<p>分步讲解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br></pre></td></tr></table></figure>
<p>这里引入了PyQt5.QtWidgets这个模块，这个模块包含了基本的组件。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; QApplication(sys.argv)</span><br></pre></td></tr></table></figure>
<p>每个PyQt5应用都必须创建这样的一个应用对象。sys.argv是一组命令行参数的列表。<strong>Python可以在shell里运行，这个参数提供了对脚本控制的功能。</strong></p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w &#x3D; QWidget()</span><br></pre></td></tr></table></figure>
<p>QWidget控件是一个用户界面的<strong>基本控件</strong>，它提供了基本的应用构造器。默认情况下，构造器是没有父级的，<strong>没有父级的构造器被称为窗口(window)。</strong></p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br></pre></td></tr></table></figure>
<p>resize()方法能改变控件的大小，这里的意思是窗口宽250px，高150px.</p>
<hr />
<p>move()是修改控件位置的方法，它把控件放置到屏幕坐标的(300, 300)的位置。<strong>屏幕坐标系的原点是屏幕的左上角。</strong></p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w.setWindowTitle(<span class="string">&#x27;Simple&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>我们给这个窗口添加了一个标题，标题在标题栏展示。<strong>虽然这看起来是一句废话，但是后面还有各种栏，还是要重点说一下。</strong></p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w.show()</span><br></pre></td></tr></table></figure>
<p>show()能让控件在桌面上显示出来。控件在内存里创建，调用这个函数才能在操作系统上显示出来。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>最后，我们进入了应用的主循环中，事件处理器这个时候开始工作。主循环从窗口上接收事件，并把事件派发到应用控件里。当调用<code>exit()</code>方法或直接销毁主控件时，主循环就会结束。<code>sys.exit()</code>方法能确保主循环安全退出。外部环境会收到主控件如何结束的信息。</p>
<p><code>exec_()</code>之所以有个下划线，是因为<code>exec</code>是Python的一个关键字。</p>
<p>程序预览：</p>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_01.png" /></p>
<h3 id="例2-带窗口图标">例2 带窗口图标</h3>
<p>窗口图标通常是显示一个窗口的左上角，标题栏的最左边。下面的例子就是怎么用PyQt5创建一个这样的窗口。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">220</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Icon&#x27;</span>)</span><br><span class="line">        self.setWindowIcon(Qicon(<span class="string">&#x27;web.png&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        self.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>此处用到了Python面向对象编程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">	super().__init__()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>面向对象编程最重要的三个部分是类(class)、数据和方法。<code>class Example:</code>创建了一个类的调用，这个类继承自<code>QWidget</code>类。调用了两个构造器，一个是这个类本身的，一个是这个类继承的。super()构造器方法返回父级的对象。<code>_\_init__()</code>方法是构造器的一个方法。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.initUI()</span><br></pre></td></tr></table></figure>
<p>使用<code>initUI()</code>方法创建一个GUI。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自己准备一个web.png</span><br><span class="line">self.setGeometry(300, 300, 300, 220)</span><br><span class="line">self.setWindowTitle(&#39;Icon&#39;)</span><br><span class="line">self.setWindowIcon(QIcon(&#39;web.png&#39;))</span><br></pre></td></tr></table></figure>
<p>上面的三个方法都继承自<code>QWidget</code>类。<code>setGeometry()</code>有三个作用：把窗口放到屏幕上并设置窗口大小。参数分别代表屏幕坐标的x、y和窗口大小的宽、高。也就是说这个方法是<code>resize()</code>和<code>move()</code>的合体。最后一个方法是添加了图标。也创建了一个<code>QIcon</code>对象，然后接受一个路径作为参数显示图标。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(ex.exec_())</span><br></pre></td></tr></table></figure>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_02.png" /></p>
<h3 id="例3-提示框">例3 提示框</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QToolTip, QPushButton, QApplication)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.initUI()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&#x27;SansSerif&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        self.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        btn = QPushButton(<span class="string">&#x27;Button&#x27;</span>, self)</span><br><span class="line">        btn.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Tooltips&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>在这个例子中, 我们为应用创建了一个提示框.</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QToolTip.setFont(QFont(<span class="string">&#x27;SansSerif&#x27;</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<p>这个静态方法设置了提示框的字体。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; wighet&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>调用<code>setToolTip()</code>创建提示框可以使用<strong>富文本格式</strong>的内容。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">btn = QPushButton(<span class="string">&#x27;Button&#x27;</span>, self)</span><br><span class="line">btn.setToolTip(<span class="string">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>创建一个按钮，并且为按钮添加了一个提示框。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">btn.resize(btn.sizeHint())</span><br><span class="line">btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>调整按钮大小, 并且让按钮在屏幕上显示出来，sizeHint()方法提供了一个默认的按钮大小。</p>
<hr />
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_03.png" /></p>
<h3 id="例4-关闭窗口">例4 关闭窗口</h3>
<p>关闭窗口最直观的方式就是点击标题栏的叉叉，在这个例子里，我们展示的是如何用程序关闭一个窗口。这里我们将接触到一点<strong>信号(signal)和槽(slots)</strong>的知识。</p>
<p>本例使用的是<code>QPushButton</code>组件类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QPushButton(string text, QWidget parent &#x3D; None)</span><br></pre></td></tr></table></figure>
<p>text参数是想要显示的按钮名称，parent参数是放在按钮上的组件，在我们的例子里，这个参数是QWidget。应用中的组件都是经过一层层的继承来的。在这个层里，大部分的组件都有自己的父级，没有父级的组件被称为<strong>顶级窗口</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        qbtn = QPushButton(<span class="string">&#x27;Quit&#x27;</span>, self)</span><br><span class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        qbtn.resize(qbtn.sizeHint())</span><br><span class="line">        qbtn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">250</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Quit button&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>上述代码创建了一个点击之后就推出窗口的按钮。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PyQt5.QtCore import QCoreApplication</span><br></pre></td></tr></table></figure>
<p>程序需要<code>QtCore</code>对象。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qbtn &#x3D; QPushButton(&#39;Quit&#39;, self)</span><br></pre></td></tr></table></figure>
<p>创建一个<code>QPushButton</code>按钮。第一个参数是按钮的文本，第二个参数是按钮的父级组件，这个例子中，父级组件就是我们创建的继承自<code>QWidget</code>的<code>Example</code>类。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br></pre></td></tr></table></figure>
<p>创建了<strong>信号(singal)和槽(slot)</strong>的连接。点击按钮之后，信号会被捕捉并给出既定的反应。<code>QCoreApplication</code>包含了时间的主循环，它能添加和删除所有的事件。<code>instance()</code>创建了一个它的实例。<code>QCoreApplication</code>是在<code>QApplication</code>里创建的。点击事件和能终止进程并推出应用的quit函数绑定在了一起。在发送者和接收者之间建立了通讯，发送者就是按钮，接收者就是应用对象。</p>
<figure>
<img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_04.png" alt="image-20210226150310118" /><figcaption>image-20210226150310118</figcaption>
</figure>
<p>点击一下<code>Quit</code>，程序就会自动退出。</p>
<h3 id="例5-消息盒子">例5 消息盒子</h3>
<p>默认情况下，我们点击标题栏的x按钮，QWidget就会关闭。但是有时候，我们需要修改这个默认行为。例如，我们打开的是一个文件编辑器，并且做了一些修改，这个时候就需要在关闭按钮的时候让用户进一步确认操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QMessageBox, QApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        </span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWidnowTitle(<span class="string">&#x27;Message box&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span>(<span class="params">self, event</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">       </span><br><span class="line">    	reply = QMessageBox.question(self, <span class="string">&#x27;Message&#x27;</span>, <span class="string">&quot;Are you sure to quit?&quot;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>如果关闭<code>QWidget</code>，就会产生一个<code>QCloseEvent</code>，并且把它传入到<code>closeEvent</code>函数的event参数中。改变控件的默认行为，就是替换掉默认的事件处理。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reply &#x3D; QMessageBox.question(self, &#39;Message&#39;,&quot;Are you sure to quit?&quot;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br></pre></td></tr></table></figure>
<p>上述代码创建了一个消息框，上面有两个按钮：<code>Yes</code>和<code>No</code>。第一个字符串显示在消息框的标题，第二个字符串显示在对话框，第三个参数是消息框的两个按钮，最后一个参数是默认按钮，这个按钮是默选中的。返回值在变量<code>reply</code>里。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">	event.accept()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	event.ignore()</span><br></pre></td></tr></table></figure>
<p>这里判断返回值，如果点击的是Yes按钮，就关闭组件和应用，否则就忽略关闭事件。</p>
<p>程序预览：</p>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_05.png" /></p>
<p>例6 窗口居中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QDestopWidget, QApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">        self.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.center()</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Center&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span>(<span class="params">self</span>):</span></span><br><span class="line">        qr = self.frameGeometry()</span><br><span class="line">        cp = QDesktopWidget().availableGeometry().center()</span><br><span class="line">        qr.moveCenter(cp)</span><br><span class="line">        self.move(qr.topLeft())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<hr />
<p><code>QtGui.QDesktopWidget</code>提供了用户的桌面信息，包括屏幕的大小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.center()</span><br></pre></td></tr></table></figure>
<p>这个方法调用下面实现对话框居中的方法。</p>
<hr />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qr &#x3D; self.frameGeometry()</span><br></pre></td></tr></table></figure>
<p>获得主窗口所在的框架。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp = QDesktopWidget().availableGeometry().center()</span><br></pre></td></tr></table></figure>
<p>获得显示器的分辨率，然后得到屏幕中心点的位置。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qr.moveCenter(cp)</span><br></pre></td></tr></table></figure>
<p>然后把主窗口框架中心点位置放置到屏幕的中心位置。</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.move(qr.topLeft())</span><br></pre></td></tr></table></figure>
<p>然后通过move函数把主窗口的左上角移动到其框架的左上角，这样就把窗口居中了。</p>
<p>程序预览：</p>
<p><img src="https://fly97.coding.net/p/images/d/fly97.cn/git/raw/master/20210202/qt5_06.png" /></p>
]]></content>
      <tags>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中torch.Tensor和torch.tensor的区别</title>
    <url>/p/the-difference-between-torch-Tensor-and-torch-tensor-in-PyTorch/</url>
    <content><![CDATA[<p>不说废话，直接上教程。</p>
<a id="more"></a>
<h4 id="torch.tensor和torch.tensor有什么区别">torch.Tensor和torch.tensor有什么区别？</h4>
<h6 id="介绍">介绍</h6>
<p>​ 在PyTorch 中，torch.Tensor是主要的tensor类，所有的tensor都是torch.Tensor的实例。torch.Tensor是torch.FloatTensor的别名。 而torch.tensor是一个函数，返回的是一个tensor，在PyTorch官方文档中，描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(data, dtype=<span class="literal">None</span>, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>) → Tensor</span><br><span class="line">Constructs a tensor <span class="keyword">with</span> data.</span><br></pre></td></tr></table></figure>
<h6 id="区别1">区别1</h6>
<p><code>torch.Tensor(data)</code>是将输入的data转化<code>torch.FloatTensor</code></p>
<p><code>torch.tensor(data)</code>(当你未指定<code>dype</code>的类型时)是将data转化为<code>torch.FloatTensor、torch.LongTensor、torch.DoubleTensor</code>等类型，转化类型依据于<code>data</code>的类型或者<code>dtype</code>的值</p>
<h5 id="区别2">区别2</h5>
<p>使用如下语句：<code>tensor_without_data = torch.Tensor()</code>可以创建一个空的<code>FloatTensor</code>，而当你使用<code>tensor_without_data = torch.tensor()</code>时候则会报错：</p>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-12</span>-ebc3ceaa76d2&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 torch.tensor()</span><br><span class="line"></span><br><span class="line">TypeError: tensor() missing <span class="number">1</span> required positional arguments: <span class="string">&quot;data&quot;</span></span><br></pre></td></tr></table></figure>
<p>当你想要创建一个空的<code>tensor</code>时候，可以使用如下的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor_without_data = torch.Tensor() <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.tensor(()) <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.empty([]) <span class="comment"># tensor(0.)</span></span><br></pre></td></tr></table></figure>
<p>所以<code>torch.Tensor</code>应该说是同时具有<code>torch.tensor</code>和<code>torch.empty</code>的功能，但是使用<code>torch.Tensor</code>可能会使你的代码出错，所以最好还是使用<code>torch.tensor</code>和<code>torch.empty</code>，而不是<code>torch.Tensor</code>。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中对图像的操作</title>
    <url>/p/How-to-process-images-in-Pytorch/</url>
    <content><![CDATA[<p>在Pytorch中，数据加载可以通过自定义的数据集对象来实现。</p>
<a id="more"></a>
<h3 id="数据处理">数据处理</h3>
<h4 id="数据加载">数据加载</h4>
<p>在Pytorch中，数据加载可以通过自定义的数据集对象来实现。数据集对象被抽象为Dataset类，实现自定义的数据集需要继承Dataset，并实现两个Python魔法方法。</p>
<ul>
<li><code>__getitem__():返回一条数据或一个样本。obj[index]等价于obj.getitem__(index).</code></li>
<li><code>__len__():返回样本的数量.len(obj)等价于obj.__len__().</code></li>
</ul>
<p>这里我们以某学校结课项目为例，谈谈在PyTorch中处理图像的操作。</p>
<p><img src="https://ftp.fly97.cn/image/202011081130.png" style="zoom:50%;" /></p>
<p>第一步，首先要考虑的操作是将"绝缘子"文件夹下面的文件全部load到内存中，说干就干。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>(<span class="params">data.Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="comment"># 所有图片的绝对路径</span></span><br><span class="line">        <span class="comment"># 这里不实际加载图片, 只是指定路径</span></span><br><span class="line">        <span class="comment"># 当调用__getitem__才会真正读图片</span></span><br><span class="line">        self.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        img_path = self.imgs[index]</span><br><span class="line">        label = <span class="string">&#x27;jueyuanzi&#x27;</span>               				<span class="comment">#这里的标签是随便指定的</span></span><br><span class="line">        pli_img = Image.open(img_path)</span><br><span class="line">        array = np.asarray(pli_img)</span><br><span class="line">        data = torch.from_numpy(array)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> len(self.imgs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dataset  = Data(<span class="string">&#x27;..\\绝缘子&#x27;</span>)</span><br><span class="line">img, label = dataset[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    print(img.size(), img.float().mean(), label)</span><br></pre></td></tr></table></figure>
<p>实验结果：</p>
<p><img src="https://ftp.fly97.cn/image/image-20201108113830607.png" /></p>
<p>通过上面的代码，我们学习了如何自定义自己的数据集，并可以依次获取。但是这里的数据不适合实际使用，其具有以下问题：</p>
<ol type="1">
<li>返回的数据形状会因为样本的形状而变化，这里由于图片的大小是一致的，因此无需处理。<strong>但是如果每张图片的大小不一</strong>，返回的数据大小就会不一致，这对于需要取batch训练的神经网络来说非常不友好。</li>
<li>返回的样本数值较大，未归一化至<strong>[-1, 1]</strong>.</li>
</ol>
<p>针对上述问题，PyTorch提供了torchvision。它是一个视觉工具包，提供了很多视觉图像处理的工具，其中<code>tranforms</code>模块提供了对PIL Image和Tensor对象的常用操作。</p>
<p>对PIL Image 的常见操作如下：</p>
<ul>
<li>Resize：调整图片尺寸。</li>
<li>CenterCrop、RandCrop、RandomSizedCrop：裁剪图片。</li>
<li>Pad：填充。</li>
<li>ToTensor：将PIL Image对象转成Tensor，会自动将[0, 255]归一化至[0, 1]。</li>
</ul>
<p>对Tensor 的常见操作如下：</p>
<ul>
<li>Normalize：标准化，及减去均值，除以标准差。</li>
<li>ToPILImage：将Tensor转为PIL Image对象。</li>
</ul>
<p>如果对这些图片进行操作，可以通过Compose将这些操作拼接起来。请注意：这些操作帝国一后是以对象的形式存在，真正使用时需调用它的__call__方法，类似于nn.Module。具体实现请下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created on Sun Nov  8 10:05:04 2020</span><br><span class="line"></span><br><span class="line">@author: wf09</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import torch</span><br><span class="line">from torch.utils import data</span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from torchvision import utils</span><br><span class="line">from torchvision import transforms as T</span><br><span class="line"></span><br><span class="line">transform &#x3D; T.Compose([</span><br><span class="line">        T.Resize([375, 500]),   #缩放图片</span><br><span class="line">        T.CenterCrop([375, 500]), #从图片中间切出这个大小的图片</span><br><span class="line">        T.ToTensor(),             #将图片转换到Tensor, 归一化[0, 1]</span><br><span class="line">        T.Normalize(mean&#x3D;[.5, .5, .5], std &#x3D;[.5, .5, .5])  #标准化到[-1, 1]</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Data(data.Dataset):</span><br><span class="line">    def __init__(self, root, transforms&#x3D;None):</span><br><span class="line">        imgs &#x3D; os.listdir(root)</span><br><span class="line">        # 所有图片的绝对路径</span><br><span class="line">        # 这里不实际加载图片, 只是指定路径</span><br><span class="line">        # 当调用__getitem__才会真正读图片</span><br><span class="line">        self.imgs &#x3D; [os.path.join(root, img) for img in imgs]</span><br><span class="line">        self.transforms &#x3D; transforms</span><br><span class="line">        </span><br><span class="line">    def __getitem__(self, index):</span><br><span class="line">        img_path &#x3D; self.imgs[index]</span><br><span class="line">        label &#x3D; &#39;jueyuanzi&#39;</span><br><span class="line">#        pli_img &#x3D; Image.open(img_path)</span><br><span class="line">#        array &#x3D; np.asarray(pli_img)</span><br><span class="line">#        data &#x3D; torch.from_numpy(array)</span><br><span class="line">        data &#x3D; Image.open(img_path)</span><br><span class="line">        if self.transforms:</span><br><span class="line">            data &#x3D; self.transforms(data)</span><br><span class="line">        </span><br><span class="line">        return data, label</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.imgs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dataset  &#x3D; Data(&#39;..\\不同形态绝缘子&#39;, transform)</span><br><span class="line">img, label &#x3D; dataset[0]</span><br><span class="line"></span><br><span class="line">for img, label in dataset:</span><br><span class="line">    print(img.size(), img.float().mean(), label)</span><br><span class="line">    utils</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="未完待续">未完待续</h3>
<ul>
<li><input type="checkbox" disabled="" />
如何将操作后的图片保存下来？</li>
<li><input type="checkbox" disabled="" />
什么是Python中的魔法方法？</li>
</ul>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的Tensor</title>
    <url>/p/Tensor-in-PyTorch/</url>
    <content><![CDATA[<p>通过以下几个例子来了解以下PyTorch中的Tensor。</p>
<a id="more"></a>
<p>Tensor 是 PyTorch 中重要的数据结构，可认为是一个高维数组。它可以是一个数字（标量）、一维数组（向量）、二维数组（矩阵）或更高维的数组。Tensor 和 numpy 的中的 ndrrays 类似，但是 Tensor 可以使用GPU加速。Tensor 的使用和 numpy 以及MATLAB的接口十分类似。下面通过几个实例来了解一下Tensor的基本使用方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensor <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 构建 5*3 矩阵，只是分配了空间，未初始化</span></span><br><span class="line">x = t.Tensor(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用[0, 1]均匀分布随机初始化二维数组</span></span><br><span class="line">x = t.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(x.size()) <span class="comment">#查看形状</span></span><br><span class="line">x.size()[<span class="number">0</span>], x.size(<span class="number">1</span>) <span class="comment">#查看列的个数，两种写法等价</span></span><br><span class="line"></span><br><span class="line">print(t.Size([<span class="number">5</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># (5L, 3)</span></span><br></pre></td></tr></table></figure>
<p>touch.Size 是tuple对象的子类，因此它支持 tuple 的所有操作，如 x.size()[0]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = t.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">print(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法2</span></span><br><span class="line">t.add(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法3</span></span><br><span class="line">result  = t.Tensor(<span class="number">5</span>, <span class="number">3</span>) <span class="comment"># 预先分配空间 </span></span><br><span class="line">t.add(x, y, out=result)  <span class="comment"># 输入到result</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;最初y&#x27;</span>)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;第一种加法, y的结果&#x27;</span>)</span><br><span class="line">y.add(x) <span class="comment"># 普通加法, 不改变y的内容</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;第二种加法, y的结果&#x27;</span>)</span><br><span class="line">y.add_(x) <span class="comment"># inplace加法, 执行完后y的值被更新</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>函数名后面带下划线的函数会修改 Tensor 本身。例如，<code>x.add(y)</code> 和 <code>x.t_()</code>会返回一个新的 Tensor，而<code>x</code>不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tensor的选取操作与numpy类似</span></span><br><span class="line">x[:, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>Tensor 还支持很多操作，包括<strong>数学运算、线性代数、选择、切片</strong>等，其接口涉及与 numpy 极为相似。</p>
<p>Tensor 和 numpy 的数组间的互操作非常容易且快速。Tensor不支持的操作，可以先转为 numpy 数组处理，之后再转回 Tensor .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = t.ones(<span class="number">5</span>) <span class="comment"># 新建一个全是1的Tensor</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = a.numpy() <span class="comment"># Tensor -&gt; Numpy</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = t.from_numpy(a) <span class="comment"># Numpy -&gt; Tensor</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>Tensor 和 Numpy 对象<strong>共享内存</strong>，所以他们之间的转换会很快，而且几乎不会消耗资源。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.add_(<span class="number">1</span>) <span class="comment"># 以_结尾的函数会修改自身</span></span><br><span class="line">print(a) </span><br><span class="line">print(b) <span class="comment"># Tensor和Numpy共享内存</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Tensor可通过<code>.cuda</code>方法转换为GPU的Tensor，从而享受GPU带来的加速运算.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在不支持CUDA的机器下，下一步不会运行</span></span><br><span class="line"><span class="keyword">if</span> t.cuda.is_available():</span><br><span class="line">	x = x.cuda()</span><br><span class="line">	y = y.cuda()</span><br><span class="line">	x + y</span><br></pre></td></tr></table></figure>
<p>此处可能会发现GPU的运算速度并未提升太多，这是因为 x 和y 太小且运算也比较简单，而且将数据从内存种转移到显存上还需要花费额外的开销。GPU的优势需要在大规模数据和复杂运算上才能体现出来。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的损失函数和优化器</title>
    <url>/p/loss-function-and-optimizer-in-PyTorch/</url>
    <content><![CDATA[<p>本文介绍了 PyTorch 的损失函数和优化器。</p>
<p><strong>关键字</strong>：PyTorch，损失函数，优化器</p>
<a id="more"></a>
<h2 id="损失函数">损失函数</h2>
<p>一般来说，PyTorch的损失函数有两种形式：函数形式和模块形式。前者调用的是torch.nn.funtional库中的函数，通过传入神经网络预测值和目标值来计算损失函数，后者是torch.nn库里的模块，通过新建一个模块的实例，然后通过调用模块的方法来计算最终的损失函数。</p>
<p>由于训练数据一般以<strong>迷你批次</strong>的形式输入神经网络，最后预测的只也是以迷你批次的形式输出的，而损失函数最后的输出结果应该是一个标量张量，因此，对于迷你批次的化简一般有两种方法，一般是对迷你批次的损失函数求和，第二种是对迷你批次的损失函数u求平均。一般来说，也是默认和最常见的情形，最后输出的损失函数是迷你批次损失函数的平均。</p>
<p>神经网络处理的预测问题主要分为<strong>回归问题和分类问题</strong>。对于回归问题，一般情况下使用的是<code>torch.nn.MSELoss</code>模块，即平方损失函数。通过创建这个模块的实例（一般使用默认参数，即在类的构造函数中不传入任何参数，这样会输出迷你批次的平均；如果要输出迷你批次的每个损失函数，可以指定参数<code>reduction='none'</code>；如果要输出迷你批次的损失函数，可以指定参数<code>reduction='sum'</code>.在实例中传入神经网络预测的值和目标值，能够计算得到最终的损失函数。具体的代码可以参考：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mse = t.nn.MSELoss()  <span class="comment">#初始化平方损失模块</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 随机生成张量t1</span></span><br><span class="line">t2 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 随机生成张量t2</span></span><br><span class="line">mse(t1, t2) <span class="comment"># 计算张量t1和t2之间的平方损失函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.9193, grad_fn=&lt;MeanBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">bse = t.nn.BCELoss() <span class="comment"># 初始化二分类交叉损失函数</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, requires_grad=<span class="literal">True</span>) <span class="comment">#随机生成张量t1</span></span><br><span class="line">t1s = t.sigmoid(t1) <span class="comment"># 对张量求sigmoid函数, 转换为(0, 1)之间的概率</span></span><br><span class="line">t2 = t.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">5</span>,)).float() <span class="comment">#随机生成0, 1整数序列, 并转换为浮点数</span></span><br><span class="line">bse(t1s, t2) <span class="comment">#计算二分类的交叉熵</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.8674, grad_fn=&lt;BinaryCrossEntropyBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">bce_logits = t.nn.BCEWithLogitsLoss() <span class="comment">#初始化交叉熵对数损失函数</span></span><br><span class="line">bce_logits(t1, t2) <span class="comment">#计算二分类的交叉熵 (和前面结果一样)</span></span><br><span class="line"><span class="comment"># 这是因为, BCEWithLogitsLoss会先让输入经过sigmoid函数, 变成概率分布的形式, 再计算二分类交叉熵.</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(0.8674, grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">10</span> <span class="comment"># 定义分类数目</span></span><br><span class="line">t1 = t.randn(<span class="number">5</span>, N, requires_grad=<span class="literal">True</span>) <span class="comment">#随机产生预测张量</span></span><br><span class="line">t2 = t.randint(<span class="number">0</span>, N, (<span class="number">5</span>, ))            <span class="comment">#随机产生目标张量</span></span><br><span class="line">t1s = t.nn.functional.log_softmax(t1, <span class="number">-1</span>) <span class="comment"># 计算预测张量的LogSoftmax</span></span><br><span class="line">nll = t.nn.NLLLoss() <span class="comment">#定义NLL损失函数</span></span><br><span class="line">nll(t1s, t2) <span class="comment">#计算损失函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.3238, grad_fn=&lt;NllLossBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">ce = t.nn.CrossEntropyLoss() <span class="comment">#定义交叉熵损失函数</span></span><br><span class="line">ce(t1, t2) <span class="comment"># 和前面计算结果相同</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.3238, grad_fn=&lt;NllLossBackward&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PyTorch</tag>
        <tag>计算图</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3中decode和encode的区别</title>
    <url>/p/how-to-use-requests-in-python/</url>
    <content><![CDATA[<p>聊聊Python3中decode和encode的区别</p>
<a id="more"></a>
<h3 id="decode和encode的区别">decode和encode的区别</h3>
<p>字符串编码常用类型：utf-8,gb2312,cp936,gbk等。</p>
<p>Python3中，取消了unicode类型，代替它的是使用unicode字符的字符串类型(str)，字符串类型(str)成为了基础类型，编码后的类型成为了字节类型(bytes)</p>
<p>bytes----(decode)----&gt;str-----(encode)-----&gt;bytes</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = <span class="string">&#x27;中文&#x27;</span>                 <span class="comment">#指定字符串类型对象u</span></span><br><span class="line">s = u.encode(<span class="string">&#x27;gb2312&#x27;</span>)     <span class="comment">#以gb2312编码对u进行编码, 获得bytes类型对象s</span></span><br><span class="line">u1 = s.decode(<span class="string">&#x27;gb2312&#x27;</span>)    <span class="comment">#以gb2312编码对s进行解码, 获得str类型对象u</span></span><br><span class="line">u2 = s.decode(<span class="string">&#x27;utf-8&#x27;</span>)     <span class="comment">#以utf-8编码对s进行解码, 将无法获得还原原来的字符串内容</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>decode</tag>
        <tag>encode</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3中的正则表达式</title>
    <url>/p/how-to-use-re-in-python/</url>
    <content><![CDATA[<p>摘要：这个模块提供了正则表达式匹配操作。模式和被搜索的字符串既可以是unicode字符串(str类型)，也可以是8位字节串。但是两者不能混用。当进行替换操作时，替换字符串的类型也必须与所用的模式和搜索的字符串类型一致。</p>
<p>关键字：Python，正则表达式</p>
<a id="more"></a>
<p>正则表达式使用反斜杠字符来表示特殊形式或是允许在使用特殊字符时不引发他们的特殊含义。例如，要匹配一个反斜杠字面值，用户可能必须写成 <code>'\\\\'</code> 来作为模式字符串，因为正则表达式必须为 <code>\\</code>，而每个反斜杠在普通 Python 字符串字面值中又必须表示为 <code>\\</code>。</p>
<p>解决办法时对于正则表达式样式使用Python的原始字符串表达法；在带有<code>'r'</code>前缀的字符串字面值中，反斜杠不必做任何特殊处理。</p>
<p>因此<code>r''\n</code>表示包含<code>\</code>和<code>n</code>的两个字符的字符串，而""则表示只包含一个换行符的字符串。样式在Python代码中通常都会使用这种原始字符串表示法来表示。</p>
<p>绝大多数正则表达式操作都提供模块函数和方法，在编译正则表达式这些函数是一个途径，不需要先编译一个正则对象，但是损失了一些优化参数。</p>
<h3 id="正则表达式语法">正则表达式语法</h3>
<p>一个正则表达式指定了一系列与之匹配的字符串；模块内的函数可以检查某个字符串是否跟跟定的正则表达式相匹配（或者一个正则表达式是否匹配到一个字符串）。</p>
<p>正则表达式可以拼接；如果A和B都是正则表达式，那么AN</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中__getattr__等的用法</title>
    <url>/p/usage-of-getattr-and-else-in-Python/</url>
    <content><![CDATA[<p>在使用Python的过程中可能遇到以下几个函数：</p>
<ul>
<li><code>getattr</code></li>
<li><code>__getattr__</code></li>
<li><code>__getattribute__</code></li>
<li><code>__get__</code></li>
</ul>
<p>如何区别他们，如何在编程中正确使用他们呢？</p>
<a id="more"></a>
<h3 id="getattr">getattr</h3>
<p><code>getattr (object, name[, default])</code>是Python的内置函数之一，它的作用是获取对象的属性。</p>
<ul>
<li>object 对象</li>
<li>name 属性名</li>
<li>default 当属性不存在时，返回的默认值</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.x = x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Foo(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.x</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;bar&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="getattr-_">_ <strong>getattr _ </strong></h3>
<p><code>object. __getattr__(self, name)</code>是一个对象方法，如果找不到对象的属性时会调用这个方法。</p>
<p>这个方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>注意，如果通过正常机制能找到对象属性的话，不会调用<code>__getattr__</code>方法。</p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bamf</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.bamf = bamf</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&#x27;Frob does not have `&#123;&#125;` attribute.&#x27;</span>.format(str(name))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob(<span class="string">&quot;bamf&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bar</span><br><span class="line"><span class="string">&#x27;Frob does not have `bar` attribute.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line"><span class="string">&#x27;bamf&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="getattribute-__-__">____ getattribute __ __</h3>
<p>当访问 某个对象的属性时，会无条件的调用这个方法。这个方法只适用于新式类。 新式类就是集成自object或者type的类。</p>
<p>如果类还同时定义了<code>__getattr__()</code>方法，则不会调用<code>__getattr__()</code>方法，除非在<code>__getattribute__()</code>方法中显示调用<code>__getattr__()</code>或者抛出了<code>AttributeError</code>。</p>
<p>该方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>为了避免在方法中出现无限递归的情况，应该总是使用基类的方法来获取属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>object.__getattribute__(self, name).</span><br></pre></td></tr></table></figure>
<p>语法：<code>object. __getattribute__(self, name)</code></p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span>(<span class="params">object</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">&quot;getting `&#123;&#125;`&quot;</span>.format(str(name))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> object.__getattribute__(self, name)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line">getting `bamf`</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="get-__">____ __ get __</h3>
<p><code>__get__()</code>方法是描述符方法之一。描述符用于将访问对象属性转变成调用描述符方法。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, obj, objtype</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;get value=%s&quot;</span> % self.val </span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, obj, val</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;set value=%s&quot;</span> % val</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">object</span>):</span></span><br><span class="line">    age = Descriptor()</span><br><span class="line"></span><br><span class="line">stu = Stu()</span><br><span class="line">stu.age = <span class="number">12</span>    <span class="comment"># set value=12</span></span><br><span class="line"><span class="keyword">print</span> stu.age   <span class="comment"># get value=12</span></span><br><span class="line">                <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中pickle模块的使用</title>
    <url>/p/use-of-pickle-module-in-python/</url>
    <content><![CDATA[<p>废话不多说，直接上代码。</p>
<a id="more"></a>
<h5 id="把变量写入文件">把变量写入文件</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;I am a boy.&quot;</span></span><br><span class="line">file = open(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(data, file, [protocol])</span><br><span class="line"><span class="comment">#data----变量名称</span></span><br><span class="line"><span class="comment">#file----文件指针</span></span><br><span class="line"><span class="comment">#protocol----序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本</span></span><br></pre></td></tr></table></figure>
<h5 id="从文件中读取变量">从文件中读取变量</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">data = pickle.load(file)</span><br></pre></td></tr></table></figure>
<h5 id="with-open函数打开文件的各种方式">With open函数打开文件的各种方式</h5>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th><strong>type</strong></th>
<th>info</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr class="even">
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="odd">
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr class="even">
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr class="odd">
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="even">
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr class="odd">
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr class="even">
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="odd">
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr class="even">
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr class="odd">
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="even">
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 requests如何定制header</title>
    <url>/p/how-to-customize-headers-for-python-requests/</url>
    <content><![CDATA[<p>聊聊Python的request库</p>
<a id="more"></a>
<h3 id="定制请求头">定制请求头</h3>
<p>如果想为请求添加HTTP头部，只需要简单传递一个<code>dict</code>给<code>headers</code>参数即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;&quot;</span><br><span class="line">payload &#x3D; &#123;&#39;some&#39;:&#39;data&#39;&#125;</span><br><span class="line">headers &#x3D; &#123;&#39;content-type&#39;:&#39;application&#x2F;json&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(url, data&#x3D;json.dumps(payload), headers&#x3D;headers)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中下划线命名模式</title>
    <url>/p/underscore-naming-pattern-in-python/</url>
    <content><![CDATA[<p>直接上表格。</p>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 9%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">命名模式</th>
<th style="text-align: center;">举例</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">单前导下划线</td>
<td style="text-align: center;">_var</td>
<td>命名约定，仅供内部使用。通常不会由Python解释器内部执行（通配符导入除外），只作为对程序员的提示。通配符导入时，_var代表的<strong>属性</strong>或者<strong>函数</strong>不会被导入。</td>
</tr>
<tr class="even">
<td style="text-align: center;">单末尾下划线</td>
<td style="text-align: center;">var_</td>
<td>按照约定使用避免与Python关键字的命名冲突。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">双前导下划线</td>
<td style="text-align: center;">__var</td>
<td>当在类上下文使用时，触发名称修饰，由Python解释器强制执行。<br /><strong>Tips：</strong>可以理解为Python对象的<strong>私有属性</strong>。仅供<strong>Python内部成员函数</strong>使用。</td>
</tr>
<tr class="even">
<td style="text-align: center;">双前导和双末尾下划线</td>
<td style="text-align: center;">__var__</td>
<td>表示Python语言定义的特殊方法，避免在你自己的属性中使用这种特殊方法。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">单下划线</td>
<td style="text-align: center;">_</td>
<td>有时用作临时或者不关心的变量名称，也表示<strong>Python REPL</strong>最近的一个表达式的结果。</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次重装系统</title>
    <url>/p/an-experience-of-reinstalling-win10/</url>
    <content><![CDATA[<p>本文主要介绍了如何使用U盘进行重装系统，主要面向电脑小白用户。</p>
<p><strong>关键字</strong>：重装win10，电脑重装</p>
<a id="more"></a>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的map函数</title>
    <url>/p/how-map-functions-works-in-Python/</url>
    <content><![CDATA[<p>Python内建了map()函数。</p>
<a id="more"></a>
<p>Python内建了map()函数。</p>
<p>map函数接受了两个参数，一个是函数，一个是<strong>Iterable</strong>(可迭代对象)。map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p>
<p>举个栗子，例如我们有一个函数f(x)=x^2，要把这个函数作用在一个list[1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map函数实现。</p>
<p>下面来看Python代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>
<p><code>map()</code>传入的第一个参数是f，即函数对象本身。</p>
<p>返回结果r是一个<strong>Iterator</strong>(迭代器)，<strong>Iterator</strong>是一个<strong>惰性序列</strong>，因此通过<code>list()</code>函数让他把整个序列都计算出来并返回一个list。</p>
<p>那什么是惰性序列呢？首先我们要知道什么是惰性求值</p>
<p>引自维基百科：https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC</p>
<blockquote>
<p>在编程语言中，惰性求值又译为惰性计算、懒惰求值，也成为传需求调用。是一个计算机编程中的概念，目的是最小化计算机要做的工作。惰性求值的相反是及早求值，这是一个大多数编程所以拥有的普通计算方式。</p>
</blockquote>
<p>Python的惰性序列多指<strong>iterator</strong>，其特点如上文所述，具有惰性计算特点的序列被称为惰性序列。</p>
<p>我的理解：你不主动去遍历它，就不会计算其中元素的值。</p>
<p>如果你试图输出map对象，系统只会告诉你当前map对象在内存里的地址，而不会打印map对象自身。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(r)</span><br><span class="line"><span class="comment">#&lt;map object at 0x7faa2ddd97c0&gt;</span></span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>
<p>继续说map函数。你可能会想，不需要map()函数，写一个循环，也可以计算出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">    L.append(f(n))</span><br><span class="line">print(L)</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>
<p>的确可以。但是，从上面的循环代码，能一眼看明白<strong>把f(x)作用在list的每一个元素并把结果生成一个新的list</strong>吗？</p>
<p>map作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x^2，还可以计算任意复杂的函数，比如，把这个list所有数字转成字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(map(str, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="comment">#[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>只需要一行代码。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python升级pip</title>
    <url>/p/how-to-upgrade%20pip-in-python/</url>
    <content><![CDATA[<p>安装pip：<code>apt install python3-pip</code></p>
<p>升级pip：<code>python -m pip install --upgrade pip</code></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程的应用</title>
    <url>/p/how-to-use-python-multithreading/</url>
    <content><![CDATA[<p>创建线程之前，需要首先了解一下进程和线程的区别，父线程和子线程的区别：</p>
<ul>
<li>每个进程至少有一个线程，作为程序的入口，这个线程就是主线程。</li>
<li>每个进程至少有一个主线程，其他线程成为工作线程。</li>
<li>父线程：如果线程A启动了一个线程B，A就是B的父线程。</li>
<li>子线程：B就是A的子线程。</li>
</ul>
<a id="more"></a>
<h4 id="使用threading.thread模块创建线程">使用threading.Thread模块创建线程</h4>
<p>Python3通过threading包提供对线程的支持。</p>
<h5 id="简单使用">简单使用</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s, time_loop</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line">        print(<span class="string">f&quot;The delay is <span class="subst">&#123;delay_s&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello, args=[<span class="number">2</span>, <span class="number">2</span>]).start()</span><br><span class="line">threading.Thread(target=say_hello, args=[<span class="number">1</span>, <span class="number">1</span>]).start()</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading01.png" /></p>
<p>程序运行到12行时，启动子线程1执行say_hello(2, 2)，此时主线程继续向下执行；</p>
<p>程序运行到13行时，启动子线程2执行say_hello(1, 1)，此次主线程执行完毕，等待子线程执行完毕。</p>
<p>1秒后子线程2先执行完毕，切换到另一个子线程1继续执行。</p>
<h5 id="daemon属性的设置">daemon属性的设置</h5>
<p>Python中，在构造线程对象时，可以设置<code>daemon</code>属性，这个属性必须在start方法前设置好。</p>
<p>主线程是程序启动第一个线程，主线程可以在启动<code>n</code>个子线程。</p>
<p>daemon属性可以不设置，默认为<code>None</code>，主线程默认是<code>False</code>。</p>
<p>daemon属性分为以下三种：</p>
<h6 id="daemonfalse">daemon=False</h6>
<p>当<code>daemon</code>属性为<code>False</code>时，父线程在运行完毕时，会等待所有子线程退出才结束程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s=<span class="number">1</span>, time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_hello daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading02.png" /></p>
<p>通过<code>isDaemon()</code>方法可以返回当前线程的<code>daemon</code>值，主线程默认是<code>False</code>，子线程也是<code>False</code>的原因是创建线程对象时指定了<code>daemon=False</code>.</p>
<p>主程序在构造线程对象时就立即启动了，然后子线程返回了结果中的第一行内容，然后sleep(1)模拟IO，此时CPU发现子线程阻塞了，马上切换到主线程继续执行，主线程先后打印第二行和第三行，此时主线程的代码已经执行到结尾。</p>
<p>因为主线程为子线程的<code>daemon</code>值设置为<code>False</code>，这时就又发生了线程切换到子线程，子线程先后执行完第四行和第五行，然后子线程就全部执行完毕，主线程看到子线程退出后，也立即退出，整个程序结束。</p>
<h6 id="daemontrue">daemon=True</h6>
<p>当<code>daemon</code>为<code>True</code>时，父线程在执行完毕后，无论子线程是否正在运行，都会伴随父进程一起退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">delay_s=<span class="number">1</span>, time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_hello daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(delay_s)</span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_hello, daemon=<span class="literal">True</span>).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading03.png" /></p>
<p>当daemon设置为True时，即主线程不关心子线程状态，主线程退出，子线程也必须跟着退出。</p>
<p>运行结果中子线程就执行了一行语句，此时CPU发现子线程阻塞，线程切换到主线程，主线程执行完最后两句，就立即退出，整个程序结束。</p>
<h6 id="daemonnone">daemon=None</h6>
<p>daemon属性可以不设置，默认值是None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_grandson_thread</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">f&quot;say_grandson_thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>\n&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_son_thread</span>(<span class="params">time_loop=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(time_loop):</span><br><span class="line">        print(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, say_son_thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>\n&quot;</span>)</span><br><span class="line">        threading.Thread(target=say_grandson_thread, daemon=<span class="literal">None</span>).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threading.Thread(target=say_son_thread, daemon=<span class="literal">True</span>).start()</span><br><span class="line">print(<span class="string">f&quot;Main thread daemon is <span class="subst">&#123;threading.current_thread().isDaemon()&#125;</span>&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&quot;Main thread daemon Exit.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading04.png" /></p>
<p>这里在主线程中使用了延迟1秒，来让子线程启动的子线程有机会输出其daemon属性值，如果不设置延迟，还没等到子线程的子线程启动，子线程就结束了，最终导致子线程的子线程无法启动。</p>
<p><img src="https://ftp.fly97.cn/images/fly97.cn/20210426/threading05.png" /></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python时间处理</title>
    <url>/p/time-processing-in-python/</url>
    <content><![CDATA[<p>本文主要介绍了Python时间处理的函数。</p>
<p><strong>摘要</strong>：有时需要在国外的服务器上处理北京时间等非本地时区的时间，经过查找，发现了<code>pytz</code>这个处理时区的包。<code>pytz</code>允许使用Python 2.4或更高版本进行准确的跨平台时区计算。</p>
<p><strong>关键词</strong>：时区计算，pytz，unix时间戳转换</p>
<a id="more"></a>
<h4 id="获得北京时间">获得北京时间</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc = pytz.utc</span><br><span class="line">utc_dt = utc.localize(datetime.utcfromtimestamp(time.time())) <span class="comment"># 获得UTC时间</span></span><br><span class="line"></span><br><span class="line">shanghai = timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>) 						<span class="comment"># 定义一个时区</span></span><br><span class="line">shanghai_dt = utc_dt.astimezone(shanghai)                     <span class="comment"># 将本地时区的时间转换成UTC时间</span></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&#x27;%Y-%m-%d %H:%M:%S %Z%z&#x27;</span>                                <span class="comment"># 定义打印时间</span></span><br><span class="line">print(shanghai_dt.strftime(fmt)                               <span class="comment"># 输出指定时区的时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过Python自带的包也可以方便的进行时区转换。这里使用的是datetime.</p>
<p>datetime 是Python处理日期和时间的标准库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="comment"># 拿到UTC时间，并强制设置时区为UTC+0:00:</span></span><br><span class="line">utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc) </span><br><span class="line">print(utc_dt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># astimezone()将转换时区为北京时间:</span></span><br><span class="line">bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line"> <span class="comment"># 定义打印时间的格式</span></span><br><span class="line">fmt = <span class="string">&#x27;%Y-%m-%d %H:%M:%S %Z%z&#x27;</span>   </span><br><span class="line">bj_dt.strftime(fmt)</span><br><span class="line">print(bj_dt)</span><br></pre></td></tr></table></figure>
<h4 id="打印当地时间">打印当地时间</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br></pre></td></tr></table></figure>
<h4 id="unix时间戳转换">unix时间戳转换</h4>
<h5 id="将时间转换为时间戳">将时间转换为时间戳</h5>
<ul>
<li>利用<code>strptime()</code>函数将时间转换为时间数组</li>
<li>利用<code>mktime()</code>函数将时间数组转换为时间戳</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">dt = <span class="string">&quot;2020-09-26 19:58:25&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment"># 转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br></pre></td></tr></table></figure>
<h5 id="将时间戳转换为时间">将时间戳转换为时间</h5>
<p>在时间戳转换成时间中，首先要将时间戳转换为<code>localtime</code>，再转换为时间的具体格式：</p>
<ul>
<li>利用<code>localtime()</code>函数将时间戳转换为<code>localtime</code>的格式</li>
<li>利用<code>strftime()</code>函数重新格式化为时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">timestamp = <span class="number">1604113349</span></span><br><span class="line"><span class="comment"># 转换为localtime</span></span><br><span class="line">time_local = time.localtime(timestamp)</span><br><span class="line"><span class="comment"># 转换为新的时间格式</span></span><br><span class="line">dt = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time_local)</span><br></pre></td></tr></table></figure>
<p>参考链接</p>
<p>https://www.liaoxuefeng.com/wiki/1016959663602400/1017648783851616</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的一些高级用法</title>
    <url>/p/Some-advanced-usages-of-Python/</url>
    <content><![CDATA[<p>此文介绍了一些Python的一些常见的高级用法。</p>
<a id="more"></a>
<h4 id="format格式化字符串">format格式化字符串</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br></pre></td></tr></table></figure>
<h5 id="按照位置来填充">按照位置来填充</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918213811743.png" alt="image-20200918213811743" /><figcaption>image-20200918213811743</figcaption>
</figure>
<h6 id="同一个参数可以填充多次">同一个参数可以填充多次</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;现在时刻:&#123;0&#125;---&#123;0&#125;&quot;</span>.format(t))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918214059634.png" alt="image-20200918214059634" /><figcaption>image-20200918214059634</figcaption>
</figure>
<h5 id="通过索引来填充">通过索引来填充</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;[0]&#125;&quot;</span>.format(s1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(l1))</span><br><span class="line">print(<span class="string">&quot;&#123;0[0]&#125;,&#123;0[1]&#125;&quot;</span>.format(t1))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918215314962.png" alt="image-20200918215314962" /><figcaption>image-20200918215314962</figcaption>
</figure>
<p>另外一种写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">l1 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">t1 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;p[1]&#125;&quot;</span>.format(p=s1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=l1))</span><br><span class="line">print(<span class="string">&quot;&#123;p[0]&#125;,&#123;p[1]&#125;&quot;</span>.format(p=t1))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918215656093.png" alt="image-20200918215656093" /><figcaption>image-20200918215656093</figcaption>
</figure>
<h4 id="三元运算符">三元运算符</h4>
<p>固定格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[on_true]  if  [expression]  else [on_false]</span><br></pre></td></tr></table></figure>
<p>上式表达的语义为：若<strong>表达式expression</strong>的结果为<strong>真</strong>，该式的结果是<strong>[on_true]</strong>；若<strong>表达式expression</strong>的结果为<strong>假</strong>，则该式的结果是<strong>[on_false]</strong></p>
<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a-b <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> a+b</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918221607752.png" alt="image-20200918221607752" /><figcaption>image-20200918221607752</figcaption>
</figure>
<h4 id="lambda表达式">Lambda表达式</h4>
<p>Python使用Lambda表达式创建匿名函数</p>
<ul>
<li>Lambda只是一个表达式，函数体比def简单的多</li>
<li>Lambda的主体是一个表达式，而不是一个代码块，只能在lambda表达式中封装有限的逻辑进去</li>
<li>Lambda函数拥有自己的名字空间，且不能访问自有参数列表之外或全局名字空间里的参数。</li>
<li>虽然lamda函数看起来只能写一行，却不等于C或C++的内联函数，后者是调用小函数时不占用内存，从而提升运行效率。</li>
</ul>
<p>Lambda表达式语法：<code>lambda argument_list: expression</code></p>
<p>案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">summary = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(<span class="string">&quot;summary=&#123;&#125;&quot;</span>.format(summary(<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918230330027.png" alt="image-20200918230330027" /><figcaption>image-20200918230330027</figcaption>
</figure>
<p>上述lambda表达式与以下函数等价</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summary</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918231354891.png" alt="image-20200918231354891" /><figcaption>image-20200918231354891</figcaption>
</figure>
<h4 id="map函数">map函数</h4>
<p>map是Python的高级函数，为函数式编程提供便利。</p>
<p>形式为<code>map(func, *iterables)</code>：第一个参数func是一个函数的名字；第二个参数为一个可迭代对象。map将函数func应用于列表的所有元素。</p>
<p>在Python3之前，map用于返回一个列表，其中结果列表的每个元素都是应用于列表或元组序列相应元素上的func结果。</p>
<p>在Python3中，map返回一个迭代器。</p>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seq_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">F = list(map(<span class="keyword">lambda</span> x:x*x, seq_list))</span><br><span class="line">print(F)</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200918233144997.png" alt="image-20200918233144997" /><figcaption>image-20200918233144997</figcaption>
</figure>
<p>map可以用于多个列表，列表不必有相同的长度。map会将<code>lambda函数</code>应用于参数列表的元素，即它首先应用于具有第0个索引的元素，然后应用于具有第一个索引的元素，直到第n个索引。</p>
<p>如果一个列表的元素少于其他元素，当最短列表消耗完时，map结束迭代。</p>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">c = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用到多个列表</span></span><br><span class="line">ab = list(map(<span class="keyword">lambda</span> x,y:x + y, a, b))</span><br><span class="line">print(ab)</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200920142041359.png" alt="image-20200920142041359" /><figcaption>image-20200920142041359</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若其中一个列表的元素少于其他元素, 当最短列表消耗完时, map停止迭代</span></span><br><span class="line">ac = list(map(<span class="keyword">lambda</span> x,y:x + y, a, c))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200920142144318.png" alt="image-20200920142144318" /><figcaption>image-20200920142144318</figcaption>
</figure>
<h4 id="filter函数">Filter函数</h4>
<p>filter也是Python的高级函数，为函数式编程提供便利。其作用是对序列中元素进行筛选，最终获得符合条件的序列。其一般形式为<strong>filter(function, iterable)</strong>，函数提供了一种优雅的方式来过滤掉序列中那个的所有元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 找到序列中的偶数</span></span><br><span class="line">double_number = list(filter(<span class="keyword">lambda</span> x:x % <span class="number">2</span> ==<span class="number">0</span>, number))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200920144322294.png" alt="image-20200920144322294" /><figcaption>image-20200920144322294</figcaption>
</figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python科学计算库Numpy</title>
    <url>/p/an-introduction-to-numpy/</url>
    <content><![CDATA[<p><strong>摘要：</strong>Numpy是一个开源的Python科学计算库，它是Python科学计算库的基础库，许多其他著名的科学计算库如Pandas、Scikit-learn等，都要用的Numpy库的一些功能。</p>
<p><strong>关键词：</strong>科学计算，Numpy</p>
<a id="more"></a>
<p>Numpy是Python快速处理大型矩阵的科学计算库，Numpy允许你在Python中做向量矩阵的运算，而且很多底层的函数都是用C语言写的，将获得在普通Python中无法达到的运算速度。</p>
<p>什么是科学计算？科学计算是一个与定量分析、数学模型构建以及利用计算机分析和解决科学问题相关的相关领域。 <strong>查看Numpy版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy</span><br><span class="line"></span><br><span class="line">print(numpy.__version__)</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920154143301.png" alt="image-20200920154143301" /><figcaption>image-20200920154143301</figcaption>
</figure>
<h3 id="初识numpy">初识Numpy</h3>
<p><strong>Numpy</strong>的主要对象是同质多维数组，也就是在一个元素(通常是数字)表中，元素的类型都是相同的，其中可以通过正整数的元组来对元素进行索引。</p>
<p>在Numpy中，数组的维度被称为轴(axes)，轴的数量被称为秩(rank)。例如在三维空间中一个点的坐标【1，2，1】就是秩为1的数组，因为它只有一个轴，这个轴的长度为3。</p>
<p><strong>Numpy</strong>的数组类称为<strong>ndarray</strong>，别名为array。<strong>numpy.array</strong>与标准Python库类<strong>array.array</strong>不同。标准库类中只能处理一维数组而且功能相对较少。下面我们来认识下<strong>ndarray</strong>对象的常见属性。</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>T</td>
<td>转置，与self.transpose()相同，如果维度小于2，返回self</td>
</tr>
<tr class="even">
<td>size</td>
<td>数组中元素个数，等于shape元素的乘积</td>
</tr>
<tr class="odd">
<td>itemsize</td>
<td>一个类型为float64的元素的数组itemsize为8=(64/8)，而一个complex32的数组itersize为4=(32/8). 该属性等价于ndarray.dtype.itemsize</td>
</tr>
<tr class="even">
<td>dtype</td>
<td>数组元素的数据类型对象。可以用标准Python类型来创建或指定dtype，或者在后面加上Numpy的类型：numpy.int32，numpy.int16，numpy.float64等等</td>
</tr>
<tr class="odd">
<td>ndim</td>
<td>数组的轴（维度）的数量。在Python中，维度的数量通常被称为rank</td>
</tr>
<tr class="even">
<td>shape</td>
<td>数组的维度，为一个整数元组。表示每个维度上的大小。对于一个m行n列的矩阵来说，shape就是(n, m)</td>
</tr>
<tr class="odd">
<td>data</td>
<td>该缓冲区中包含了数组的实际元素，通常情况下不需要使用这个属性因为我们会使用<strong>索引</strong>的方式来访问数组中的元素。</td>
</tr>
<tr class="even">
<td>Flat</td>
<td>返回数组的一维迭代器</td>
</tr>
<tr class="odd">
<td>imag</td>
<td>返回数组的虚部</td>
</tr>
<tr class="even">
<td>real</td>
<td>返回数组的实部</td>
</tr>
<tr class="odd">
<td>nbytes</td>
<td>数组中所有元素的字节长度</td>
</tr>
</tbody>
</table>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">4</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164603559.png" alt="image-20200920164603559" /><figcaption>image-20200920164603559</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920164658559.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920165038789.png" alt="image-20200920165038789" /><figcaption>image-20200920165038789</figcaption>
</figure>
<p>以上说明，通过np.random.random(4)生成的一个浮点数组，类型为numpy.ndarray，a.shape显示的<strong>长度</strong>为4。</p>
<p>【这里的数组可以理解为一维数组】</p>
<h3 id="numpy数据类型">Numpy数据类型</h3>
<p>对于科学计算来说，Python自带的整型，浮点数和复数类型还远远不够。因此Numpy添加了许多数据类型， 在实际应用中，我们需要不同精度的数据类型，它们占用的内存空间也是不同的，在numpy中，大部分数据类型是以数字结尾的，这个数字表示其在内存中占用的位数。</p>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>描述规则</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>bool</td>
<td>用一位存储的bool类型</td>
</tr>
<tr class="even">
<td>inti</td>
<td>由所在平台决定其精度的整数（一般为int32或者int64）</td>
</tr>
<tr class="odd">
<td>int8</td>
<td>整数，范围为-128至127</td>
</tr>
<tr class="even">
<td>int16</td>
<td>整数，范围为-32768至32767</td>
</tr>
<tr class="odd">
<td>int32</td>
<td>整数，范围为-2<sup>31至2</sup>31-1</td>
</tr>
<tr class="even">
<td>int64</td>
<td>整数，范围为-2<sup>63至2</sup>63</td>
</tr>
<tr class="odd">
<td>uint8</td>
<td>无符号整数，范围为0至255</td>
</tr>
<tr class="even">
<td>uint16</td>
<td>无符号整数，范围为0至65535</td>
</tr>
<tr class="odd">
<td>uint32</td>
<td>无符号整数，范围为0至2^32-1</td>
</tr>
<tr class="even">
<td>uint64</td>
<td>无符号整数，范围为0至2^64</td>
</tr>
<tr class="odd">
<td>float16</td>
<td>半精度浮点数(16位)，其中一位表示正负号，5位表示指数，10位表示尾数</td>
</tr>
<tr class="even">
<td>float32</td>
<td>单精度浮点数(32位)，其中一位表示正负号，8位表示指数，23位表示尾数</td>
</tr>
<tr class="odd">
<td>float64或float</td>
<td>双精度浮点数(64位)，其中一位表示正负号，11位表示指数，52位表示位数</td>
</tr>
<tr class="even">
<td>complex64</td>
<td>复数，分别用两个32位浮点数表示实部和虚部</td>
</tr>
<tr class="odd">
<td>complex128或complex</td>
<td>复数，分别用两个64位浮点数表示实部和虚部</td>
</tr>
</tbody>
</table>
<p>在使用numpy过程中，可以通过dtype来指定数据类型，通常这个参数是可选的。也可以通过astype()来指定。同样，每一种数据类型均有对应的类型转换函数。在Python中，通常不要求内存控制指定。</p>
<p><strong>Numpy数据类型操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定数据类型</span></span><br><span class="line">print(np.array(<span class="number">5</span>, dtype = int))</span><br><span class="line"></span><br><span class="line">print(np.array(<span class="number">5</span>).astype(float))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line">print(float(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(bool(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">print(float(<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182149479.png" alt="image-20200920182149479" /><figcaption>image-20200920182149479</figcaption>
</figure>
<p><strong>查看Numpy数据类型</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(set(np.typeDict.values()))</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920182353862.png" alt="image-20200920182353862" /><figcaption>image-20200920182353862</figcaption>
</figure>
<h3 id="numpy创建数组">Numpy创建数组</h3>
<h4 id="通过列表或者元组转化">通过列表或者元组转化</h4>
<p>在Python内建对象中，数组有三种形式：列表（list）、元组（tuple）、字典（dict）。具体形式如下：</p>
<ul>
<li>list: [1, 2, 3]</li>
<li>tuple: (1, 2, 3)</li>
<li>dict: {a:1, b:2}</li>
</ul>
<p>使用np.array将<strong>列表或元组</strong>转换成narray数组。其方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(object, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, </span><br><span class="line">         order=<span class="string">&#x27;K&#x27;</span>, subook= <span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>相关参数如下：</p>
<ul>
<li>object：输入对象列表、元组等。</li>
<li>dtype：数据类型。如果没有给出，则类型被保存为所需对象的最小类型。</li>
<li>copy：布尔类型，默认为<strong>True</strong>，表示复制对象。</li>
<li>order：顺序。</li>
<li>subok：布尔类型，表示子类是否被传递。</li>
</ul>
<p><strong>使用np.array创建数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;, type of a:&#123;&#125;&quot;</span>.format(a, type(a)))</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920184454753.png" alt="image-20200920184454753" /><figcaption>image-20200920184454753</figcaption>
</figure>
<h4 id="np.arange函数创建数组">np.arange()函数创建数组</h4>
<p>np.arange()的功能是在给定区间内创建<strong>等差数组</strong>。arange类似range函数，接触过Python的人或许对range函数比较熟悉。例如在for循环中，经常用到range。下面通过range来学习arange，主要区别是<strong>返回值类型不同</strong>。</p>
<p>range返回的是list，np.arange返回的是narray数组。</p>
<ol type="1">
<li>range函数为 range(start, stop[, step])，根据start和stop指定的范围以及step设定的步长，生成一个序列，函数返回的是一个range object。这里的[start, stop]是一个<strong>前闭后开</strong>区间。</li>
</ol>
<ul>
<li>start：计数从start开始，默认是从0开始，例如range(5)等价于range(0, 5)</li>
<li>stop：计数从stop结束，但不包括stop，例如range(0, 5)=[0, 1, 2, 3, 4]</li>
<li>step：每次跳跃的间距，默认为1且<strong>不支持步长为小数</strong>，例如range(0, 5)等价于range(0, 5, 1)</li>
</ul>
<p>案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = range(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">b = range(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">a1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">b1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> b]</span><br><span class="line">print(<span class="string">&quot;type of a:&#123;0&#125;, a:&#123;1&#125;, b:&#123;2&#125;,  a1:&#123;3&#125;, b1:&#123;4&#125;&quot;</span>.format(type(a), a, b, a1, b1))</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920190839464.png" alt="image-20200920190839464" /><figcaption>image-20200920190839464</figcaption>
</figure>
<ol start="2" type="1">
<li>arange函数为arange(start=None, stop=None, step=None, dtype=None), 根据<strong>start</strong>与<strong>stop</strong>指定的范围以及<strong>step</strong>设定的步长，生成一个<strong>ndarry</strong></li>
</ol>
<ul>
<li>start与stop参数同range。</li>
<li>step：步长用于设置值之间的间隔，支持<strong>步长为小数</strong>。</li>
<li>dtype：可选参数，可以设置返回ndarray的值类型。</li>
</ul>
<p><strong>np.arange()案例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">a2 = np.arange(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a:&#123;&#125;,a2:&#123;&#125;&quot;</span>.format(a,a2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20200920191959047.png" alt="image-20200920191959047" /><figcaption>image-20200920191959047</figcaption>
</figure>
<h4 id="np.linspace生成等差数列">np.linspace()生成等差数列</h4>
<p>np.linspace方法也可以像np.arange方法一样，创建数值有规律的数组。linespace用于在指定区域返回间隔均匀的值，其方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linespace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, restep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>start：序列的起始值。</p></li>
<li><p>stop：序列的结束值。</p></li>
<li><p>num：生成的样本数，默认为50。</p></li>
<li><p>endpoint：布尔值，若为True，则最后一个样本包含在序列内。</p></li>
<li><p>restep：布尔值，若为True，返回间距。</p></li>
<li><p>dtype：数组的类型。</p></li>
</ul>
<h4 id="np.concatenate数组拼接">np.concatenate()数组拼接</h4>
<p>numpy提供了numpy.concatenate()函数，能够一次完成多个数组的拼接。</p>
<p>实例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])</span><br><span class="line">c = np.array([<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>])</span><br><span class="line">np.concatenate((a,b,c),axis=<span class="number">0</span>)     <span class="comment">#axis=0是默认值</span></span><br><span class="line"><span class="comment"># array([1,2,3,11,22,33,44,55,66]) #对于一维数组拼接，axis的值不影响最后的结果</span></span><br></pre></td></tr></table></figure>
<p>实例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">np.concatenate((a,b),axis=<span class="number">0</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;array([[ 1,  2,  3],          #对应列拼接</span></span><br><span class="line"><span class="string">       [ 4,  5,  6],</span></span><br><span class="line"><span class="string">       [11, 21, 31],</span></span><br><span class="line"><span class="string">       [ 7,  8,  9]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">np.concatenate((a,b),axis=<span class="number">1</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 1,  2,  3, 11, 21, 31],  #对应行拼接</span></span><br><span class="line"><span class="string">       [ 4,  5,  6,  7,  8,  9]])  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>oncatenate()效率更高，适合大规模的数据拼接。</p>
]]></content>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python装饰器abstractmethod</title>
    <url>/p/how-to-use-python-abstractmethod/</url>
    <content><![CDATA[<p>利用Python装饰器abstractmethod实现纯虚函数</p>
<a id="more"></a>
<p><code>@abstractmethod</code>用于程序接口的控制，含有<code>@abstractmethod</code>修饰的父类不能被实例化，且继承的子类必须实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadTools</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_urls</span>(<span class="params">self</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpyunTools</span>(<span class="params">UploadTools</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am upyuntools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am upload method in UpyunTools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am delete method in UpyunTools.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;I am delete method in UpyunTools&quot;</span>)</span><br><span class="line">    <span class="comment"># def get_urls(self) -&gt; str:</span></span><br><span class="line">    <span class="comment">#     print(&quot;I am get_urls method in UpyunTools.&quot;)</span></span><br><span class="line">    <span class="comment">#     return None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upyun_tools = UpyunTools()</span><br><span class="line">    upyun_tools.upload()</span><br><span class="line">    upyun_tools.get_urls()</span><br><span class="line">    upyun_tools.delete()</span><br></pre></td></tr></table></figure>
<p>将子类get_urls方法注释后无法运行：</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210505/abstractmethod_02.png" /></p>
<p>将子类的<code>get_urls</code>方法修改后可以运行：</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210505/abstractmethod_01.png" /></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>abstractmethod</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS系统学习小记(一)</title>
    <url>/p/ROS-system-learning-notes-01/</url>
    <content><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p>
<p><strong>关键词：</strong>ROS</p>
<a id="more"></a>
<h3 id="ros架构及概念">ROS架构及概念</h3>
<p>ROS的架构经过设计并划分为三部分，每一部分都代表一个层级的概念：</p>
<ul>
<li>文件系统级（Filesystem level)</li>
<li>计算图级(Computation Graph level)</li>
<li>社区级(Community level)</li>
</ul>
<p>第一级是文件系统级。在这一级，我们会使用一组概念来解释ROS的内部构成、文件夹结构，以及工作所需要的核心文件。</p>
<p>第二级是计算图级，体现的是进程和系统之间的通信。在相关小节中，我们将学习ROS的各个概念和功能，包括建立系统、处理各类进程、与多台机器通信等。</p>
<p>第三级是社区级，我们将解释一系列的工具和概念，包括在开发人员之间如何共享知识、算法和代码。由于强大社区的支持，不仅提高了初学者理解复杂软件的能力，还解决了最常见的问题。</p>
<h4 id="理解ros文件系统级">理解ROS文件系统级</h4>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200923190637341.png" alt="image-20200923190637341" /><figcaption>image-20200923190637341</figcaption>
</figure>
<p>与其他操作系统类似，一个ROS程序的不同组件要放在不同的文件夹下，这些文件夹是根据功能的不同来对文件进行组织的。</p>
<ol type="1">
<li>功能包（Package）：功能包构成ROS中的原子级。一个功能包具有创建ROS程序最小结构和最少内容。它可以包含ROS运行时进程（节点）、配置文件等。</li>
<li>功能包清单（Package Manifest）：功能包清单提供关于功能包、许可证、依赖关系、编译标志等的信息。包清单又一个名为<strong>package.xml</strong>的文件管理。</li>
<li>元功能包（Metapackage）：如果你希望将几个具有<strong>某些功能的包组织在一起</strong>，那么你将使用一个元功能包。这种包的组织形式<strong>之前被称</strong>为功能包集（Stack ）。功能包集被废除，现在使用元功能包实现这个功能。在ROS中，存在大量不同用途的元功能包，例如<strong>导航功能包集</strong>。</li>
<li>元功能包清单（Metapackage manifest）：元功能包清单（package.xml）类似普通功能包但又一个XML格式的导出标记，他在结构上也有一定的限制。</li>
<li>消息类型（Message（msg）type）：消息是一个进程发送到其他进程的消息。ROS 的消息类型的说明存储在<strong>my_package/msg/MyMessageType.msg</strong>中。</li>
<li>服务类型（Service (srv) Type）：服务描述说明存储在<strong>my_package/srv/MyServiceType.srv</strong>中，为ROS中由每个进程提供的服务定义请求和响应数据结构。</li>
</ol>
<p>下面的截图说明了<strong>turtlesim</strong>功能包的内容。所看到的是一系列文件和文件夹，包含代码、图片、启动文件服务和消息。以下只是文件的一个简短列表。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200923193232140.png" alt="image-20200923193232140" /><figcaption>image-20200923193232140</figcaption>
</figure>
<h5 id="工作空间">工作空间</h5>
<p>工作空间包含功能包，功能包包含源文件和环境和工作空间，是集中开发的一种好方式。</p>
<p>下图所示是一个典型的工作空间。<img src="https://ftp.fly97.cn/image/image-20200924144159317.png" alt="image-20200924144159317" /></p>
<p>主要包含一下内容：</p>
<ul>
<li>源文件空间（Source space）：在源空间（src文件夹）中，放置了功能包、项目、复制的包等。<strong>最重要文件：CMakeLists.txt</strong>。当在工作空间配置包时，通过cmake调用CMakeLists.txt。这个文件是通过<strong>catkin_init_workspace</strong>命令创建的。</li>
<li>编译空间（build space）：在build文件夹里，cmake和catkin为功能包和项目保存缓存信息、配置和其他中间文件。</li>
<li>开发空间（Development （devel）space）：devel文件夹用来保存编译后的程序，这些是无需安装就能用来测试的程序。</li>
</ul>
<p>用catkin编译包有两个选项。第一个是使用标准CMake工作流程。通过使用此方式。可以一次编译一个包，见以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cmake packageToBuild/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>如果想编译所有的包，可以用<strong>catkin_make</strong>命令行，见以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p>在ROS配置的编译空间目录中，这两个命令编译出可执行文件。</p>
<p>ROS支持覆盖（overlay）。当你正在使用ROS功能包例如（<strong>Turtlesim</strong>）时，可以使用安装版本，也可以下载源文件并编译它来使用你修改后的版本。</p>
<p>ROS允许使用自己版本的功能包去替代安装版本。下一章我们将使用这个功能来创建自己的插件。</p>
<h5 id="功能包">功能包</h5>
<p>包指的是一种特定结构的文件和文件夹组合。</p>
<table>
<thead>
<tr class="header">
<th>目录</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>include/package_name</td>
<td>此目录包含了需要的库的头文件</td>
</tr>
<tr class="even">
<td>msg/</td>
<td>如果开发需要<strong>非标准</strong>的消息，请把文件放在这里。</td>
</tr>
<tr class="odd">
<td>script/</td>
<td>其中包含Bash、Python或者任何其他脚本语言的可执行脚本。</td>
</tr>
<tr class="even">
<td>src/</td>
<td>存储程序源文件。可以为节点创建一个文件夹或按照希望的方式组织它。</td>
</tr>
<tr class="odd">
<td>srv/</td>
<td>（srv）服务类型</td>
</tr>
<tr class="even">
<td>CMakeLists.txt</td>
<td>CMake的生成文件</td>
</tr>
<tr class="odd">
<td>package.xml</td>
<td>功能包清单文件</td>
</tr>
</tbody>
</table>
<p>ROS提供的工具（命令）</p>
<table>
<thead>
<tr class="header">
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>rospack</td>
<td>使用此命令来获取信息或在系统中查找包</td>
</tr>
<tr class="even">
<td>catkin_create_pkg</td>
<td>使用此命令创建一个新的功能包</td>
</tr>
<tr class="odd">
<td>catin_make</td>
<td>使用此命令来编译工作空间</td>
</tr>
<tr class="even">
<td>rosdep</td>
<td>使用此命令按照功能包的系统依赖项</td>
</tr>
<tr class="odd">
<td>rqt_dep</td>
<td>使用此命令来查看包的依赖关系图</td>
</tr>
</tbody>
</table>
<p>如果要在文件夹和功能包之间移动文件，ROS提供了非常有用的<strong>rosbash</strong>，功能包，其中包含的非常类似Linux命令的命令。</p>
<table>
<thead>
<tr class="header">
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>roscd</td>
<td>此命令用于更改目录，相当于Linux中的cd命令</td>
</tr>
<tr class="even">
<td>rosed</td>
<td>此命令用来编辑文件</td>
</tr>
<tr class="odd">
<td>roscp</td>
<td>此命令用于从功能包复制文件。</td>
</tr>
<tr class="even">
<td>rosls</td>
<td>此命令列出功能包下的文件，类似Linux中的ls命令。</td>
</tr>
</tbody>
</table>
<p>文件<strong>package.xml</strong>必须在每个功能包中，它用来说明此包相关的各类信息。如果你发现在某个文件夹内包含此文件，那么这个文件夹很可能是<strong>一个包或者元功能包</strong>。</p>
<p>打开<strong>package.xml</strong>文件，可以看到包的名称、依赖关系等信息。功能包清单的作用就是为了方便安装和分发这些功能包。</p>
<p>在<strong>package.xml</strong>文件中使用的两个典型标记是<strong><build_depend></strong>和<strong><run_depend></strong>.</p>
<p><strong><build_depend></strong>标记会显示当前功能包安装之前必须先安装哪些功能包。这是因为新的功能包会使用其他包的一些功能。</p>
<p><strong><run_depend></strong>标记显示运行功能包中代码所需要的包。以下是package.xml文件的示例。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200924154802735.png" alt="image-20200924154802735" /><figcaption>image-20200924154802735</figcaption>
</figure>
<h5 id="元功能包">元功能包</h5>
<p>元包中只有一个文件，这个文件就是<strong>package.xml</strong>。它不包含其他文件，如代码等。</p>
<p>元功能包用于指代其他按照类似功能特性分组的包，例如导航功能包集，ros_tutorials等。</p>
<p>使用迁移的特定规则，可以讲ROS Fuerte中的功能包和功能包集转换为Kinetic等。具体参见http://wiki.ros.org/catkin/migrating_from_rosbuild。</p>
<p>在下图中。可以看到在ros_tutorials元功能包中package.xml的内容。可以看到 &lt;export&gt;标记和&lt;run_depend&gt;标记。这些事功能包清单中必不可缺少的，在下图中也可以看到这些标记。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200924160401768.png" alt="image-20200924160401768" /><figcaption>image-20200924160401768</figcaption>
</figure>
<p>如果你想定位<strong>ros_tutorials</strong>元功能包，可以使用下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rosstack find ros_tutorials</span><br></pre></td></tr></table></figure>
<p>显示路径为：</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200924161034651.png" alt="image-20200924161034651" /><figcaption>image-20200924161034651</figcaption>
</figure>
<p>查看里面的代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /opt/ros/kinetic/share/ros_tutorials/package.xml</span><br></pre></td></tr></table></figure>
<p>注意：Kinetic使用元功能包，不是功能包集，但是<strong>rosstack find</strong> 命令也可以用于查找元功能包。</p>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS系统学习小记(二)</title>
    <url>/p/ROS-system-learning-notes-02/</url>
    <content><![CDATA[<p><strong>概述：</strong>以下是作者与2020年9月23日起在浙江理工大学读研究生一年级时研究ROS实时系统时的笔记。希望能帮到你。</p>
<p><strong>关键词：</strong>ROS</p>
<a id="more"></a>
<h3 id="ros试用练习">ROS试用练习</h3>
<h4 id="ros文件系统">ROS文件系统</h4>
<p>我们通过命令行工具来浏览ROS的文件系统。</p>
<p>为了获得功能包和功能包集的信息,比如,其路径、依赖关系等，我们将使用<strong>rospack</strong>、<strong>rosstack</strong>命令进入功能包和功能包集，并列出其中 的内容。</p>
<p>例如，如果你想要找<strong>turtlesim</strong>包的路径，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rospack find turtlesim </span><br></pre></td></tr></table></figure>
<p>你将要获得以下信息：</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201019194410801.png" alt="image-20201019194410801" /><figcaption>image-20201019194410801</figcaption>
</figure>
<p>如果你想要找到已经在系统安装过的某个<strong>元功能包</strong>，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rospack find ros_comm</span><br></pre></td></tr></table></figure>
<p>你将获得ros-comm元功能包的路径：<img src="https://ftp.fly97.cn/image/image-20201019194825060.png" alt="image-20201019194825060" /></p>
<p><em>注意：功能包是rospack ，元功能包是rosstack，要注意区分。</em></p>
<p>要获得功能包或者功能包集下面的文件列表，需要使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosls turtlesim</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201019195209283.png" alt="image-20201019195209283" /><figcaption>image-20201019195209283</figcaption>
</figure>
<p>更改当前目录，尤其是进入某个文件夹，可以使用roscd命令完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscd turtlesim</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<p>将获得以下新路径：</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201019195406492.png" alt="image-20201019195406492" /><figcaption>image-20201019195406492</figcaption>
</figure>
<h4 id="创建工作空间">创建工作空间</h4>
<p>我们会在工作空间完成本书使用的所有代码。</p>
<p>要查看ROS正在使用的工作空间，请使用下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure>
<p>会看到如下类似信息：<img src="https://ftp.fly97.cn/image/image-20201019195658744.png" alt="image-20201019195658744" /></p>
<p>我们将要创建的文件夹位于<code>/root/dev/catkin_ws/src</code>中。要新建文件夹，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/dev/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>
<p>当创建工作空间文件夹后，里面并没有功能包，只有CMakeList.txt文件。使用下面的命令来<strong>编译工作空间</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p>你将看到类似信息：<img src="https://ftp.fly97.cn/image/image-20201019200504031.png" alt="image-20201019200504031" /></p>
<p>现在输入<code>ls</code>命令，可以看到创建的新文件夹，分别是build和devel文件夹。</p>
<p>输入以下命令，再次初始化ros环境，至此，工作空间创建完毕。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure>
<p>这一步只重新加载了setup.bash文件，如果关闭并打开一个新的命令行窗口，也将得到同样的效果。</p>
<p>输入以下命令，将ROS的初始化脚本加入到bash的配置文件中，这样，每次打开一个新的bash shell窗口时，就自动完成了ROS的初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
<h4 id="创建ros功能包和元功能包">创建ROS功能包和元功能包</h4>
<p>使用以下命令在之前建立的工作空间中创建新的功能包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/src</span><br><span class="line">catkin_create_pkg TEST std_msgs roscpp</span><br></pre></td></tr></table></figure>
<p>此命令的格式包括包的名称和依赖项。在这个示例中，依赖项包括 <strong>std_msgs</strong> 和 <strong>roscpp</strong>.</p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg name [dependencies [dependencies ...]]</span><br><span class="line">positional arguments:</span><br><span class="line">  name                  The name for the package</span><br><span class="line">  dependencies          Catkin package Dependencies</span><br></pre></td></tr></table></figure>
<p>这些依赖项主要包括以下几个：</p>
<ul>
<li>std_msgs：包含了常见的消息类型，表示基本数据类型和其他基本的消息构造，如多维数组。</li>
<li>roscpp：使用C++实现了ROS的各种功能。它提供了一个客户端库，让C++程序员能够调用这些接口快速完成与ROS的主题、服务和参数相关的开发工作。</li>
</ul>
<p>如果所有步骤一切顺利，结果如下图所示：</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201019202650647.png" alt="image-20201019202650647" /><figcaption>image-20201019202650647</figcaption>
</figure>
<p>正如我们看到的，可以使用rospack、roscd和rosls命令来获取新的功能包信息。下面是可以执行的一些操作。</p>
<ul>
<li>rospack profile：此命令用于通知用户ROS中新添加的内容。在安装任何功能包之后使用它。</li>
<li>rospack find TEST：此命令用于查看依赖关系。</li>
<li>rosls TEST：此命令用于查看内容</li>
<li>roscd TEST：此命令会切换到TEST功能包所在的路径。</li>
</ul>
<h4 id="编译ros功能包">编译ROS功能包</h4>
<p>编译功能包的的时候，主要是代码的编译过程，不仅包括用户添加的代码，还包括由消息和服务生成的代码。</p>
<p>为了编译功能包，可以使用<code>catin_make</code>工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/dev/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p>如果没有看到错误提示信息，说明功能包编译成功。</p>
<p>必须在<code>workspace</code>文件夹中运行catkin_make命令。如果在其他文件这样做，命令将无法执行！</p>
<p>当你在TEST文件夹中试图使用catkin_make编译工具包时，你会看到如下错误：</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201019204443411.png" alt="image-20201019204443411" /><figcaption>image-20201019204443411</figcaption>
</figure>
<p>当你在<code>catkin_ws</code>文件夹中执行catkin_make命令时，则会编译成功。</p>
<p>如果编译单个工具包，可以使用如下格式的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make --pkg &lt;package name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="使用ros节点">使用ROS节点</h4>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04更换镜像源</title>
    <url>/p/How-to-change-the-mirror-source-on-Ubuntu-1804/</url>
    <content><![CDATA[<h4 id="ubuntu18.04更换镜像源">Ubuntu18.04更换镜像源</h4>
<h5 id="备份原有镜像源">1.备份原有镜像源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sourses.list.bak</span><br></pre></td></tr></table></figure>
<h5 id="修改etcaptsources.list文件">2.修改/etc/apt/sources.list文件</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#香港中文科技大学源</span></span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe </span><br></pre></td></tr></table></figure>
<h5 id="其他相关命令">3.其他相关命令</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Ubuntu18.04</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装nodejs并更改npm镜像源</title>
    <url>/p/How-to-install-nodejs-and-change-npm-mirror-source-on-Ubuntu/</url>
    <content><![CDATA[<h4 id="ubuntu安装nodejs并更改npm镜像源">Ubuntu安装nodejs并更改npm镜像源</h4>
<p>由于众所周知的原因，在国内使用原有的源安装<code>nodejs</code>速度非常缓慢，故可以采用清华大学的源</p>
<h5 id="运行">运行</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo bash</span><br></pre></td></tr></table></figure>
<h5 id="编辑-etcaptsources.list.dnodesource.list">编辑 /etc/apt/sources.list.d/nodesource.list</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://deb.nodesource.com/node_12.x xenial main</span><br><span class="line">deb-src https://deb.nodesource.com/node_12.x xenial main</span><br></pre></td></tr></table></figure>
<h5 id="更改为">更改为：</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br></pre></td></tr></table></figure>
<h5 id="更新源">更新源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get clean</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h5 id="安装nodejs">安装nodejs</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nodejs</span><br></pre></td></tr></table></figure>
<h5 id="查看版本">查看版本</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<h5 id="更换npm源">更换npm源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h5 id="验证是否成功">验证是否成功</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<h5 id="安装hexo">安装Hexo</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h5 id="初始化hexo">初始化Hexo</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h5 id="生成静态网页">生成静态网页</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装php指南</title>
    <url>/p/How-to-install-php-on-Ubuntu/</url>
    <content><![CDATA[<h4 id="ubuntu安装php指南">Ubuntu安装php指南</h4>
<p>由于自带的apt源中不包含php，所以在安装php之前需要给apt添加第三方源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line"><span class="comment">#sudo add-apt-repository -r ppa:ondrej/php              #删除</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y php7.3</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu服务管理</title>
    <url>/p/How-to-manage-services-on-ubuntu/</url>
    <content><![CDATA[<p>Linux 服务管理两种方式service和systemctl的用法</p>
<a id="more"></a>
<h4 id="service命令">service命令</h4>
<p>service命令其实是去/etc/init.d目录下，去执行相关程序。</p>
<p>其中脚本需要我们自己编写。</p>
<h5 id="基本步骤">基本步骤</h5>
<ol type="1">
<li>进入 <code>/etc/init.d</code></li>
<li>简历一个脚本文件，并赋予755权限：<code>chmod 755 文件名</code></li>
</ol>
<p>以kms服务脚本为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          kms-service</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Start kms at boot time</span></span><br><span class="line"><span class="comment"># Description:       Start or stop the KMS-service</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="string">&quot;KMS&quot;</span></span><br><span class="line">NAME_BIN=<span class="string">&quot;kms&quot;</span></span><br><span class="line">FILE=<span class="string">&quot;/home/ubuntu&quot;</span></span><br><span class="line">BIN=<span class="string">&quot;<span class="variable">$&#123;FILE&#125;</span>/kms&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Green_font_prefix=<span class="string">&quot;\033[32m&quot;</span> &amp;&amp; Red_font_prefix=<span class="string">&quot;\033[31m&quot;</span> &amp;&amp; Green_background_prefix=<span class="string">&quot;\033[42;37m&quot;</span> &amp;&amp; Red_background_prefix=<span class="string">&quot;\033[41;37m&quot;</span> &amp;&amp; Font_color_suffix=<span class="string">&quot;\033[0m&quot;</span></span><br><span class="line">Info=<span class="string">&quot;<span class="variable">$&#123;Green_font_prefix&#125;</span>[信息]<span class="variable">$&#123;Font_color_suffix&#125;</span>&quot;</span></span><br><span class="line">Error=<span class="string">&quot;<span class="variable">$&#123;Red_font_prefix&#125;</span>[错误]<span class="variable">$&#123;Font_color_suffix&#125;</span>&quot;</span></span><br><span class="line">RETVAL=0</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_running</span></span>()&#123;</span><br><span class="line">	PID=$(ps -ef |grep <span class="string">&quot;<span class="variable">$&#123;NAME_BIN&#125;</span>&quot;</span> |grep -v <span class="string">&quot;grep&quot;</span> |grep -v <span class="string">&quot;init.d&quot;</span> |grep -v <span class="string">&quot;service&quot;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> [[ ! -z <span class="variable">$&#123;PID&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#echo -e &quot;$&#123;Info&#125;$&#123;NAME&#125; 正在运行！&quot;</span></span><br><span class="line">		<span class="built_in">return</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="comment">#echo -e &quot;$&#123;Error&#125;$&#123;NAME&#125; 没有运行！&quot;</span></span><br><span class="line">		<span class="built_in">return</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行...&quot;</span> &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cd</span> <span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动中...&quot;</span></span><br><span class="line">		<span class="built_in">ulimit</span> -n 51200</span><br><span class="line">		./kms </span><br><span class="line">		sleep 1s</span><br><span class="line">		check_running</span><br><span class="line">		<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动成功 !&quot;</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 启动失败(请运行脚本查看日志错误输出) !&quot;</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$&#123;PID&#125;</span></span><br><span class="line">		RETVAL=$?</span><br><span class="line">		<span class="keyword">if</span> [[ <span class="variable">$RETVAL</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 停止成功 !&quot;</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 停止失败 !&quot;</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行&quot;</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#View_User</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行...&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行 !&quot;</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">	stop</span><br><span class="line">	sleep 2s</span><br><span class="line">	start</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">	start|stop|restart|status)</span><br><span class="line">	<span class="variable">$1</span></span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;使用方法: <span class="variable">$0</span> &#123; start | stop | restart | status &#125;&quot;</span></span><br><span class="line">	RETVAL=1</span><br><span class="line">	;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="加入到系统启动中">加入到系统启动中</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加到系统启动</span><br><span class="line">update-rc.d kms defaults </span><br><span class="line">// 从系统启动中删除</span><br><span class="line">update-rc.d kms remove</span><br></pre></td></tr></table></figure>
<h5 id="启动服务">启动服务</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service kms start</span><br><span class="line">service kms stop</span><br></pre></td></tr></table></figure>
<h4 id="systemctl命令">systemctl命令</h4>
<p>​ systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。systemd对应的进程管理命令是<strong>systemctl</strong>。</p>
<p>还是以kms服务脚本为例</p>
<p>新建一个<code>kms.service</code>文件，保存在 <code>/etc/systemd/system/kms.service</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=kms-service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kms</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -9 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>可以看到service文件一般由：<strong>[Unit]</strong>、<strong>[Service]</strong>和<strong>[Install]</strong> 三部分组成</p>
<ol type="1">
<li>[Unit] 主要是对这个服务的说明，内容， 文档介绍以及对一些依赖服务定义</li>
<li>[Service] 服务的主体定义，主要定义服务的一些运行参数，及操作动作</li>
<li>[Install] 服务安装的相关设置，一般可设置为多用户的</li>
</ol>
<p><u>以下是具体参数</u></p>
<p><strong>[Unit]</strong></p>
<table>
<thead>
<tr class="header">
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Description</td>
<td>服务描述，作为systemctl status 命令输出的一个介绍</td>
</tr>
<tr class="even">
<td>Documentation</td>
<td>一个url 定义服务的具体介绍网址</td>
</tr>
<tr class="odd">
<td>After</td>
<td>在什么服务启动之后</td>
</tr>
<tr class="even">
<td>Before</td>
<td>在什么服务启动之前启动</td>
</tr>
<tr class="odd">
<td>Requires</td>
<td>依赖其他的单元服务， 需要与列出的服务一起激活，若任何服务无法启动，则该单元不会被激活</td>
</tr>
<tr class="even">
<td>Wants</td>
<td>比Requires依赖性弱，若其他服务没有启动成功，该服务也不受影响，只是表示一种推荐</td>
</tr>
</tbody>
</table>
<p><strong>[Service]</strong></p>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>Type</th>
<th>1.simple默认参数，进程作为主进程<br/>2.forking是后台运行的形式，主进程退出，os接管子进程</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>User</td>
<td>设置服务运行的用户</td>
</tr>
<tr class="even">
<td>Group</td>
<td>设置服务运行的用户组</td>
</tr>
<tr class="odd">
<td>PIDFile</td>
<td>存放PID的文件路径, 对于type设置为<strong>forking</strong>建议使用该项</td>
</tr>
<tr class="even">
<td>ExecStart</td>
<td>服务的具体运行命令</td>
</tr>
<tr class="odd">
<td>ExecStartPre</td>
<td>指定在ExecStart<strong>前</strong>执行的自定义命令</td>
</tr>
<tr class="even">
<td>ExecStartPost</td>
<td>指定在ExecStart<strong>后</strong>执行的自定义命令</td>
</tr>
<tr class="odd">
<td>ExecReload</td>
<td>重启命令，重新加载的动作， 重新加载时执行的命令或者脚本</td>
</tr>
<tr class="even">
<td>ExecStop</td>
<td>停止命令，停止时要执行的命令或脚本</td>
</tr>
<tr class="odd">
<td>Restart</td>
<td>定义何种情况Systemd会自动重启当前服务，值： 包括<strong>always（总是重启）</strong>、<strong>no</strong> 、<strong>on-success</strong>、<strong>on-failure</strong>、<strong>on-abnormal</strong>、<strong>on-abort</strong>、<strong>on-watchdog</strong> 对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal</td>
</tr>
<tr class="even">
<td>TimeoutStartSec</td>
<td>等待启动的时间。如果守护进程服务没有在配置的时间内发送启动完成的信号，则该服务将被认为失败， 服务将退出。<br/>以秒为单位， “0”来禁用。默认为， 默认使用DefaultTimeoutStartSec=20，<br/>若使用Type=<strong>oneshot</strong>，则该模式默认情况下超时是禁用的</td>
</tr>
<tr class="odd">
<td>TimeoutStopSec</td>
<td>等待关闭的超时时间</td>
</tr>
<tr class="even">
<td>TimeoutSec</td>
<td>快速配置TimeoutStartSec和TimeoutStopSec时间</td>
</tr>
<tr class="odd">
<td>KillMode</td>
<td>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉<br/>process：只杀主进程<br/>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号<br/>none：没有进程会被杀掉，只是执行服务的 stop 命令。</td>
</tr>
<tr class="even">
<td>Environmen</td>
<td>指定环境变量</td>
</tr>
<tr class="odd">
<td>PrivateTmp=True</td>
<td>表示给服务分配独立的临时空间</td>
</tr>
</tbody>
</table>
<p>注意：<strong>[Service]</strong>部分的启动、重启、停止命令必须使用绝对路径，使用相对路径则会报错</p>
<p><strong>[Install]</strong></p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="header">
<th>RequiredBy</th>
<th>依赖该服务的服务列表</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>WantedBy</td>
<td>表示该服务所在的 Target， multi-user.target 可以设置为多用户模式具体参考手册systemd.unit(5)</td>
</tr>
</tbody>
</table>
<p>参考手册：http://www.jinbuguo.com/systemd/systemd.index.html</p>
<p><strong>服务状态列表：</strong></p>
<table>
<thead>
<tr class="header">
<th>loaded</th>
<th>系统服务已经初始化完成，加载过配置</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>actvie(running)</td>
<td>正常运行</td>
</tr>
<tr class="even">
<td>actvie(exited)</td>
<td>正常结束的服务</td>
</tr>
<tr class="odd">
<td>active(waitting)</td>
<td>等待其他的事件才继续处理</td>
</tr>
<tr class="even">
<td>inactive</td>
<td>服务关闭</td>
</tr>
<tr class="odd">
<td>enabled</td>
<td>服务开机启动</td>
</tr>
<tr class="even">
<td>disabled</td>
<td>服务开机不自启</td>
</tr>
<tr class="odd">
<td>static</td>
<td>服务开机启动项不可被管理</td>
</tr>
<tr class="even">
<td>falied</td>
<td>系统配置错误</td>
</tr>
</tbody>
</table>
<p><strong>管理日志：</strong></p>
<p>Systemd 统一管理所有 Unit 的启动日志。</p>
<table>
<thead>
<tr class="header">
<th>journalctl</th>
<th>命令查看所有日志(内核日志和应用日志)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>journalctl _PID=</td>
<td>查看对应pid的日志</td>
</tr>
</tbody>
</table>
<p><strong>unit管理：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl start apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>service</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab定时任务不执行</title>
    <url>/p/crontab-does-not-work/</url>
    <content><![CDATA[<p>在生产环境下，添加了 crontab 定时计划任务，后面发现，定时任务并没有执行，在指定的文件夹下并没有相对应的日志产生。</p>
<p><strong>关键词：crontab定时计划任务不执行</strong></p>
<a id="more"></a>
<h4 id="查看crontab服务状态">查看crontab服务状态</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">serivice cron status</span><br></pre></td></tr></table></figure>
<p>其中若出现 <code>(CRON) info (No MTA installed, discarding output)</code>字样，说明linux系统中没有安装<code>postfix</code>。Postfix 是一种电子邮件服务器软件。当crontab执行脚本时，会将输出通过本地的文本邮件的方式传递给当前用户，传递的内容存放在<code>/var/mail/&lt;当前用户名&gt;</code>文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install postfix -y</span><br></pre></td></tr></table></figure>
<h4 id="将标准错误和标准输出重定向到文件">将标准错误和标准输出重定向到文件</h4>
<p>当所有的输出重定向到文件以后，crontab就不会给本地用户发信息啦，也就解决了上节的问题。</p>
<p><strong>为了将所有的输出</strong>都重定向到文件，可以在cron里写 <code>*/1 * * * * r.sh</code></p>
<p><code>r.sh</code>里写 <code>a.sh &gt;&gt; /root/a.log 2&gt;&amp;1</code></p>
<h5 id="附录linux重定向">附录：linux重定向</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt; filename 　　　　　把标准输出重定向到一个新文件中</span><br><span class="line"><span class="built_in">command</span> &gt;&gt; filename 　　　　　把标准输出重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> 1 &gt; fielname 　　　　　把标准输出重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> &gt; filename 2&gt;&amp;1 　　　把标准输出和标准错误一起重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> 2 &gt; filename 　　　　把标准错误重定向到一个文件中</span><br><span class="line"><span class="built_in">command</span> 2 &gt;&gt; filename 　　　　把标准输出重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> &gt;&gt; filename 2&gt;&amp;1 　　把标准输出和标准错误一起重定向到一个文件中(追加)</span><br><span class="line"><span class="built_in">command</span> &lt; filename &gt;filename2 　　把<span class="built_in">command</span>命令以filename文件作为标准输入，以filename2文件作为标准输出</span><br><span class="line"><span class="built_in">command</span> &lt; filename 　　　把<span class="built_in">command</span>命令以filename文件作为标准输入</span><br><span class="line"><span class="built_in">command</span> &lt;&lt; delimiter 　　把从标准输入中读入，直至遇到delimiter分界符</span><br><span class="line"><span class="built_in">command</span> &lt;&amp;m 　　　把文件描述符m作为标准输入</span><br><span class="line"><span class="built_in">command</span> &gt;&amp;m 　　　把标准输出重定向到文件描述符m中</span><br><span class="line"><span class="built_in">command</span> &lt;&amp;- 　　　把关闭标准输入 </span><br></pre></td></tr></table></figure>
<p><strong>&gt; 默认为标准输出重定向，与 1&gt; 相同 2&gt;&amp;1</strong> 意思是把 标准错误输出 重定向到 标准输出.</p>
<p><strong>&amp;&gt;file</strong> 意思是把<strong>标准输出</strong> 和 <strong>标准错误输出</strong> 都重定向到文件file中</p>
<p><strong>/dev/null是一个文件，这个文件比较特殊，所有传给它的东西它都丢弃掉</strong></p>
]]></content>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Action定时重启IBM cloud foundry</title>
    <url>/p/ibm-cloud-auto-restart/</url>
    <content><![CDATA[<p>本文简单介绍了Github Action的用法，并使用Gihub Action定时重启IBM cloud foundry容器。</p>
<p><strong>摘要：</strong>GitHub Actions是GitHub自家的持续集成及自动化工作流服务，它使用起来非常简单，只要在你的仓库根目录建立<code>.github/workflows</code>文件夹，将你的工作流配置(YML文件)放到这个目录下，就能启用GitHub Actions服务。</p>
<p><strong>关键字</strong>：Github Action，IBM cloud foundry</p>
<a id="more"></a>
<h3 id="yml配置文件">yml配置文件</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">IBM</span> <span class="string">Cloud</span> <span class="string">Auto</span> <span class="string">Restart</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span>      <span class="comment"># 根据自己的需要设置何时重启</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">ibm-cloud-restart:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">wget</span> <span class="string">-q</span> <span class="string">-O</span> <span class="bullet">-</span> <span class="string">https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">apt-key</span> <span class="string">add</span> <span class="bullet">-</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;deb https://packages.cloudfoundry.org/debian stable main&quot;</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">tee</span> <span class="string">/etc/apt/sources.list.d/cloudfoundry-cli.list</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">cf-cli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">IBM</span> <span class="string">Cloud</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">IBM_ACCOUNT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_ACCOUNT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">IBM_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">login</span> <span class="string">-a</span> <span class="string">https://api.us-south.cf.cloud.ibm.com</span> <span class="string">-u</span> <span class="string">$IBM_ACCOUNT</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line">        <span class="string">$IBM_PASSWORD</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">IBM</span> <span class="string">Cloud</span> <span class="string">Apps</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">a</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">IBM</span> <span class="string">Cloud</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">IBM_APP_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.IBM_APP_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cf</span> <span class="string">restart</span> <span class="string">$IBM_APP_NAME</span></span><br></pre></td></tr></table></figure>
<h3 id="使用方法">使用方法</h3>
<h4 id="fork仓库httpsgithub.comwf09ibmworkflow">fork仓库：https://github.com/wf09/IBMWorkflow</h4>
<h4 id="设置环境变量">设置环境变量</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IBM_ACCOUNT：账户邮箱</span><br><span class="line"></span><br><span class="line">IBM_APP_NAME：app的名字</span><br><span class="line"></span><br><span class="line">IBM_PASSWORD：密码</span><br></pre></td></tr></table></figure>
<p>设置完环境变量以后记得commit一下yml文件触发Action。</p>
<h4 id="效果图">效果图</h4>
<p><img src="https://ftp.fly97.cn/image/image-20200827193322808.png" /></p>
<p>PS：达拉斯的容器测试通过，其他的地区可能需要将<code>https://api.us-south.cf.cloud.ibm.com</code>修改成你所在的地区。</p>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Office Tool Plus使用教程</title>
    <url>/p/how-to-use-office-tool-plus/</url>
    <content><![CDATA[<p>Office Tool Plus 使用教程</p>
<a id="more"></a>
<p>软件介绍：https://otp.landian.vip/zh-cn/</p>
<p>软件下载地址：https://download.coolhub.top/</p>
<p><del>备份地址：https://ftp.fly97.cn/windows/app/Office%20Tool%20v7.5.zip</del></p>
<h4 id="选择安装产品">1.选择安装产品</h4>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200517194431639.png" alt="image-20200517194431639" /><figcaption>image-20200517194431639</figcaption>
</figure>
<p>注意：由于国内到微软的网络不稳定，建议<strong>部署模式</strong>选择<strong>下载后安装</strong>。耐心等待安装完毕即可。</p>
<h4 id="激活office">2.激活office</h4>
<p>首先，根据选择的类型选择对应的许可证。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200517194323507.png" alt="image-20200517194323507" /><figcaption>image-20200517194323507</figcaption>
</figure>
<p><del>然后，选择<strong>零售版</strong>安装的同学<strong>可能需要安装</strong>Office2019专业版特定的密钥：</del></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</span><br></pre></td></tr></table></figure>
<p>最后，选择对应的KMS服务器。</p>
<p>推荐使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kms.moeclub.org</span><br></pre></td></tr></table></figure>
<p>完。</p>
]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium常用方法</title>
    <url>/p/Selenium-positioning-method/</url>
    <content><![CDATA[<p>Selenium 是一个综合性的项目，为web浏览器的自动化提供了各种工具和依赖包。本文主要介绍的是 selenium的常用方法。</p>
<p><strong>关键词：Selenium常用方法</strong></p>
<a id="more"></a>
<h3 id="模拟手机访问">模拟手机访问</h3>
<p>一般情况下，手机端页面更简单，容易提取元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;mobileEmulation&#x27;</span>, mobile_emulation)</span><br></pre></td></tr></table></figure>
<h3 id="设置chrome为无头模式">设置chrome为无头模式</h3>
<p>在 Chrome 59　中开始搭载 <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md">Headless Chrome</a>。这是一种在无需显示<em>headless</em>的环境下运行 Chrome 浏览器的方式。从本质上来说，就是不用打卡Chrome窗口来运行 Chrome 的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="加载网址">加载网址</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.get(&quot;http:&#x2F;&#x2F;stu.zstu.edu.cn&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="定位元素">定位元素</h3>
<h4 id="id定位">id定位</h4>
<p>HTML 规定id 属性在HTML 文档中必须是唯一的。这类似于公民的身份证号，具有很强的唯一性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_id(&quot;app&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="name定位">name定位</h4>
<p>HTML 规定name 来指定元素的名称，因此它的作用更像是人的姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_name(&quot;name&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="class定位">class定位</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_class(&quot;classname&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="tag定位">tag定位</h4>
<p>HTML 的本质就是通过tag来定义实现不同的功能，每一个元素本质上也是一个tag.</p>
<p>因为一个tag 往往用来定义一类功能，所以通过tag识别某个元素的概率很低.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_tag_name(&quot;tagname&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="link-text-定位"><strong>link text 定位</strong></h4>
<p>find_element_by_link_text()方法通过元素标签对之间的文本信息来定位元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_link_text(&quot;text&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="partial-link-定位"><strong>partial link 定位</strong></h4>
<p>partial link 定位是对link 定位的一种补充，有些文本链接会比较长，这个时候可以取文本链接的一部分定位，只要这一部分信息可以唯一地标识这个链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_partial_link_text(&quot;partial text&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="xpath定位">XPATH定位</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome.find_element_by_xpath(&quot;&quot;)</span><br></pre></td></tr></table></figure>
<p>XPath是XML的路径语言，通俗一点讲就是通过元素的路径来查找到这个标签元素</p>
<h5 id="定位页面下所有元素">定位页面下所有元素</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div</span><br></pre></td></tr></table></figure>
<h5 id="绝对路径定位">绝对路径定位</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;html&#x2F;body&#x2F;div&#x2F;div</span><br></pre></td></tr></table></figure>
<h5 id="利用元素属性定位">利用元素属性定位</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&#x2F;&#x2F;input[@placeholder&#x3D;&#39;请通过XPATH定位元素&#39;]&quot;</span><br></pre></td></tr></table></figure>
<h5 id="利用标签所含文字进行定位">利用标签所含文字进行定位</h5>
<p>严格匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[text()&#x3D;&quot;健康申报&quot;]</span><br></pre></td></tr></table></figure>
<p>部分匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[contains(text(), &quot;健康申报&quot;)]</span><br></pre></td></tr></table></figure>
<h5 id="层级与属性相结合">层级与属性相结合</h5>
<p>当标签页重复时，Xpath提供了层级过滤。</p>
<p>例如，找不到儿子，那么就先找他的爸爸，或者找他的爷爷。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;&#x2F;label[contains(text(), &quot;文本内容&quot;)]&#x2F;..&#x2F;following-sibling::div[1]&#x2F;&#x2F;input&#39;</span><br></pre></td></tr></table></figure>
<p><code>..</code> 表示当前节点的父节点</p>
<p><code>following-sibling::div[1]</code> 表示当前节点的<strong>兄弟节点</strong>中的 <strong>第 1 个</strong> <strong>div</strong>标签</p>
<h5 id="使用逻辑运算符">使用逻辑运算符</h5>
<p>如果一个属性不能唯一的区分一个元素，可以使用逻辑运算符连接多个属性来查找元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;select[@name&#x3D;&#39;city&#39; and @size&#x3D;&#39;4&#39; and @multiple&#x3D;&quot;multiple&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-genkey参数</title>
    <url>/p/ssh-genkey/</url>
    <content><![CDATA[<p>什么是ssh-genkey？</p>
<p>ssh 公钥认证是ssh认证的方式之一。通过公钥认证可实现ssh免密码登陆，git的ssh方式也是通过公钥进行认证的。</p>
<p>在用户目录的home目录下，有一个<code>.ssh</code>的目录，和当前用户ssh配置认证相关的文件，几乎都在这个目录下。</p>
<p><code>ssh-keygen</code> 可用来生成ssh公钥认证所需的公钥和私钥文件。</p>
<a id="more"></a>
<h2 id="常用命令">常用命令</h2>
<h3 id="生成密钥对">生成密钥对</h3>
<p>默认生成 2048 位 RSA 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p>生成 4096 位 RSA 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>
<p>生成 521 位 ECDSA 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ecdsa -b 521</span><br></pre></td></tr></table></figure>
<h3 id="私钥生成公钥">私钥生成公钥</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -y -f [private-key-path] &gt; [output-path]</span><br></pre></td></tr></table></figure>
<p>比如，有一个文件名为 <code>id_rsa</code> 私钥，想用它生成 <code>id_rsa.pub</code> 公钥</p>
]]></content>
      <tags>
        <tag>ssh-genkey</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CLion开发Qt4</title>
    <url>/p/How-To-Use-CLion-to-Develop-Qt4/</url>
    <content><![CDATA[<p><strong>摘要：</strong>Qt 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。近期课程考核需要用到Qt，于是便有了这一篇文章。</p>
<p><strong>关键词：</strong>Qt，CLion，Mingw</p>
<a id="more"></a>
<h4 id="准备工作">准备工作</h4>
<ol type="1">
<li>QT4.8.6安装包</li>
</ol>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyTorch进行MNIST识别</title>
    <url>/p/Use-PyTorch-for-MNIST-recognition/</url>
    <content><![CDATA[<p>使用PyTorch进行MNIST识别</p>
<a id="more"></a>
<h5 id="数据集部分">数据集部分：</h5>
<p>下载地址：http://yann.lecun.com/exdb/mnist/</p>
<p>如果使用<code>torchvision</code>下载速度较慢可以参考：https://blog.csdn.net/york1996/article/details/81780065</p>
<h5 id="网络定义部分">网络定义部分：</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)         <span class="comment">#输入通道数为1, 输出通道数为32, 卷积核大小为3*3, 步长为1</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>)        </span><br><span class="line">        self.dropout1 = nn.Dropout2d(<span class="number">0.25</span>)          <span class="comment">#随机将输入张量中整个通道设置为0</span></span><br><span class="line">        self.dropout2 = nn.Dropout2d(<span class="number">0.5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">9216</span>, <span class="number">256</span>)             <span class="comment">#全连接层</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>)                      <span class="comment">#使用2*2的窗口进行最大值池化</span></span><br><span class="line">        x = self.dropout1(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)                     <span class="comment">#展平一个连续范围的维度</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.dropout2(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        output = F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>卷积层第一层： <code>nn.Conv2d(1, 32, 3, 1)</code></p>
<p>输入通道数为1，输出通道数为32，使用大小为3*3的卷积核，步长为1。</p>
<p>卷积层第二层：<code>nn.Conv2d(32, 64, 3, 1)</code></p>
<p>输入通道数为32，输出通道数为64，使用大小为3*3的卷积核，步长为1。</p>
<p>前向传播中使用池化层：<code>F.max_pool2d(x, 2)</code></p>
<p>最后展平一个连续的维度：<code>torch.flatten(x, 1)</code></p>
<p><strong>详细描述：</strong></p>
<p>大小为<strong>1X28X28</strong>的图片，经过第一层卷积层，维度变为<strong>32X26X26</strong>，在经过第二层卷积层，维度变为<strong>64X24X24</strong>，在经过一层最大值池化层处理以后，维度变为<strong>64X12X12</strong>，全部展开以后维度变为<strong>1X9216</strong>。</p>
<h5 id="卷积计算公式">卷积计算公式：</h5>
<p><code>卷积后输出图像宽/高=(图像宽/高 - 卷积核宽/高 + 用零填充的个数) / 步长</code></p>
<h5 id="池化计算公式">池化计算公式：</h5>
<p><code>池化后图像宽/高=池化前图像宽/高 / 池化窗口宽度</code></p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
        <tag>CNN</tag>
        <tag>MNIST</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WSL链接Github仓库以及如何配置ssh权限问题</title>
    <url>/p/Use-WSL-to-link-Github-repositories-and-how-to-configure-ssh-permissions/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>
<h4 id="首先要安装wslwindows-subsystem-for-linux即适用于window10的linux子系统">1.首先，要安装WSL(Windows Subsystem for Linux)。即适用于Window10的Linux子系统。</h4>
<ul>
<li><p>打开开发者选项，选择开发人员模式。<img src="https://ftp.fly97.cn/image/image-20191228201007723.png" alt="image-20191228201007723" /></p></li>
<li><p>打开控制面板-程序，选择适用于Linux的Windows子系统。<img src="https://ftp.fly97.cn/image/image-20191228201255121.png" alt="image-20191228201255121" /></p></li>
<li><p>打开Windows应用商店，搜索linux，选择你喜欢的linux系统点击安装。这里以Ubuntu为例。</p>
<figure>
<img src="https://ftp.fly97.cn/image/20200531102849.png" alt="image-20191228201558935" /><figcaption>image-20191228201558935</figcaption>
</figure></li>
</ul>
<p>第一次打开要选择用户名和密码，因为笔者已经安装完了，这里就不再截图了。到此为止WSL就安装好了。</p>
<h4 id="使用wsl安装hexo相关软件并链接到github仓库">2.使用WSL安装hexo相关软件并链接到github仓库</h4>
<p>打开刚刚安装好的Ubuntu，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>
<h5 id="初始化git">初始化git：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入项目</span><br><span class="line">cd Desktop&#x2F;myproject</span><br><span class="line">&#x2F;&#x2F;初始化git</span><br><span class="line"> git init</span><br></pre></td></tr></table></figure>
<h5 id="创建ssh-key">创建ssh key：</h5>
<p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>
<p>这里的<strong>your_email@youremail.com</strong>是你的<strong>邮箱地址</strong>，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>
<h5 id="把密码导入github">把密码导入GitHub：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>
<h5 id="验证是否连接成功">验证是否连接成功：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>
<h5 id="设置username和email">设置username和email：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>
<h5 id="添加远程地址">添加远程地址：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br></pre></td></tr></table></figure>
<p>后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。</p>
<h5 id="上传项目">上传项目：</h5>
<p>依次运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;my project push&#39;</span><br><span class="line">git push origin master  --force</span><br></pre></td></tr></table></figure>
<p>这里的<strong>master</strong>指的是主分支名，如果是其他分支，则填写相应的分支名。</p>
<p>这样我们就将我们的项目上传到github仓库。</p>
<h5 id="备注私钥和公钥的权限问题">备注：私钥和公钥的权限问题</h5>
<p>确认将 SSH 权限应用于公钥和私钥文件。</p>
<ol type="1">
<li><p>通过运行以下命令来检查 SSH 公钥文件：<code>ls -l /etc/ssh/*key.pub</code></p></li>
<li><p>确认所有者是 root，组所有者是 root，并且文件权限设置为 0644 (-rw-r--r--)。</p></li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key.pub</code></p>
<p><code>chgrp root /etc/ssh/*key.pub</code></p>
<p><code>chmod 644 /etc/ssh/*key.pub</code></p></li>
<li><p>通过运行以下命令来检查 SSH 私钥文件：<code>ls -l /etc/ssh/*key</code></p></li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key</code></p>
<p><code>chgrp root /etc/ssh/*key</code></p>
<p><code>chmod 644 /etc/ssh/*key</code></p></li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>SSH</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Zerotier搭建内网穿透服务</title>
    <url>/p/how-to-use-Zerotier/</url>
    <content><![CDATA[<p>什么是Zerotier？</p>
<p>ZeroTier将整个世界转变为单个数据中心或云区域。像将所有设备，虚拟机和应用程序都插入同一交换机一样，将它们联网。</p>
<p>本文主要介绍如何使用Zerotier搭建内网穿透服务。</p>
<a id="more"></a>
<p>有两种连接方式，一种是创建自己管理的虚拟局域网，一种是加入别人已经建立的虚拟局域网。这里先说第一种。</p>
<h4 id="创建账号">创建账号</h4>
<p>https://www.zerotier.com/，点击<code>Sign up</code>.</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128181221059.png" /></p>
<p>根据自己需要，选择注册方式。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128181326421.png" /></p>
<h4 id="创建网络">创建网络</h4>
<p><img src="https://ftp.fly97.cn/image/image-20210128181610919.png" /></p>
<p>点击 <code>Create A Network</code>，创建自己管理的虚拟局域网。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128181706204.png" /></p>
<p>创建成功以后会得到<code>Network ID</code>。点击网络ID，进入管理界面。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128181808319.png" /></p>
<p>此时虚拟局域网内还没有设备，需要终端加入该网络。</p>
<h4 id="加入网络">加入网络</h4>
<p><img src="https://ftp.fly97.cn/image/image-20210128181920181.png" /></p>
<p>点击<code>Download</code>，进入下载页面。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128181957790.png" /></p>
<p>根据自己的设备类型选择安装包。这里以Windows为例。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128182051328.png" alt="image-20210128182051328" style="zoom:50%;" /></p>
<p>等待下载完成，然后安装。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128182357823.png" alt="image-20210128182357823" style="zoom:50%;" /></p>
<p>打开以后会默认在任务栏运行。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210128182448852.png" alt="image-20210128182448852" /><figcaption>image-20210128182448852</figcaption>
</figure>
<p>右键选择<code>Join a network</code>。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128182523631.png" alt="image-20210128182523631" style="zoom:50%;" /></p>
<p>输入先前生成的网络ID，点击<code>Join</code>。其他选择默认设置即可。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128182553099.png" alt="image-20210128182553099" style="zoom: 67%;" /></p>
<p>稍后片刻，返回到管理页面，允许自己的电脑加入该网络，即✔对应的设备。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128182844550.png" /></p>
<p>得到虚拟网络的ip地址，之后再将另一个设备加入，就可以愉快的链接啦。</p>
<p><img src="https://ftp.fly97.cn/image/image-20210128183032664.png" /></p>
<h4 id="未完待续....">未完待续....</h4>
]]></content>
      <tags>
        <tag>Zerotier</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh快速申请ssl证书</title>
    <url>/p/Use-acme-to-quickly-apply-for-an-ssl-certificate/</url>
    <content><![CDATA[<p><strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书.</p>
<p><strong>转载自：<a href="https://github.com/acmesh-official/acme.sh/wiki/说明">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></strong></p>
<a id="more"></a>
<p>主要步骤:</p>
<ol type="1">
<li>安装 <strong>acme.sh</strong></li>
<li>生成证书</li>
<li>copy 证书到 nginx/apache 或者其他服务</li>
<li>更新证书</li>
<li>更新 <strong>acme.sh</strong></li>
<li>出错怎么办, 如何调试</li>
</ol>
<p>下面详细介绍.</p>
<h4 id="安装-acme.sh">安装 <strong>acme.sh</strong></h4>
<p>安装很简单, 一个命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure></p>
<p>普通用户和 root 用户都可以安装使用. 安装过程进行了以下几步:</p>
<ol type="1">
<li>把 acme.sh 安装到你的 <strong>home</strong> 目录下:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.acme.sh&#x2F;</span><br></pre></td></tr></table></figure>
<p>并创建 一个 bash 的 alias, 方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code></p>
<p>2). 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p>
<p>更高级的安装选项请参考: https://github.com/Neilpang/acme.sh/wiki/How-to-install</p>
<p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p>
<h4 id="生成证书">生成证书</h4>
<p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p>
<h5 id="http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权完成验证.-然后就可以生成证书了.">http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  &#x2F;home&#x2F;wwwroot&#x2F;mydomain.com&#x2F;</span><br></pre></td></tr></table></figure>
<p>只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用.</p>
<p>如果你用的 <strong>apache</strong>服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --apache</span><br></pre></td></tr></table></figure></p>
<p>如果你用的 <strong>nginx</strong>服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure></p>
<p><strong>注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.</strong></p>
<p>如果你还没有运行任何 web 服务, <strong>80</strong> 端口是空闲的, 那么 <strong>acme.sh</strong> 还能假装自己是一个webserver, 临时听在<strong>80</strong> 端口, 完成验证:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue -d mydomain.com   --standalone</span><br></pre></td></tr></table></figure>
<p>更高级的用法请参考: https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</p>
<h5 id="手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权.">手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.</h5>
<p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证. 坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  --dns   -d mydomain.com</span><br></pre></td></tr></table></figure>
<p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p>
<p>等待解析完成之后, 重新生成证书: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --renew   -d mydomain.com</span><br></pre></td></tr></table></figure> 注意第二次这里用的是 <code>--renew</code></p>
<p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p>
<p><strong>acme.sh</strong> 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.</p>
<p>以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的. 然后: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export DP_Id&#x3D;&quot;1234&quot;</span><br><span class="line"></span><br><span class="line">export DP_Key&#x3D;&quot;sADDsdasdgdsf&quot;</span><br><span class="line"></span><br><span class="line">acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了. 直接生成就好了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue   -d  mydomain2.com   --dns  dns_dp</span><br></pre></td></tr></table></figure>
<p>更详细的 api 用法: https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</p>
<h4 id="copy安装-证书">copy/安装 证书</h4>
<p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p>
<p>注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p>
<p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如: ##### Apache example: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--cert-file      &#x2F;path&#x2F;to&#x2F;certfile&#x2F;in&#x2F;apache&#x2F;cert.pem  \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;apache&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;certfile&#x2F;apache&#x2F;fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure></p>
<h5 id="nginx-example">Nginx example:</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;nginx&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;nginx&#x2F;cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>
<p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p>
<p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p>
<p><code>--installcert</code>命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p>
<p>详细参数请参考: https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</p>
<p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p>
<h4 id="更新证书">更新证书</h4>
<p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>
<h4 id="更新-acme.sh">更新 acme.sh</h4>
<p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.</p>
<p>升级 acme.sh 到最新版 : <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure></p>
<p>如果你不想手动升级, 可以开启自动升级:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure>
<p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure>
<h4 id="调试">调试</h4>
<p>如果出错, 请添加 debug log：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug </span><br></pre></td></tr></table></figure>
<p>或者： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug  2</span><br></pre></td></tr></table></figure></p>
<p>请参考： https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</p>
<p>最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.</p>
<p>https://github.com/Neilpang/acme.sh/wiki</p>
]]></content>
      <tags>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare wrap为只有ipv4地址的服务器解锁ipv6</title>
    <url>/p/use-wrap-unlock-ipv6/</url>
    <content><![CDATA[<p><strong>摘要：</strong>使用cloudflare wrap为只有ipv4地址的服务器解锁ipv6</p>
<p><strong>关键词</strong>：cloudflare ，wrap</p>
<a id="more"></a>
<h3 id="准备工作">准备工作</h3>
<ul>
<li>一台Deian 系的服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl sudo lsb-release -y</span><br></pre></td></tr></table></figure>
<h4 id="debian安装">debian安装</h4>
<ol type="1">
<li>安装版本高于 5.6 的内核</li>
<li>安装 wireguard 内核模块</li>
<li>安装 wireguard-go</li>
</ol>
<h5 id="添加backports源">添加backports源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://deb.debian.org/debian <span class="subst">$(lsb_release -sc)</span>-backports main&quot;</span> | sudo tee /etc/apt/sources.list.d/backports.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>先执行 <code>uname -r</code> 命令查看内核版本。如果是 5.6 以上内核则已经集成了 Wire­Guard ，就不需要安装了。</p>
<h5 id="安装网络工具包">安装网络工具包</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools iproute2 openresolv dnsutils -y</span><br></pre></td></tr></table></figure>
<p>安装 <strong><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL1dpcmVHdWFyZC93aXJlZ3VhcmQtdG9vbHM">wireguard-tools</a></strong> (Wire­Guard 配置工具：<code>wg</code>、<code>wg-quick</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install wireguard-tools --no-install-recommends</span><br></pre></td></tr></table></figure>
<h5 id="安装内核">安装内核</h5>
<p>为了稳定性推荐安装 back­ports 仓库中的内核 (截止发文版本为 5.10)。以下是一把梭命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt -t $(lsb_release -sc)-backports install linux-image-$(dpkg --print-architecture) linux-headers-$(dpkg --print-architecture) --install-recommends -y</span><br></pre></td></tr></table></figure>
<p>安装完重启，并执行 <code>uname -r</code> 命令查看内核版本来确认新内核是否被启用。</p>
<h4 id="debian安装动态内核模块">debian安装动态内核模块</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install wireguard-dkms -y</span><br></pre></td></tr></table></figure>
<p>安装后执行 <code>modprobe wireguard</code> 命令加载 Wire­Guard 内核模块。</p>
<h4 id="debian安装wireguard-go">debian安装wireguard-go</h4>
<p>OpenVZ/LXC VPS 或者不想折腾内核的小伙伴可以安装 <code>wireguard-go</code>，只不过网络性能较低。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL git.io/wireguard-go.sh | sudo bash</span><br></pre></td></tr></table></figure>
<p>PS：对于 OpenVZ/LXC 的 VPS 需要执行<code>lsmod | grep tun</code>命令来检查 TUN 模块是否正常加载，若没有请自行咕鸽搜索开启方法，否则是不能正常使用的。</p>
<h4 id="ubuntu安装">ubuntu安装</h4>
<p>WireGuard可从默认的Ubuntu存储库中获得。 要安装它，请运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install wireguard</span><br></pre></td></tr></table></figure>
<p>这将安装WireGuard模块和工具。WireGuard作为内核模块运行。</p>
<h3 id="配置warp">配置WARP</h3>
<h4 id="安装wgcf">安装wgcf</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL git.io/wgcf.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h4 id="注册-warp-账户-将生成-wgcf-account.toml-文件保存账户信息">注册 WARP 账户 (将生成 <code>wgcf-account.toml</code> 文件保存账户信息)</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wgcf register</span><br></pre></td></tr></table></figure>
<h4 id="生成wireguard配置文件wgcf-profile.conf">生成WireGuard配置文件(wgcf-profile.conf)</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wgcf generate</span><br></pre></td></tr></table></figure>
<p>生成的两个文件记得备份好，尤其是 <code>wgcf-profile.conf</code>，万一未来工具失效、重装系统后可能还用得着。</p>
<h4 id="编辑wireguard配置文件">编辑WireGuard配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim wgcf-profile.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey &#x3D; *</span><br><span class="line">Address &#x3D; *</span><br><span class="line">Address &#x3D; *</span><br><span class="line">DNS &#x3D; 2001:4860:4860::8888</span><br><span class="line">MTU &#x3D; 1280</span><br><span class="line">[Peer]</span><br><span class="line">PublicKey &#x3D; *</span><br><span class="line">AllowedIPs &#x3D; ::&#x2F;0</span><br><span class="line">Endpoint &#x3D; [2606:4700:d0::a29f:c001]:2408</span><br></pre></td></tr></table></figure>
<p>默认的<code>Endpoint</code>为 <code>engage.cloudflareclient.com</code>，解析成ip一般是以下两个结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">162.159.192.1</span><br><span class="line">2606:4700:d0::a29f:c001</span><br></pre></td></tr></table></figure>
<p>如果想优先使用<code>warp</code>的ipv4地址访问外部网络，则<code>Endpoint</code> 需要设置为ipv4的地址；ipv6依次类推。</p>
<p>DNS也是一样，如果想用ipv4地址，则需要设置一个ipv4的DNS地址，如<code>8.8.8.8</code>；ipv6则是<code>2001:4860:4860::8888</code>.</p>
<h4 id="将修改好的配置文件移动到指定目录">将修改好的配置文件移动到指定目录</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</span><br></pre></td></tr></table></figure>
<h4 id="开启网络接口">开启网络接口</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wg-quick up wgcf</span><br></pre></td></tr></table></figure>
<h5 id="有可能遇到的问题">有可能遇到的问题</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/wg-quick: line 31: resolvconf: <span class="built_in">command</span> not found [WireGuard | Debian]</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/resolvectl /usr/<span class="built_in">local</span>/bin/resolvconf</span><br></pre></td></tr></table></figure>
<h4 id="关闭网络接口">关闭网络接口</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wg-quick down wgcf</span><br></pre></td></tr></table></figure>
<h4 id="正式启用网络接口">正式启用网络接口</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用守护进程</span></span><br><span class="line">sudo systemctl start wg-quick@wgcf</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> wg-quick@wgcf</span><br></pre></td></tr></table></figure>
<h3 id="使用warp">使用WARP+</h3>
<h4 id="如何获得更多的warp流量">如何获得更多的Warp+流量</h4>
<p>自动化脚本：https://github.com/navaneethkm004/warp-plus/raw/main/main.py</p>
<p>需要Python3，执行之前请运行：<code>chmod +x main.py</code></p>
<p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_01.png" /></p>
<p>ID获取方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat wgcf-account.toml</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_02.png" /></p>
<p>输入ID以后，程序开始运行</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210603/wrap_03.png" /></p>
<p>查看增加的流量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wgcf update &amp;&amp; wgcf status</span><br></pre></td></tr></table></figure>
<h4 id="多个设备共享">多个设备共享</h4>
<p>将多台设备的<code>license_key</code>设置为同一个，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wgcf update &amp;&amp; wgcf status</span><br></pre></td></tr></table></figure>
<h4 id="检测warp是否启用">检测warp+是否启用</h4>
<p>服务器端执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -6 https://cloudflare.com/cdn-cgi/trace</span><br></pre></td></tr></table></figure>
<figure>
<img src="C:\Users\wf09\AppData\Roaming\Typora\typora-user-images\image-20210603163540000.png" alt="image-20210603163540000" /><figcaption>image-20210603163540000</figcaption>
</figure>
<p>若<code>warp=plus</code>则说明启用成功。</p>
<p>若<code>warp=on</code>则需要指向以下操作：</p>
<ol type="1">
<li><p>执行<code>wgcf register</code>重新生成一个账户；</p></li>
<li><p>修改生成的<code>wgcf-account.toml</code>，绑定<code>license_key</code>；</p></li>
<li><p>执行<code>wgcf generate</code>生成WireGuard VPN配置文件；</p></li>
<li><p>执行<code>sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf</code>；</p></li>
<li><p>启动网络接口，<code>sudo wg-quick up wgcf</code>；</p></li>
<li><p>执行<code>curl -6 https://cloudflare.com/cdn-cgi/trace</code>.</p></li>
</ol>
<p>如果<code>warp</code>的值没有发生变化，需要重新执行1-6步骤。</p>
<h3 id="end">END</h3>
<p>感谢：</p>
<p>https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html</p>
<p>https://hiram.wang/cloudflare-wrap-vps/#2021-03%E6%9B%B4%E6%96%B0-%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%8D%9F%E5%8F%8C%E6%A0%88</p>
]]></content>
      <tags>
        <tag>cloudflare</tag>
        <tag>wrap</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jsdelivrCDN加速github文件</title>
    <url>/p/Use-jsdelivrCDN-to-accelerate-github-files/</url>
    <content><![CDATA[<p>jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。</p>
<p><strong>更新：</strong>jsDelivr新增使用政策已经于8月15日生效。根据最新的使用政策，<strong>滥用服务及其资源或将jsDelivr用作通用文件或媒体托管服务，账户将会被BAN。</strong></p>
<p>如果将Github+jsDelivr作为图床使用的话是算违规！！！ 相关链接：https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net</p>
<a id="more"></a>
<h3 id="jsdelivr-配置">jsDelivr 配置</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;wf09&#x2F;upload@master&#x2F;1.png</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>gh</code> 表示来自 Github 的仓库</li>
<li><code>wf09/upload</code> 指的是用户名/仓库名</li>
<li><code>master</code> 仓库的分支</li>
<li><code>1.png</code>仓库下的具体文件</li>
</ul>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>jsdelivrCDN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pip离线安装PyTorch-gpu</title>
    <url>/p/Use-pip-to-install-the-GPU-version-of-PyTorch-offline/</url>
    <content><![CDATA[<p>废话不多说，上教程。</p>
<a id="more"></a>
<h4 id="查看linux预装的python3版本">1.查看Linux预装的Python3版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@wf09:~<span class="comment"># python3 -V</span></span><br><span class="line">Python 3.6.9</span><br></pre></td></tr></table></figure>
<h4 id="下载对应的pytorch版本">2.下载对应的Pytorch版本</h4>
<p>https://download.pytorch.org/whl/torch_stable.html</p>
<p><img src="https://ftp.fly97.cn/image/3.png" /></p>
<p>Python版本是3.6.9，下载的版本是<code>cpu/torch-1.4.0%2Bcpu-cp36-cp36m-linux_x86_64.whl</code></p>
<h4 id="安装pip3">3.安装pip3</h4>
<h5 id="linux">3.1 Linux</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<p><strong>tips：</strong>由于apt源自带的pip版本过低，可以执行如下命令升级pip。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>升级完pip以后，pip就相当于pip3了。</p>
<h5 id="win">3.2 Win</h5>
<p>安装完Python后默认安装pip，执行命令升级pip即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h4 id="离线安装pytorch">4.离线安装Pytorch</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links=torch-1.4.0+cpu-cp36-cp36m-linux_x86_64.whl torch</span><br></pre></td></tr></table></figure>
<h4 id="windows10卸载pytorch-cpu版本并安装gpu版本">5.windows10卸载Pytorch-cpu版本并安装GPU版本</h4>
<h5 id="卸载cpu版">5.1 卸载cpu版</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall torch   		<span class="comment">#卸载torch</span></span><br><span class="line">pip uninstall torchvison    <span class="comment">#卸载torchvison</span></span><br></pre></td></tr></table></figure>
<h5 id="安装cuda">5.2 安装CUDA</h5>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315143756001.png" alt="image-20200315143756001" /><figcaption>image-20200315143756001</figcaption>
</figure>
<p>https://developer.nvidia.com/cuda-toolkit-archive</p>
<p>笔者使用的<code>Win10</code>，附上离线安装版链接：</p>
<p><del>http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe</del></p>
<h6 id="tips最新版本的cuda10.2现在还无法被pytorch支持安装10.1版本的即可">Tips：最新版本的CUDA(10.2)现在还无法被Pytorch支持，安装10.1版本的即可。</h6>
<p>http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_426.00_win10.exe</p>
<p>下载完毕，双击打开即可。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315145247036.png" alt="image-20200315145247036" /><figcaption>image-20200315145247036</figcaption>
</figure>
<p>点击OK选择下一步。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315145432177.png" alt="image-20200315145432177" /><figcaption>image-20200315145432177</figcaption>
</figure>
<p>等待进度条达到100%，会自动打开安装程序。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315150124951.png" alt="image-20200315150124951" /><figcaption>image-20200315150124951</figcaption>
</figure>
<p>选择自定义，然后全部选中，期间会升级本机的<strong>显卡驱动</strong>。</p>
<h6 id="tips升级显卡驱动是很重要的一步不升级到最新版本无法正确安装cuda"><strong>Tips：</strong>升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装<strong>CUDA</strong></h6>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315150240356.png" alt="image-20200315150240356" /><figcaption>image-20200315150240356</figcaption>
</figure>
<p>等待安装完毕。</p>
<h5 id="安装cudnn">5.3 安装cuDNN</h5>
<p><strong>相比标准的cuda，它在一些常用的神经网络操作上进行了性能的优化，比如卷积，pooling，归一化，以及激活层等等。</strong></p>
<p>下载过程中需要注册 <strong>NVIDIA account</strong>。</p>
<p>下载完毕后执行解压：会生成<code>cuda/include、cuda/lib、cuda/bin</code>三个目录；</p>
<p>然后分别将<code>cuda/include、cuda/lib、cuda/bin</code>三个目录中的内容拷贝到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</code>对应的<code>include、lib、bin</code>目录下即可。</p>
<h5 id="安装pytorch-gpu版本"><strong>5.4安装Pytorch-GPU版本</strong></h5>
<p>下载Pytorch-CUDA版本的whl文件，用于离线安装。</p>
<p>https://download.pytorch.org/whl/torch_stable.html</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315151856974.png" alt="image-20200315151856974" /><figcaption>image-20200315151856974</figcaption>
</figure>
<p>其中，<strong>cu101</strong>代表CUDA版本是10.1，<strong>cp37</strong>代表CPython version 3.7（指的是C语言实现的Python，就是原汁原味的Python。除了CPython以外，还有用Java实现的Jython，用.NET实现的IronPython，使Python方便地和Java程序、.NET程序集成。另外还有一些实验性的Python解释器比如PyPy），<strong>win</strong>代表Windows操作系统，<strong>amd64</strong>代表64位CPU平台。</p>
<p>使用<strong>管理员权限</strong>打开<code>Anaconda Prompt (Anaconda3)</code>cmd窗口，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torch-1.4.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>
<p>等待安装完毕。</p>
<p>使用相同的操作安装 <code>torchvision</code>，其中包含流行的数据集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torchvision-0.5.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>
<p>至此<strong>Pytoch-GPU</strong>版已经全部安装完毕。</p>
<p><strong>5.5 测试是否安装成功</strong></p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200315153854134.png" alt="image-20200315153854134" /><figcaption>image-20200315153854134</figcaption>
</figure>
<p>打开cmd窗口，输入<strong>python</strong>进入<strong>python环境</strong>。依次输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>输出为<strong>True</strong>，安装完毕。</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Pip镜像源</title>
    <url>/p/Modify-pip-mirror-source/</url>
    <content><![CDATA[<p>修改pip镜像源</p>
<a id="more"></a>
<p>清华源：https://pypi.tuna.tsinghua.edu.cn/simple/</p>
<p>豆瓣源：https://pypi.doubanio.com/simple/</p>
<p>使用方法</p>
<p>临时使用：可以在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple</p>
<p>例如：<code>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>永久修改：linux下，修改 <code>~/.pip/pip.conf</code>，设置为以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>windows下，直接在user目录中创建一个pip目录，如：C:09\.pip，新建文件pip.ini，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Tkinter(一)</title>
    <url>/p/tkinter-tutorial-02/</url>
    <content><![CDATA[<p>基于 Python 的 Tkinter 常用于UI界面开发。</p>
<p>以下是Tkinter为验证函数提供的一些额外选项。</p>
<a id="more"></a>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr class="header">
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>'%d'</td>
<td>操作代码：0表示删除操作；1表示插入操作；2表示获得、失去焦点或者<code>textvariable</code>变量的值被修改</td>
</tr>
<tr class="even">
<td>'%i'</td>
<td>当用户尝试插入或者删除操作时，该选项表示插入或者删除的位置(索引号)，如果是由于获得、失去焦点或<code>textvarible</code>变量的值被修改而调用验证函数，那么该值是-1</td>
</tr>
<tr class="odd">
<td>'%P'</td>
<td>当输入框的值允许改变的时候，该值有效。该值作为输入框的最新文本内容。</td>
</tr>
<tr class="even">
<td>'%s'</td>
<td>该值为调用验证函数前输入框的文本内容</td>
</tr>
<tr class="odd">
<td>'%S'</td>
<td>当插入或者删除操作触发验证函数时，该值有效。该选项表示文本被插入和删除的内容</td>
</tr>
<tr class="even">
<td>'%v'</td>
<td>该组件当前validate选项的值</td>
</tr>
<tr class="odd">
<td>'%V'</td>
<td>调用该验证函数的原因。该值是'focusin'、'focusout'、'key'或'forced'（textvariable选项指定的变量值被修改）中的一个</td>
</tr>
<tr class="even">
<td>'%W'</td>
<td>该组件的名字</td>
</tr>
</tbody>
</table>
<p>启用验证的开关是validate选项，该选项可以设置的值如下表所示</p>
<table>
<thead>
<tr class="header">
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>'focus'</td>
<td>当Entry组件获得或者失去焦点时候验证</td>
</tr>
<tr class="even">
<td>'focusin'</td>
<td>当Entry组件获得焦点的时候验证</td>
</tr>
<tr class="odd">
<td>'focusont'</td>
<td>当Entry组件失去焦点的时候验证</td>
</tr>
<tr class="even">
<td>'key'</td>
<td>当输入框被编辑的时候验证</td>
</tr>
<tr class="odd">
<td>'all'</td>
<td>当出现上面任何一种情况时验证</td>
</tr>
<tr class="even">
<td>'none'</td>
<td>关闭验证功能，默认设置。注意是字符串的<code>'none'</code>，而非<code>None</code></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Tkinter(二)</title>
    <url>/p/tkinter-tutorial-01/</url>
    <content><![CDATA[<p>基于 Python 的 Tkinter 常用于UI界面开发。</p>
<p>下表列出了Tkinter 框架的常用组件和用法，供查找。</p>
<a id="more"></a>
<table>
<thead>
<tr class="header">
<th>组件名称</th>
<th>组件用法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Label组件</td>
<td>是用于在界面上输出描述的标签</td>
</tr>
<tr class="even">
<td>Button组件</td>
<td>用于实现一个按钮，它的绝大多数选项与Label组件是一样的。<strong>command选项可以接收用户的信息。</strong></td>
</tr>
<tr class="odd">
<td>Checkbutton组件</td>
<td>实现多选按钮</td>
</tr>
<tr class="even">
<td>Radiobutton组件</td>
<td>与Checkbutton组件的用法基本一致。唯一不同的是Radiobutton实现的是<strong>“单选”</strong>的效果</td>
</tr>
<tr class="odd">
<td>LabelFrame组件</td>
<td>LabelFrame组件是<strong>Frame</strong>框架的进化版。也就是添加了Label的Frame。</td>
</tr>
<tr class="even">
<td>Entry组件</td>
<td>用于实现平时所说的输入框。</td>
</tr>
<tr class="odd">
<td>Listbox组件</td>
<td>用于实现列表输入框</td>
</tr>
<tr class="even">
<td>Scrollbar组件</td>
<td>用于实现垂直滚动条</td>
</tr>
<tr class="odd">
<td>Scale组件</td>
<td>与Scrollbar相似。Scale组件主要通过滑块来表示某个范围内的一个数字，可以通过修改选项设置范围以及分辨率（精度）</td>
</tr>
<tr class="even">
<td><strong>Text组件</strong></td>
<td>用于显示和处理多行文本。主要任务是显示多行文本，但它常常也被作为<strong>简单的文本编辑器</strong>和<strong>网页浏览器</strong>使用。</td>
</tr>
<tr class="odd">
<td>Canvas组件</td>
<td><strong>通用组件</strong>，通常用于显示和编辑图形，可以用它来绘制直线、圆形、多边形，甚至是绘制其他组件。</td>
</tr>
<tr class="even">
<td>Menu组件</td>
<td>用于实现顶级菜单、下拉菜单和弹出菜单。由于该组件是<strong>底层代码实现和优化</strong>，所以<strong>不建议自行</strong>通过按钮和其他组件来实现菜单功能。</td>
</tr>
<tr class="odd">
<td>Menubutton组件</td>
<td>用于实现一个与<strong>Menu组件</strong>相关联的按钮，它可以放在窗口中的任意位置，并且在被按下时弹出下拉菜单。</td>
</tr>
<tr class="even">
<td>OptionMenu组件</td>
<td>该组件是下拉菜单的改版，用于实现下拉列表框。</td>
</tr>
<tr class="odd">
<td>Message组件</td>
<td>Entry组件的变体，用于显示多行文本消息。</td>
</tr>
<tr class="even">
<td>Spinbox组件</td>
<td>Entry组件的变体，用于从一些固定的值中选取一个。</td>
</tr>
<tr class="odd">
<td>PanedWindow组件</td>
<td>类似于Frame组件，都是为组件提供一个框架。PanedWindow允许让用户调整应用程序的空间划分。</td>
</tr>
<tr class="even">
<td>Toplevel组件</td>
<td>类似于Frame组件，但Toplevel组件是一个独立的顶级窗口，这种窗口通常拥有标题栏、边框等部件。</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>初探docker(一)</title>
    <url>/p/docker-tutorial-01/</url>
    <content><![CDATA[<p>本文介绍的是docker的安装及常见命令。</p>
<p><strong>摘要：</strong><a href="https://www.docker.com/">Docker</a> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本。使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松。</p>
<p><strong>关键词：</strong>Docker</p>
<a id="more"></a>
<h3 id="安装docker">安装Docker</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror </span><br><span class="line"><span class="comment"># sudo sh get-docker.sh --mirror Aliyun</span></span><br></pre></td></tr></table></figure>
<h3 id="启动docker-ce">启动Docker-CE</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="优雅的删除docker">优雅的删除docker</h3>
<p>Debian系：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep docker</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove --purge docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<h3 id="测试-docker-是否安装正确">测试 Docker 是否安装正确</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line">以下是输出：</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
<h3 id="获取镜像加速器">获取镜像加速器</h3>
<p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p>
<ul>
<li><p>网易云加速器 <code>https://hub-mirror.c.163.com</code></p></li>
<li><p>百度云加速器 <code>https://mirror.baidubce.com</code></p></li>
<li><p><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors">阿里云加速器(需登录账号获取)</a></p>
<p>本节我们以 <a href="https://www.163yun.com/">网易云</a> 镜像服务 <code>https://hub-mirror.c.163.com</code> 为例进行介绍。</p></li>
</ul>
<h4 id="linux">Linux</h4>
<p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意要保证该文件符合 <strong>json</strong> 规范，否则 Docker 将不能启动。</p>
</blockquote>
<p>之后重启服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h4 id="windows-10">Windows 10</h4>
<p>对于使用 <code>Windows 10</code> 的用户，在任务栏托盘 Docker 图标内右键菜单选择 <code>Settings</code>，打开配置窗口后在左侧导航菜单选择 <code>Docker Engine</code>，在右侧像下边一样编辑 json 文件，之后点击 <code>Apply &amp; Restart</code> 保存后 Docker 就会重启并应用配置的镜像地址了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://28wgvhgl.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/image/image-20200718170304988.png" /></p>
<h3 id="常见docker命令">常见docker命令</h3>
<h4 id="取回容器">取回容器</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull fly97/v2fly</span><br></pre></td></tr></table></figure>
<h4 id="运行容器">运行容器</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name v2fly -v /etc/caddy:/etc/caddy  -p 443:443 fly97/v2fly</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-v ：启用目录挂载。冒号":"前面的目录是<strong>宿主机目录</strong>，后面的目录是<strong>容器内目录</strong>。</p>
<p>-p：启用端口映射。</p>
<p>-d：在后台运行容器并打印容器ID。</p>
<p>--restart=always：保证每次docker服务重启后容器也自动重启</p>
<p>--network</p>
</blockquote>
<p>​ 如果容器已经启动了而又想设置容器自动启动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker update --restart=always &lt;CONTAINER ID/CONTAINER NAME&gt;</span><br></pre></td></tr></table></figure>
<h4 id="进入容器">进入容器</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it $(docker ps| grep fly97/v2fly | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /bin/sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-i： 交互式操作。</p>
<p>-t：启用终端运行。</p>
<p>/bin/sh：打开交互式 Shell</p>
</blockquote>
<h4 id="查看当前运行的容器">查看当前运行的容器</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure>
<h4 id="运行容器-1">运行容器</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start CONTAINER_NAME</span><br></pre></td></tr></table></figure>
<h4 id="停止容器">停止容器</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop CONTAINER_NAME</span><br></pre></td></tr></table></figure>
<h4 id="删除容器">删除容器</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm CONTAINER_NAME</span><br></pre></td></tr></table></figure>
<h4 id="查看镜像">查看镜像</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h4 id="删除镜像">删除镜像</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGE_ID</span><br></pre></td></tr></table></figure>
<h4 id="全部命令">全部命令</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\wf09\Desktop\v2fly<span class="literal">-docker</span>&gt; docker -<span class="literal">-help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker [<span class="type">OPTIONS</span>] COMMAND</span><br><span class="line"></span><br><span class="line">A self<span class="literal">-sufficient</span> runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      -<span class="literal">-config</span> string      Location of client config files (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker&quot;</span>)</span><br><span class="line">  <span class="literal">-c</span>, -<span class="literal">-context</span> string     Name of the context to use to connect to the</span><br><span class="line">                           daemon (overrides DOCKER_HOST env var and</span><br><span class="line">                           default context <span class="built_in">set</span> with <span class="string">&quot;docker context use&quot;</span>)</span><br><span class="line">  <span class="literal">-D</span>, -<span class="literal">-debug</span>              Enable debug mode</span><br><span class="line">  <span class="literal">-H</span>, -<span class="literal">-host</span> list          Daemon socket(s) to connect to</span><br><span class="line">  <span class="literal">-l</span>, -<span class="literal">-log</span><span class="literal">-level</span> string   <span class="built_in">Set</span> the logging level</span><br><span class="line">                           (<span class="string">&quot;debug&quot;</span>|<span class="string">&quot;info&quot;</span>|<span class="string">&quot;warn&quot;</span>|<span class="string">&quot;error&quot;</span>|<span class="string">&quot;fatal&quot;</span>)</span><br><span class="line">                           (default <span class="string">&quot;info&quot;</span>)</span><br><span class="line">      -<span class="literal">-tls</span>                Use TLS; implied by -<span class="literal">-tlsverify</span></span><br><span class="line">      -<span class="literal">-tlscacert</span> string   Trust certs signed only by this CA (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\ca.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlscert</span> string     Path to TLS certificate file (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\cert.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlskey</span> string      Path to TLS key file (default</span><br><span class="line">                           <span class="string">&quot;C:\\Users\\wf09\\.docker\\key.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlsverify</span>          Use TLS and verify the remote</span><br><span class="line">  <span class="literal">-v</span>, -<span class="literal">-version</span>            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust on Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container<span class="string">&#x27;s changes</span></span><br><span class="line"><span class="string">  cp          Copy files/folders between a container and the local filesystem</span></span><br><span class="line"><span class="string">  create      Create a new container</span></span><br><span class="line"><span class="string">  diff        Inspect changes to files or directories on a container&#x27;</span>s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container<span class="string">&#x27;s filesystem as a tar archive</span></span><br><span class="line"><span class="string">  history     Show the history of an image</span></span><br><span class="line"><span class="string">  images      List images</span></span><br><span class="line"><span class="string">  import      Import the contents from a tarball to create a filesystem image</span></span><br><span class="line"><span class="string">  info        Display system-wide information</span></span><br><span class="line"><span class="string">  inspect     Return low-level information on Docker objects</span></span><br><span class="line"><span class="string">  kill        Kill one or more running containers</span></span><br><span class="line"><span class="string">  load        Load an image from a tar archive or STDIN</span></span><br><span class="line"><span class="string">  login       Log in to a Docker registry</span></span><br><span class="line"><span class="string">  logout      Log out from a Docker registry</span></span><br><span class="line"><span class="string">  logs        Fetch the logs of a container</span></span><br><span class="line"><span class="string">  pause       Pause all processes within one or more containers</span></span><br><span class="line"><span class="string">  port        List port mappings or a specific mapping for the container</span></span><br><span class="line"><span class="string">  ps          List containers</span></span><br><span class="line"><span class="string">  pull        Pull an image or a repository from a registry</span></span><br><span class="line"><span class="string">  push        Push an image or a repository to a registry</span></span><br><span class="line"><span class="string">  rename      Rename a container</span></span><br><span class="line"><span class="string">  restart     Restart one or more containers</span></span><br><span class="line"><span class="string">  rm          Remove one or more containers</span></span><br><span class="line"><span class="string">  rmi         Remove one or more images</span></span><br><span class="line"><span class="string">  run         Run a command in a new container</span></span><br><span class="line"><span class="string">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span></span><br><span class="line"><span class="string">  search      Search the Docker Hub for images</span></span><br><span class="line"><span class="string">  start       Start one or more stopped containers</span></span><br><span class="line"><span class="string">  stats       Display a live stream of container(s) resource usage statistics</span></span><br><span class="line"><span class="string">  stop        Stop one or more running containers</span></span><br><span class="line"><span class="string">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span></span><br><span class="line"><span class="string">  top         Display the running processes of a container</span></span><br><span class="line"><span class="string">  unpause     Unpause all processes within one or more containers</span></span><br><span class="line"><span class="string">  update      Update configuration of one or more containers</span></span><br><span class="line"><span class="string">  version     Show the Docker version information</span></span><br><span class="line"><span class="string">  wait        Block until one or more containers stop, then print their exit codes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run &#x27;</span>docker COMMAND -<span class="literal">-help</span><span class="string">&#x27; for more information on a command.</span></span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Docker(二)</title>
    <url>/p/docker-tutorial-02/</url>
    <content><![CDATA[<p>本文主要介绍了Dockerfile。</p>
<p><strong>摘要：什么是 Dockerfile？</strong></p>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p><strong>关键词：</strong>Dockerfile</p>
<a id="more"></a>
<h3 id="使用-dockerfile-定制镜像">使用 Dockerfile 定制镜像</h3>
<h4 id="定制一个ubuntu镜像">定制一个ubuntu镜像</h4>
<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;这是一个本地构建的ubuntu:18.04镜像&#x27;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="from-和-run-指令的作用">FROM 和 RUN 指令的作用</h4>
<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 <strong>ubuntu:18.04</strong>就是定制需要的基础镜像。后续的操作都是基于 ubuntu。</p>
<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下两种格式：</p>
<p>Shell格式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>
<p>Exec 格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</p>
<p>​ 例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>​ 以上执行会创建 3 层镜像。可简化为以下格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p>
<h4 id="开始构建镜像">开始构建镜像</h4>
<p>切换到<code>Dockerfile</code> 文件的存放目录，执行以下命令，开始构建对象。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t ubuntu:latest .</span><br></pre></td></tr></table></figure>
<p>以上示例，通过目录下的 Dockerfile 构建一个 <code>ubuntu:latest（镜像名称:镜像标签）</code>。</p>
<p><strong>注：最后的 . 代表本次执行的上下文路径，下一节会介绍。</strong></p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200718201119692.png" alt="image-20200718201119692" /><figcaption>image-20200718201119692</figcaption>
</figure>
<p>以上说明已经构建成功。</p>
<h4 id="上下文路径">上下文路径</h4>
<p>上面提到 <strong>.</strong> 是上下文路径，那么什么是上下文路径呢？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t ubuntu:latest .</span><br></pre></td></tr></table></figure>
<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>
<blockquote>
<p>由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>
</blockquote>
<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>
<p><strong>注意：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</strong></p>
<h3 id="指令详解">指令详解</h3>
<h4 id="copy">COPY</h4>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>
<p><strong>[--chown=:]</strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>
<p><strong><源路径></strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure>
<p><strong><目标路径></strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>
<h4 id="add">ADD</h4>
<p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>
<ul>
<li>ADD 的优点：在执行 <strong><源文件></strong> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <strong><目标路径></strong>。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<h4 id="cmd">CMD</h4>
<p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ul>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build 时运行。</li>
</ul>
<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>
<p><strong>注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</strong></p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;shell 命令&gt; </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]  <span class="comment"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>
</blockquote>
<h4 id="entrypoint">ENTRYPOINT</h4>
<p>类似于 CMD 指令，但其不会被 <code>docker run</code> 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>
<p>但是, 如果运行 <code>docker run</code> 时使用了 <code>--entrypoint</code> 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p>
<p><strong>优点</strong>：在执行 <code>docker run</code> 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>
<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure>
<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>
<p>示例：</p>
<p>假设已通过 Dockerfile 构建了 <strong>nginx:test</strong> 镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参</span><br><span class="line">CMD [&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot;] # 变参 </span><br></pre></td></tr></table></figure>
<p>1、不传参运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash">  nginx:<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p>容器内会默认运行以下命令，启动主进程。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>2、传参运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash">  nginx:<span class="built_in">test</span> -c /etc/nginx/new.conf</span></span><br></pre></td></tr></table></figure>
<p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure>
<h4 id="env">ENV</h4>
<p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>
<p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="arg">ARG</h4>
<p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 <code>docker build</code> 的过程中有效，构建好的镜像内不存在此环境变量。</p>
<p>构建命令 <code>docker build</code> 中可以用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>
<h4 id="volume">VOLUME</h4>
<p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>
<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<p><strong>注意：</strong></p>
<ol type="1">
<li>通过<code>docker run</code>命令的<code>-v</code>标识创建的挂载点只能对创建的容器有效。</li>
<li>通过 Dockerfile 的 VOLUME 指令可以在镜像中创建挂载点，这样只要通过该镜像创建的容器都有了挂载点。</li>
<li>通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的。</li>
<li><code>docker run</code>中使用 <code>--volumes-from</code>标记的镜像可以共享<strong>匿名数据卷</strong>。镜像可以是同一个镜像，也可以是不同镜像。</li>
</ol>
<h4 id="expose">EXPOSE</h4>
<p>暴露容器的端口。</p>
<p>作用：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure>
<h4 id="workdir">WORKDIR</h4>
<p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>
<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="user">USER</h4>
<p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>
<h4 id="healthcheck">HEALTHCHECK</h4>
<p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span></span><br></pre></td></tr></table></figure>
<h4 id="onbuild">ONBUILD</h4>
<p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>
<p>格式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>奥卡姆剃刀和没有免费的午餐定理</title>
    <url>/p/Occam&#39;s-razor-and-no-free-lunch-theorem/</url>
    <content><![CDATA[<p>本文原载于<a href="https://imlogm.github.io/">https://imlogm.github.io</a>，转载请注明出处！</p>
<p><strong>摘要</strong>：“奥卡姆剃刀”和“没有免费的午餐”是机器学习中两个很基本的原则和定理。由于名字有点怪，所以初学者可能在理解上陷入误区。本文试图用简洁易懂的方式解释这两个原则和定理，并告诉大家它们的名字是怎么来的。</p>
<p><strong>关键字</strong>：机器学习, 奥卡姆剃刀, 没有免费的午餐</p>
<a id="more"></a>
<p>“奥卡姆剃刀”和“没有免费的午餐”是机器学习中两个很基本的原则和定理，很多书都会提到它们来提升逼格。不过，烦就烦在它们的名字取的有些不好理解，初学者望文生义就容易错误理解。其实，了解了它们名字的由来，这两个原则和定理是很容易想明白的，也不用去纠结如何证明它们，因为它们更接近哲学思想，而不是你会在实际项目中用到的公式。</p>
<h4 id="奥卡姆剃刀occams-razor">奥卡姆剃刀（Occam’s razor）</h4>
<p>“奥卡姆剃刀”其实并不是机器学习领域产生的定理，事实上，它是哲学领域的一个思想。这个思想说起来也很简单，7个字，<code>“简单的是最好的”</code>。</p>
<p>相信大家不难理解这个哲学思想，比如在数学领域，大多数数学家认为“好的公式应当是简洁明了的”，就是“奥卡姆剃刀”的体现。</p>
<p>这个思想我能理解，但为什么叫这么奇怪的名字？容易想到，“奥卡姆”是提出这个思想的人的名字；至于为什么叫“剃刀”是因为这个思想的提出，对封建旧思想来说是把锋利的剃刀，狠狠地剃除教会的旧思想。（具体是如何剃除旧思想的就不展开了）</p>
<p>那这个思想是怎么应用在机器学习领域的呢？用下图就可以概括：</p>
<p><img src="https://ftp.fly97.cn/image/overfit.png" style="zoom:80%;" align="center"/></p>
<p>了解机器学习的同学不难看出，上图表示的是过拟合问题，不了解的同学也不必担心，可以把上图想象成用曲线拟合几个点。</p>
<p>那么问题来了，上图中，哪种拟合方式是比较好的呢？相信大多数人都会选择左小图的拟合方式。机器学习领域也通常认为左小图是比较好的，原因就是“奥卡姆剃刀”的思想，“简单的是最好的”。</p>
<p>有些敢于挑战权威的同学可能会反驳，“怎么证明图1左小图是更简单的呢？我可以认为右小图更简单”。是的，这个问题周志华的西瓜书中也有提到，其实是没有办法说明哪种更简单。这也是哲学问题的通病，难以联系到实际中，往往会有多种解读。</p>
<p>不过我们不用去纠结怎样才算“简单”，只要明白这个词是什么意思就可以了。</p>
<p>可能还会有同学反驳，“我同意左小图是简单的，但万一实际情况中右小图才是更符合结果的拟合方式呢？”。这个想法也是对的，我们无法证明实际情况一定是左小图的拟合方式最好。这也就是下面“没有免费的午餐”定理要说明的。</p>
<h4 id="没有免费的午餐定理no-free-lunch-nfl">“没有免费的午餐”定理（no free lunch, NFL）</h4>
<p>这个定理的名字乍一看很唬人，也有很多初学者因为这个名字陷入了误区。我们可以先把名字放在一边，先看定理的内容。</p>
<p>这个定理证明起来很复杂，一长串的数学公式，但说明白其实只要一句话，<code>“没有一种机器学习算法是适用于所有情况的”</code>。</p>
<p>这也符合我们的直觉。举个例子吧，比如上图，假设上图的左小图是机器算法A给出的拟合曲线，上图的右小图是机器算法B给出的拟合曲线。我们就一定能说机器算法A比机器算法B更好吗？或者说左小图的拟合曲线一定比右小图更符合实际情况吗？都不能。“没有免费的午餐”定理证明了对于所有机器学习问题，机器算法A更好与机器算法B更好的概率是一样的。<code>更一般地说，对于所有机器学习问题，任何一种算法（包括瞎猜）的期望效果都是一样的</code>。</p>
<p>那我们还学个啥？既然任何算法的期望效果和瞎猜一样，我们为什么还要学？</p>
<p>注意，这个定理有个前提：“对于所有机器学习问题，且所有问题同等重要”。而我们实际情况不是这样，我们在实际中往往更关心的是一个特定的机器学习问题，对于特定的问题，特定的机器学习算法效果自然比瞎猜更好。还是上图的例子，虽然“没有免费的午餐”定理告诉我们：我们不能预计到底是左小图拟合更好还是右小图拟合更好，但聪明的你一定能想到：是好是坏，代入到具体问题中检验一下不就知道了。</p>
<p>这个定理本质上就是告诉我们不要奢望能找到一种算法对所有问题都适用。这么说来，这个定理其实有点废话，因为我们面对的总是一个特定的问题，而不是所有问题。</p>
<p>但是这个定理其实揭示了一个哲学思想，“有得必有失”，某一个机器学习算法在某个领域好用，在另外一个领域就有可能不好用，瞎猜在一些情况下不好用，但在某个特定的问题上会很好用。就像能量守恒定理，这里的能量增加，另外一边的能量就会减少。天上掉馅饼被你捡到了，这个时刻你很幸运，但是之后你就会倒霉。</p>
<p>理解了上面一段话，也就明白了这个定理为什么取这么奇怪的名字。</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Chromium浏览器并解决缺少 Google API 密钥问题</title>
    <url>/p/how-to-install-Chromium-and-solve-the-problem/</url>
    <content><![CDATA[<p><strong>Chromium</strong>是<a href="https://zh.wikipedia.org/wiki/Google">Google</a>为发展浏览器<a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a>而开启的免费开源软件项目。Chromium的用户界面极简。Google期望使浏览器“在认知和物理上都让人感觉轻巧，快速”。（英语：feel lightweight (cognitively and physically) and fast.</p>
<p>本文主要介绍如何下载Chromium浏览器并解决缺少 Google API 密钥问题。</p>
<p><strong>关键词：Chromium缺少 Google API</strong></p>
<a id="more"></a>
<h4 id="下载chromium">下载Chromium</h4>
<p>官方站点：https://download-chromium.appspot.com/</p>
<p>分发站点：<a href="https://chromium.woolyss.com/#updater">Download latest stable Chromium binaries (64-bit and 32-bit) (woolyss.com)</a></p>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/get_chromium.png" /></p>
<p>解压后放置到任意文件夹。</p>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/unzip_chromium.png" /></p>
<h4 id="关闭缺少-google-api-密钥提示">关闭缺少 Google API 密钥提示</h4>
<p>首次打开Chromium时，地址栏下方会提示 <strong>缺少 Google API 密钥，因此 Chromium 的部分功能将无法使用</strong>。</p>
<p>法一：如不需要登录谷歌账户，仅仅想屏蔽上述烦人的提示，可以直接设置<strong>相关环境变量为<code>no</code></strong>，屏蔽提示。</p>
<p>打开 windows 的 <code>cmd</code> 命令提示符，依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setx GOOGLE_API_KEY <span class="string">&quot;no&quot;</span></span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_ID <span class="string">&quot;no&quot;</span></span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_SECRET <span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>
<p>法二：加入Chromuim-Dev谷歌群组并开启相关API</p>
<p>搬运自：http://www.chromium.org/developers/how-tos/api-keys</p>
<ol type="1">
<li><p>加入Google Groups <a href="https://groups.google.com/a/chromium.org/forum/?fromgroups#!forum/chromium-dev">chromium-dev@chromium.org</a>，如果介意相关邮件打扰可以选择退订相关邮件。为方便起见，以下API仅限对订加入社群的人可见</p></li>
<li><p>确保登陆了已经订阅chromium-dev社群的Google账号</p></li>
<li><p>打开 https://cloud.google.com/console</p></li>
<li><p>创建或使用现有项目 <img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_a_gcp_project.png" /></p></li>
<li><p>选择 <code>API和服务-&gt;库</code>，搜索下图给出的API，并按需启用相关API</p>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_api_1.png" /></p></li>
</ol>
<figure>
<img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/open_api_2.png" alt="API库" /><figcaption>API库</figcaption>
</figure>
<figure>
<img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/oepn_api_3.png" alt="启用同步API" /><figcaption>启用同步API</figcaption>
</figure>
<ol start="5" type="1">
<li>返回上级菜单，选择<code>凭据-&gt;创建凭据-&gt;OAuth客户端ID</code>，应用类型选择<code>桌面应用</code>，名称<code>任选</code>。记录得到的客户端ID和客户端密钥。 <img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_1.png" alt="创建凭据" /></li>
</ol>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_2.png" /></p>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/make_oauth_id_3.png" /></p>
<ol start="6" type="1">
<li>返回上级菜单，选择<code>凭据-&gt;创建凭据-&gt;API密钥</code>，名称<code>任选</code>。</li>
</ol>
<p><img src="https://fly97.coding.net/p/images/d/github/git/raw/master/20210209/create_api_key.png" /></p>
<h5 id="设置环境变量">设置环境变量</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOOGLE_API_KEY&#x3D;your_api_key</span><br><span class="line">GOOGLE_DEFAULT_CLIENT_ID&#x3D;your_client_id</span><br><span class="line">GOOGLE_DEFAULT_CLIENT_SECRET&#x3D;your_client_secret</span><br></pre></td></tr></table></figure>
<p>完.</p>
]]></content>
      <tags>
        <tag>Chromium</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Fish自动匹配历史命令</title>
    <url>/p/install-fish-shell-to-automatically-match-historical-commands/</url>
    <content><![CDATA[<p>本文介绍了Fish的使用，使用Fish可以根据输入自动匹配历史命令。</p>
<p><strong>摘要</strong>：Fish的官网宣传语是 Finally, a command line shell for the 90s。 翻译过来就是 Fish shell 是一个为90后准备的 shell。有人说：“二逼青年用bash，普通青年用zsh，文艺青年用fish。” 其次由于zsh 的速度实在是太慢，所以决定换用fish，fish速度快，智能提示强大。</p>
<p><strong>关键字</strong>：Fish</p>
<a id="more"></a>
<h4 id="fish入门使用">Fish入门使用</h4>
<h5 id="ubuntu安装fish">Ubuntu安装Fish</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:fish-shell/release-2</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br><span class="line"><span class="comment">#切换到fish</span></span><br><span class="line"><span class="built_in">echo</span> /usr/bin/fish | sudo tee -a /etc/shells</span><br><span class="line">sudo chsh -s /usr/bin/fish &amp;&amp; fish</span><br></pre></td></tr></table></figure>
<p>fish的鲜明特征在于安装时已经默认集成了很多需要的功能。 比如：</p>
<ul>
<li>命令行语法高亮，错误会显示红色</li>
<li>智能提示</li>
<li>可以使用web网页的进行终端配置</li>
</ul>
<p>fish 有智能提示，一个命令一旦输入过一次，会自动显示上一次的全部命令，细心一点会发现会有一层灰色的字体表示上一次的命令，按<code>Ctrl+F</code>或者 右方向键<code>→</code>， 即可自动补全。</p>
<p><img src="https://ftp.fly97.cn/image/20200811_144927.gif" /></p>
<h5 id="网页配置fish">网页配置Fish</h5>
<p><code>fish_config</code> 可以直接跳出网页版本配置fish的界面。</p>
<p>web版本可以设置主题， 推荐其中的"Tomorrow Night"主题颜色。</p>
<figure>
<embed src="https://ftp.fly97.cn/image/2027280-11b7a5729b03227b.webp" /><figcaption>img</figcaption>
</figure>
<p>选择想要的主题，然后点击set theme即可设置主题。 在命令里按enter 即可退出web版本的界面。</p>
<p>在prompt里面可以自己选择fish终端的主题。</p>
<figure>
<embed src="https://ftp.fly97.cn/image/2027280-3f8729b449ea454d.webp" /><figcaption>img</figcaption>
</figure>
<h4 id="兼容bash">兼容Bash</h4>
<p>由于fish 很多<strong>不兼容</strong>bash的功能导致了很多脚本无法运行，这一点是很多人吐槽fish的地方，我们需要一种方式来运行bash脚本。</p>
<p>比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arc land --onto `git rev-parse --abbrev-ref HEAD` </span><br></pre></td></tr></table></figure>
<p>只需要在前面添加一个bash -c 命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;arc land --onto `git rev-parse --abbrev-ref HEAD`&quot;</span></span><br></pre></td></tr></table></figure>
<p>顺手加个alias就更方便了，可以直接在命令行里使用命令<code>arcl</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> arcl bash -c <span class="string">&quot;arc land --onto `git rev-parse --abbrev-ref HEAD`&quot;</span></span><br></pre></td></tr></table></figure>
<p>对于脚本文件，比如我将需要执行的命令或文件放到<code>repomerge.sh</code></p>
<p>在~/.config/fish/config.fish添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> up <span class="string">&quot;bash -c /usr/bin/repomerge.sh&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后就可以自由的使用up命令了</p>
<p>其中function fish_prompt 函数用于定义fish终端的显示样式。</p>
<p>我们只需要写一个fish_prompt函数即可。集成了git的分支名称以及当前的变化。</p>
<p>显示的样式如下：</p>
<figure>
<embed src="https://ftp.fly97.cn/image/2027280-2c1a98068158e5fd.webp" /><figcaption>img</figcaption>
</figure>
<p><strong>说明: ✔代表当前git项目是干净的。 %1 表示有一个文件未追踪 +1 表示一个文件已暂存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端显示样式的配置</span></span><br><span class="line"><span class="keyword">function</span> fish_prompt --description <span class="string">&#x27;Write out the prompt&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">set</span> -q __fish_prompt_normal</span><br><span class="line">        <span class="built_in">set</span> -g __fish_prompt_normal (set_color normal)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    __fish_git_prompt &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> git_is_repo</span><br><span class="line">        <span class="keyword">if</span> not <span class="built_in">set</span> -q __git_cb</span><br><span class="line">            <span class="built_in">set</span> __git_cb (set_color blue)<span class="string">&quot; (&quot;</span>(set_color brred)(git branch | grep \* | sed <span class="string">&#x27;s/* //&#x27;</span>) (set_color -o bryellow)(__fish_git_prompt_informative_status)(set_color blue)<span class="string">&quot;)&quot;</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">set</span> -q __fish_prompt_cwd</span><br><span class="line">        <span class="built_in">set</span> -g __fish_prompt_cwd (set_color <span class="variable">$fish_color_cwd</span>)</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&#x27;%s%s%s%s &#x27;</span> <span class="string">&quot;<span class="variable">$__fish_prompt_cwd</span>&quot;</span> (prompt_pwd) <span class="string">&quot;<span class="variable">$__fish_prompt_normal</span>&quot;</span> <span class="variable">$__git_cb</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="隐藏欢迎语">隐藏欢迎语</h4>
<p>在confin.sh文件里添加如下函数即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fish_greeting</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="其他配置">其他配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> l <span class="string">&quot;ll&quot;</span></span><br><span class="line"><span class="built_in">alias</span> dir <span class="string">&quot;dde-file-manager . &amp;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> docker <span class="string">&quot;sudo docker&quot;</span></span><br><span class="line"><span class="built_in">alias</span> apt <span class="string">&quot;sudo apt&quot;</span></span><br></pre></td></tr></table></figure>
<p>作者：iceqing 链接：https://www.jianshu.com/p/bf03bce60987 来源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>安装autojump自动切换目录</title>
    <url>/p/install-autojump-to-automatically-switch-directories/</url>
    <content><![CDATA[<p>本文介绍了autojump的使用，使用autojump可以很方便地切换目录。</p>
<p><strong>摘要</strong>：熟悉Linux 的小伙伴们都知道，在终端下需要使用命令<code>cd</code>切换目录。对于多层目录，还需要不停的用使用<code>cd</code>命令或者 Tab 键补齐，如果目录下文件夹过多，还需要使用<code>ls</code>查看当前目录下的文件。<a href="https://github.com/wting/autojump">autojump</a>是浏览文件系统的一种更快的方法。它通过维护命令行中最常用的目录的数据库来工作。autojump 是通过记录进入过的目录到数据库来实现的，所以必须是曾经进入过的目录才能跳转。</p>
<p><strong>关键字</strong>：autojump</p>
<a id="more"></a>
<h4 id="linux下安装">Linux下安装</h4>
<h5 id="源码安装">源码安装</h5>
<p>克隆以下仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wting/autojump.git</span><br></pre></td></tr></table></figure>
<p>coding分流</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://e.coding.net/fly97/github-projects/autojump.git</span><br></pre></td></tr></table></figure>
<p>执行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">chmod +x install.py</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure>
<h5 id="fish-shell的设置">fish shell的设置</h5>
<p>执行以下命令以创建fish shell的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;if test -f /root/.autojump/share/autojump/autojump.fish; . /root/.autojump/share/autojump/autojump.fish; end&quot;</span> &gt;&gt; ~/.config/fish/config.fish</span><br></pre></td></tr></table></figure>
<h5 id="修改环境变量">修改环境变量</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=&quot;</span><span class="variable">$PATH</span>:/root/.autojump/bin<span class="string">&quot; &gt; /etc/profile</span></span><br></pre></td></tr></table></figure>
<h5 id="执行以下命令检查是否正常运行">执行以下命令检查是否正常运行</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200811140853462.png" alt="image-20200811140853462" /><figcaption>image-20200811140853462</figcaption>
</figure>
<h4 id="常用命令">常用命令</h4>
<h5 id="查看-autojump-存储的目录的状态">查看 <code>autojump</code> 存储的目录的状态</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j -s</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200811142040440.png" alt="image-20200811142040440" /><figcaption>image-20200811142040440</figcaption>
</figure>
<h5 id="查看使用帮助">查看使用帮助</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j -h</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200811142133380.png" alt="image-20200811142133380" /><figcaption>image-20200811142133380</figcaption>
</figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>循环神经网络介绍</title>
    <url>/p/Introduction-to-Recurren-Neural-Networks/</url>
    <content><![CDATA[<p>什么是LSTM？ <a id="more"></a></p>
<p>LSTM 即 Long Short Term 网络——一般就叫做LSTM——是一种特殊的RNN，可以学习长期依赖信息。LSTM由 <em>Hochreiter &amp; Schmidhuber</em> (1997) 提出， 并被 <em>Alex Graves</em> 进行了改良和推广。在很多问题，LSTM 都取得了相当巨大的成功，并得到了广泛的使用。</p>
<p>LSTM 通过刻意的设计来避免长期依赖问题。记住长期的信息是 LSTM 的默认行为，而非需要付出很大代价才能获得的能力。</p>
<p>所有的 RNN都具有一种重复神经网络模块的链式的形式，在标准的RNN中，这个重复的模块只有一个非常简单的结构，例如一个 <em>tanh</em> 层。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_450.png" /></p>
<blockquote>
<p>上图即<strong>标准RNN中</strong>重复模块包含单一的层</p>
</blockquote>
<p>LSTM同样是这样的结构，但是重复的模块拥有一个不同的结构。不同于单一神经网络层，这里有四个，以一种非常特殊的方式进行交互。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_631.png" /></p>
<blockquote>
<p>上图即<strong>LSTM</strong>中的重复模块包含的四个交互的层</p>
</blockquote>
<p>我们会一步一步的剖析LSTM解析图。现在，我们先来熟悉一下途中使用的各种元素的图标。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181722_777.png" /></p>
<blockquote>
<p>LSTM中的图标</p>
</blockquote>
<p>在上面的图例中，每一条黑线传输着一整个向量，从一个节点的输出到其他节点的输入。粉色的圈代表 <em>pointwise</em> (逐点的)操作，诸如向量的和，而黄色的矩阵就是学习到的神经网络层。合在一起的线表示向量的连接，分开的线表示内容被复制，然后分发到不同的位置。</p>
<h4 id="lstm核心内容">2.LSTM核心内容</h4>
<p>LSTM的关键就是细胞状态（cell），水平线在图上方贯穿运行，细胞状态类似于传送带，直接在整个链上运行，只有一些少量的线性交互，信息在上面流传保持不变会很容易。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_640.png" /></p>
<p>LSTM 有通过精心设计的称作"<strong>门</strong>"的结构来去除或者增加信息到细胞状态的能力。门是一种让信息选择式通过的方法。他们包含一个 <em>sigmoid</em> 神经网络层和一个 <em>pointwise</em> 乘法操作。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_567.png" /></p>
<p><em>sigmoid</em> 层输出 0 到 1 之间的数值，描述每个部分有多少量可以通过。0 代表"不允许任何量通过"，1 就指"允许任何量通过"。</p>
<p>LSTM有三个门，来保护和控制细胞状态。</p>
<h4 id="逐步理解lstm">3.逐步理解LSTM</h4>
<p>LSTM中第一步是决定会从细胞状态中丢弃什么信息。这个决定通过一个称为 <strong>忘记门层</strong> 的门来完成。该门会读取 \(h_{t-1}\) 和 \(x_{t}\) ，输出一个在 0 到 1 之间的数值给每个在细胞状态中的数字。1 表示"完全保留"，0 代表"完全舍弃"。</p>
<p>让我们回到 <strong>语言模型</strong> 的例子中来基于已经看到的词预测下一个词。在这个问题中，细胞状态可能包含当前 <strong>主语</strong> 的类别，因此正确的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> ，我们希望忘记旧的 <strong>代词</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_259.png" /></p>
<h5 id="决定丢弃信息">3.1决定丢弃信息</h5>
<p>下一步是确定什么样的新信息被存放在细胞状态中。这里包含两部分。第一，<em>sigmoid</em> 层称 "输入门层" 决定什么值我们将要更新。然后，一个 <em>tanh</em> 层创建一个一个新的候选值向量，\(\)，会被加入到状态中。下一步，我们会将这两个信息来产生对状态的更新。</p>
<p>在我们 <strong>语言模型</strong> 的例子中，我们希望增加新的 <strong>代词</strong> 的类别到细胞状态中，来替代旧的需要忘记的 <strong>代词</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_897.png" /></p>
<h5 id="确定更新的信息">3.2确定更新的信息</h5>
<p>现在是更新旧细胞状态的时间了，\(C_{t-1}\) 更新为 \(C_{t}\)</p>
<p>我们把旧状态与 \(f_t\) 相乘，丢弃掉确定丢弃的信息，接着加上 \(i_t * _t\) ，这就是新的候选值。</p>
<p>在 <strong>语言模型</strong> 的例子中，这就是我们实际根据前面确定的目标，丢弃 <strong>旧代词</strong> 的类别信息并添加新的信息的地方。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_883.png" /></p>
<h5 id="更新细胞状态">3.3更新细胞状态</h5>
<p>最终，我们需要确定输出什么值，这个输出将会基于我们的细胞状态，但是也是一个过滤后的版本。首先，我们运行一个 <em>sigmoid</em> 层来确定细胞状态的哪个部分将输出出去。接着，我们把细胞状态通过 <em>tanh</em> 进行处理，得到一个在 -1 到 1 之间的值，并将它和 sigmoid 门的输出相乘，最终我们仅仅会输出我们确定输出的那部分。</p>
<p>在 <strong>语言模型</strong> 的例子中，因为他就看到了一个 <strong>代词</strong> ，可能需要输出一个 <strong>代词</strong> 相关的信息。例如，可能输出是否代词是单数还是负数。如果是 <strong>动词</strong> 的话，我们也他要知道 <strong>动词</strong> 需要进行的词形变化。</p>
<p><img src="https://ftp.fly97.cn/image/20150829181723_463.png" /></p>
]]></content>
      <tags>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo并推送到GitHub Pages</title>
    <url>/p/build-a-hexo-blog-and-push-to-GitHub-Pages/</url>
    <content><![CDATA[<p>之前因为重装系统丢掉了已经搭建好的Hexo博客配置文件。经过这件事以后我深刻地记住了备份的重要性。趁着刚刚搭建完博客，于是写一篇文章水一下！</p>
<a id="more"></a>
<h3 id="安装git软件">安装git软件</h3>
<p>https://git-scm.com/downloads</p>
<p><img src="https://ftp.fly97.cn/image/image-20200119205126173.png" alt="image-20200119205126173" style="zoom: 50%;" /></p>
<p>注意：此步需要添加git到环境变量，<del>因为写这边文章时，笔者已经安装完成了。</del></p>
<p>即最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>
<h3 id="安装nodejs">安装nodejs</h3>
<p><a href="https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi">https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi</a></p>
<p><img src="https://ftp.fly97.cn/image/image-20200119205441241.png" alt="image-20200119205441241" style="zoom:50%;" /></p>
<p>注意：此步需要添加<code>nodejs</code>到系统变量。</p>
<p>安装完毕后打开<code>cmd</code>输入<code>node -v npm -v</code>。如果显示版本号就说明安装完成了。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200119210346780.png" alt="image-20200119210346780" style="zoom:50%;" /></p>
<h4 id="给npm添加国内镜像源">给npm添加国内镜像源</h4>
<p>由于众所周知的原因，官方源如此缓慢，故使用阿里爸爸的源进行加速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="安装hexo">安装hexo</h3>
<p>在合适的地方新建一个文件夹，用来存放自己的博客文件。比如我的博客文件都存放在</p>
<p><code>C:\Users\wf09\Desktop\hexo</code></p>
<p>在该目录下右键点击<code>Git Bash Here</code></p>
<p><img src="https://ftp.fly97.cn/image/image-20200119211049388.png" alt="image-20200119211049388" style="zoom:50%;" /></p>
<p>在git命令行下依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g             <span class="comment">#安装hexo相关组件</span></span><br><span class="line">hexo -v                             <span class="comment">#检查是否安装完成</span></span><br><span class="line">hexo init                           <span class="comment">#初始化hexo博客目录</span></span><br><span class="line">npm install                         <span class="comment">#安装相关依赖</span></span><br><span class="line">npm install hexo-server --save      <span class="comment">#安装hexo服务器模块</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，输入<code>hexo s</code>命令以启动服务器，网站会在 <code>http://localhost:4000</code>下启动。在服务器启动期间，Hexo会监视文件变动并自动更新，无须重启服务器。</p>
<p>可以通过 <code>-p</code> 选项指定其他端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -p 4000</span><br></pre></td></tr></table></figure>
<p>此时打开<code>http://localhost:4000</code>就可以成功启动网站了。</p>
<h3 id="推送到github-pages">推送到Github Pages</h3>
<h4 id="链接github">链接Github</h4>
<p>右键打开<code>Git Bash</code>，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@your.site&quot;</span></span><br></pre></td></tr></table></figure>
<p>用户名和邮件根据你注册GitHub的信息自行修改。</p>
<p>输入以下命令以生成SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@your.site&quot;</span></span><br></pre></td></tr></table></figure>
<p>打开<a href="https://link.zhihu.com/?target=http%3A//github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名称任意。</p>
<p><code>Git Bash</code> 中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>将输出的内容复制到框中，点击确定保存。</p>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果出现一个警告，输入<code>yes</code>回车并忽略他就好。</p>
<p>如果回车看到：<strong><user_name > You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上<code>github</code>。</p>
<h4 id="发布网站在github-pages">发布网站在GitHub Pages</h4>
<p>打开博客根目录下的<code>_config.yml</code>文件：</p>
<p>找到以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>默认分支是<code>master</code></p>
<p>在博客根目录下打开<code>Git Bash</code>，安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p>
<p>打开你的<code>博客根目录\source\_posts</code>，会发现多了一个文件夹和一个markdown文件。文件夹用于存放图片等数据。</p>
<p>写完markdown文件后，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g                   <span class="comment">#生成静态网页</span></span><br><span class="line">hexo s                   <span class="comment">#本地预览效果</span></span><br><span class="line">hexo d                   <span class="comment">#把网页推送到GitHub</span></span><br></pre></td></tr></table></figure>
<p>此时打开你的<code>github.io</code>主页就可以看到发布的文章了。</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析第一章作业</title>
    <url>/p/Chapter-01-of-Numerical-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《数值分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，数值分析</p>
<a id="more"></a>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013093358782.png" alt="image-20201013093358782" /><figcaption>image-20201013093358782</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013102937713.png" alt="image-20201013102937713" /><figcaption>image-20201013102937713</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013104909315.png" alt="image-20201013104909315" /><figcaption>image-20201013104909315</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013104922645.png" alt="image-20201013104922645" /><figcaption>image-20201013104922645</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013104953613.png" alt="image-20201013104953613" /><figcaption>image-20201013104953613</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201013110136891.png" alt="image-20201013110136891" /><figcaption>image-20201013110136891</figcaption>
</figure>
<p><img src="https://ftp.fly97.cn/image/image-20201013110806596.png" alt="image-20201013110806596" /> <span class="math display">\[
2^{256}=2^{16} \times 2^{16}=[(2^{4})^{2}]^{2}
\]</span></p>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念01</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-01/</url>
    <content><![CDATA[<p>为了理解深度学习，先了解一下机器学习的基本术语。</p>
<a id="more"></a>
<h4 id="引言">引言</h4>
<p>机器学习的经典定义：<strong>利用经验改善系统自身的性能。</strong></p>
<p>机器学习所研究的主要内容，是关于在计算机上从数据中产生的模型的算法，即学习算法。有了学习算法，我们把经验数据提供给它，它就能基于这些数据产生模型。在面对新的情况时，模型会给我们相应的判断。</p>
<blockquote>
<p>【Mitchell,1997】给出了一个更形式化的定义：假设用<em>P</em>来评估计算机程序在某任务类<em>T</em>上的性能，若一个程序通过利用经验<em>E</em>在<em>T</em>中任务上获得了性能改善，则我们就说关于<em>T</em>和<em>P</em>，该程序对<em>E</em>进行了学习。</p>
</blockquote>
<p>模型：泛指从数据中学到的结果。有文献用"模型"指全局性结果(例如一颗决策树)，而用"模式"指局部性结果(例如一条规则).</p>
<h4 id="基本术语">基本术语</h4>
<p>要进行机器学习，首先要有数据。假定收集了一批关于西瓜的数据，例如（色泽=青绿；根蒂=蜷缩；敲声=浊响），（色泽=乌黑；根蒂=稍蜷；敲声=沉闷），（色泽=浅白；根蒂=硬挺；敲声=清脆），······，每对括号内是一条记录，"="的意思是"取值为".</p>
<p>记录数据的集合称为一个<strong>"数据集"(data set)</strong>，其中每条记录是关于一个事件和对象的叙述，称为一个<strong>"示例"（instance)或"样本"（sample）</strong>。</p>
<p>反应事件或对象在某方面的表现或者性质的事项，例如"色泽"，"根蒂"，"敲声"，称为<strong>"属性"（attribute)或"特征"（feature）</strong>。</p>
<p>属性上的取值，例如"青绿"，"乌黑"，称为<strong>"属性值"（attribute value）</strong>。属性张成的空间称为<strong>"属性空间"（attribute space）、"样本空间"（sample space）或"输入空间"</strong>。</p>
<p>例如，我们把"色泽"、"根蒂"和"敲声"作为三个坐标轴，则他们张成的一个用于描述西瓜的三维空间，每个西瓜都可在这个空间找到他们自己的坐标位置。由于空间中的每个点对应一个坐标向量，因此也把一个示例称为一个<strong>"特征向量"（feature vector）</strong>。</p>
<p>​ 一般地，令$ D=\{x_1,x_2,...,x_m\} <span class="math inline">\(表示包含\)</span>m<span class="math inline">\(个实例的数据集，每个实例由\)</span>d<span class="math inline">\(个属性描述(例如上面的西瓜数据使用了3个属性)，则每个实例\)</span>x_i=\{x_{i1},x_{i2},...,x_{id}\}<span class="math inline">\(是\)</span>d$维样本空间 <span class="math inline">\(\chi\)</span> 中一个向量，<span class="math inline">\(x_i \in \chi\)</span>，其中<span class="math inline">\(x\_{ij}\)</span>是第<span class="math inline">\(j\)</span>个属性上的取值(例如上述第3个西瓜在第二个属性上的属性是"硬挺")，<span class="math inline">\(d\)</span>称为样本<span class="math inline">\(x_i\)</span>的<strong>"维数"(dimensionality)</strong>.</p>
<p>​ 从数据中学得模型的过程称为<strong>"学习"（learning）</strong>或者<strong>"训练"（training）</strong>，这个过程通过执行某个学习算法来完成。训练过程使用的数据称为<strong>"训练数据"（training data）</strong>，其中每个样本称为一个<strong>"训练样本"（training sample)</strong>，训练样本组成的集合称为<strong>"训练集"（training set）</strong>。学得模型对应了关于数据的某种潜在的规律，因此亦称<strong>"假设"（hypothesis）</strong>；这种潜在规律本身，则称为<strong>"真相"或"真实"(ground-truth)</strong>，学习过程就是为了找出或逼近真相。</p>
<blockquote>
<p>训练样本亦称为"训练示例"（training instance）或者"训练例"。</p>
<p>学习算法通常由参数需要设置，使用不同的参数值和(或)训练数据，将产生不同的结果。</p>
<p>有时将模型称为"学习器"（learner)，可看作学习算法在给定数据和参数空间上的实例化。</p>
</blockquote>
<p>​ 如果希望学得一个能够判断没剖开的是不是"好瓜"的模型，仅有前面的示例数据显然是不够的，要建立这样的关于<strong>"预测"（prediction）</strong>的模型，需要获得训练样本的"结果"信息，例如"((色泽=青绿；根蒂=蜷缩；敲声=浊响)，好瓜)"。这里关于实例结果的信息，例如"好瓜"，称为<strong>"标记"（label）</strong>；拥有了标记信息的示例，则成为<strong>"样例"（example)</strong>。一般地，用<span class="math inline">\((x_i,y_i)\)</span>表示第<span class="math inline">\(i\)</span>个样例，其中<span class="math inline">\(y_i \in Y\)</span>是示例<span class="math inline">\(x_i\)</span>的标记，<span class="math inline">\(Y\)</span> 是所有标记的集合，亦称为<strong>"标记空间"(label space)或"输出空间"</strong>。</p>
<p>​ 若我们欲预测的是离散值，例如"好瓜"、"坏瓜"，此类任务被称为<strong>"分类"(classification)</strong>；若欲预测的是连续值，例如西瓜成熟度0.95，0.37，此类学习任务称为<strong>"回归"(regression)</strong>。对涉及两个类别的<strong>"二分类"(binary classification)</strong>任务，通常称其中一个类为<strong>"正类"(positive class)</strong>，另一个类称为<strong>"反类"(negative class)</strong>;涉及多个类别时，则成为<strong>"多分类"(multi-class classification)</strong>任务。一般地，预测任务是希望通过对训练集<span class="math inline">\(\{(x_1,y_1),(x_2,y_2),...,(x_m,y_m)\}\)</span>进行学习，建立一个从输入空间<span class="math inline">\(X\)</span>到输出空间<span class="math inline">\(Y\)</span>的映射<span class="math inline">\(f : X \to Y\)</span>。对于二分类任务，通常令<span class="math inline">\(Y=\\{-1,+1\\}\)</span>或<span class="math inline">\(\\{0,1\\}\)</span>；对多分类任务，<span class="math inline">\(|Y|&gt;2\)</span>；对于回归任务，<span class="math inline">\(Y=R\)</span>，<span class="math inline">\(R\)</span>为实数集。</p>
<p>​ 学得模型后，使用其进行预测的过程称为<strong>"测试"(testing)</strong>，被预测的样本称为<strong>"测试样本"(testing sample)</strong>。例如在学得<span class="math inline">\(f\)</span>后，对测试例<span class="math inline">\(x\)</span>可得到其预测标记<span class="math inline">\(y=f(x)\)</span>。</p>
<p>​ 还可以对西瓜做<strong>"聚类"(clustering)</strong>，即将训练集中的西瓜分成若干组，每组称为一个<strong>"簇"（cluster）</strong>；这些自动形成得簇可能对应一些潜在得概念划分，例如"浅色瓜"、"深色瓜"，甚至"本地瓜"、"外地瓜"。这样的学习过程有助于哦我们了解数据内在得规律，能为更深入地分析数据建立基础。需说明的是，在聚类分析中，"浅色瓜，本地瓜"这样得概念我们实现是不知道的，而且学习过程中使用的训练样本通常不拥有标记信息。</p>
<p>​ 根据训练数据是否拥有标记信息，学习任务可大致分为两大类：<strong>"监督学习"(supervised learning)</strong>和<strong>"无监督学习"(unsupervised learning)</strong>。分类和回归是监督学习的代表，而聚类是无监督学习的代表。</p>
<p>​ 需要注意的是，机器学习的目标是使学得的模型能很好地适用于"新样本"，而不是仅仅在训练样本上工作得很好；即便对聚类这样得无监督学习任务，我们也希望学得簇划分能适用于没在训练集中出现的样本。学得模型适用于新样本的能力，称为<strong>"泛化"(generalization)能力</strong>。具有强泛化能力的模型能够很好的适用于整个样本空间。尽管训练集通常只是样本空间的一个很小的采样，我们仍希望它能很好的反映出样本空间的特性，否则就很难再期望在训练集上学得的模型能在整个样本空间上都工作得很好。</p>
<blockquote>
<p>通常假设样本空间中全体样本服从一个未知<strong>"分布"(distribution)</strong><span class="math inline">\(\small D\)</span>，我们获得的每个样本都是<strong>"独立同分布"(independent and identically distributed，简称<span class="math inline">\(i.i.d\)</span>)</strong>。一般而言，训练样本越多，我们得到得关于<span class="math inline">\(D\)</span>的信息越多，这样就越有可能通过学习获得具有强泛化能力的模型。</p>
</blockquote>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念02</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-02/</url>
    <content><![CDATA[<p>机器学习中的假设空间。</p>
<a id="more"></a>
<h4 id="假设空间">假设空间</h4>
<p>​ <strong>归纳(induction)和演绎(deduction)</strong>是科学推理的两大基本手段。归纳是从特殊到一般的"泛化"(generalization)过程。即从具体的事实归结出一般性规律；演绎则是从一般到特殊的"特化"(specialization)过程，即从基础原理推演出具体状况。例如，在数学公理系统中，基于一组公理和推理规则推导出与之相恰的定理，这是演绎；而"从样例中学习"显然是一个归纳的过程，因此亦称为<strong>"归纳学习"(inductive learning)</strong></p>
<p>​ 归纳学习有狭义和广义之分，广义的归纳学习大体相当于从样例中学习，而狭义的归纳学习则要求从训练数据中学得概念(concept),因此亦称为<strong>"概念学习"或"概念形成"</strong>.概念学习技术目前应用、研究都比较少，因为要学得泛化性能好而且语义明确的概念实在是太难了，现实常用的技术大多数产生"黑箱"模型.然而，对概念学习有所理解，有助于理解机器学习的一些基础思想。</p>
<p>​ 概念学习中最基本的是<strong>布尔概念学习</strong>，即对"是""不是"这样的可表示为0/1布尔值的目标概念的学习.举一个简单的例子，假定我们获得了这样的一个训练数据集：</p>
<p><img src="https://ftp.fly97.cn/image/image-20200806202414852.png" alt="image-20200806202414852" style="zoom:50%;" /></p>
<p>​ 这里要学习的目标是"好瓜"，暂且假设"好瓜"可由"色泽""根蒂""敲声”这三个因素完全确定，换言之，只要某个瓜的三个属性取值明确了，我们就能判断出它是不是好瓜，于是，我们学到的将是"好瓜是某种色泽、某种根蒂、某种敲声的瓜"这样的概念，用布尔表达式写出来则是<strong>"好瓜$ $(色泽=?)<sup>(根蒂=?)</sup>(敲声=?)"</strong>，这里"?"表示尚未确定的取值，而我们的任务就是通过对上表的训练集进行学习，把"?"确定下来.</p>
<p>​ 读者可能马上发现，上表第一行：<strong>"(色泽=青绿)<sup>(根蒂=蜷缩)</sup>(敲声=浊响)"</strong>不就是好瓜吗？是的，但这是一个已见过的瓜，不要忘记学习的目的是<strong>"泛化"</strong>，即通过对训练集中的瓜的学习以获得对没见过瓜进行判断的能力.如果仅仅把训练集中的瓜"记住"，今后再见到一模一样的瓜当然可以判断，但是，对没见过的瓜，例如<strong>"(色泽=浅白)<sup>(根蒂=蜷缩)</sup>(敲声=浊响)"</strong>怎么办呢？</p>
<p>​ 我们可以把学习过程看作一个在<strong>所有假设组成的空间</strong>中进行搜索的过程，搜索目标是找到与训练集<strong>"匹配(fit)"</strong>的假设，即能够将训练集中的瓜判断正确的假设.假设的表示一旦确定，假设空间及其规模大小就确定了.这里我们的假设空间由形如<strong>"(色泽=?)<sup>(根蒂=?)</sup>(敲声=?)"</strong>的可能取值所形成的假设组成.例如色泽有"青绿""乌黑""浅白"这三种可能取值；还需考虑到，也许色泽无论取什么值都合适，我们用通配符"*"来表示，例如**"好瓜$ <span class="math inline">\((色泽=\*)^(根蒂=蜷缩)^(敲声=浊响)&quot;**，即&quot;好瓜是根蒂蜷缩、敲声浊响的瓜，什么色泽都行&quot;.此外，还需要考虑极端情况，有可能&quot;好瓜&quot;这个概念根本不成立，世界上没有&quot;好瓜&quot;这种东西，我们用\)</span> $表示这个假设。这样，若"色泽""根蒂""敲声"分别有3、2、2种可能取值，则我们面临的假设空间规模大小为<span class="math inline">\(4 \times 3 \times 3+1=37\)</span>.下图直观地显示了这个西瓜空间假设问题。</p>
<blockquote>
<p>这里我们假定训练样本不含噪声，而且不考虑"非青绿"这样的<span class="math inline">\(\not\subset A\)</span>操作，由于训练集包含正例，因此$ $假设自然不出现。</p>
</blockquote>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200806202019247.png" alt="image-20200806202019247" /><figcaption>image-20200806202019247</figcaption>
</figure>
<p>​ 可以有许多策略对这个假设空间进行搜索，例如自顶向下、从一般到特殊，或是自底向上、从特殊到一般，搜索过程种可以不断删除与正例不一致的假设和(或)与反例一致的假设.最终将会获得<strong>与训练集一致(即对所有训练样本能够进行正确判断)</strong>的假设，这就是我们学习的结果。</p>
<blockquote>
<p>有很多可能的选择，如在路径上自顶向下与自底向上同时进行，在操作上只删除与正例不一致的假设等。</p>
</blockquote>
<p>​ 需注意的是，现实问题种我们常面临很大的假设空间，但学习过程是基于有限样本训练集进行的，因此，可能有多个假设与训练集一致，即存在一个<strong>与训练集一致的"假设集合"</strong>，我们称之为<strong>"版本空间"(version space).</strong>例如，在西瓜问题中，与表1.1训练集所对应的版本空间如图1.2所示.</p>
<p><img src="https://ftp.fly97.cn/image/image-20200806203152041.png" alt="image-20200806203152041"  /></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基本概念03</title>
    <url>/p/Basic-Concepts-of-Machine-Learning-03/</url>
    <content><![CDATA[<p>机器学习中的归纳偏好。</p>
<a id="more"></a>
<h4 id="归纳偏好">归纳偏好</h4>
<p>通过学习得到的模型对应了假设空间的一个假设，于是，上文中的西瓜版本空间给我们带来了一个麻烦：现在有三个与训练集一致的假设，但与他们对应的模型在面临新样本的时候，却会产生不同的输出。例如，对色泽=青绿；根蒂=蜷缩；敲声=沉闷这个新收来的瓜，如果我们采用的是“好瓜《=》（色泽=*）^（敲声=*)”。那么会把新瓜判断为好瓜，而如果采用了另外两个假设，则判断的结果将不是好瓜，那么，应该采用哪一个模型（或假设）呢？</p>
<p>​ 若仅有上表中训练样本，则无法断定上述三个假设哪一个“更好”。然而，对于一个具体的学习算法而言，他必须要产生一个模型。这时，学习算法本身的“偏好”就会起到关键的作用。例如，若我们的算法喜欢尽可能特殊的模型，则他会选择“好瓜《=》（色泽=*）<sup>（根蒂=蜷缩）</sup>(敲声=浊响)”；但若我们的算法喜欢“尽可能一般”的模型，并且由于某种原因它更相信“根蒂”，则它会选择“好瓜《=》（色泽=*）<sup>（根蒂=蜷缩）</sup>(敲声=*)”，机器学习算法在学习过程中对某种类型假设的偏好，称为“归纳偏好”(inductive bias)，或称为“偏好”。</p>
<blockquote>
<p>尽可能特殊即“适用情况尽可能少”；尽可能一般即“使用情况尽可能多”。</p>
<p>对“根蒂”还是对“敲声”更重视，看起来和属性选择，亦称为“特征选择”(feature selection)有关，但需注意的是，机器学习中的特征选择仍是基于对训练样本的模型的分析进行的，而在此处我们并非基于特征选择做出对根蒂的重视；这里对“根蒂”的信赖可视为基于某种领域的知识而产生的归纳偏好关于特征选择方面的内容可以参加后续的更新。</p>
</blockquote>
<p>任何一个有效的机器学习算法未必有其归纳偏好，否则它将被假设空间中看似在训练集上“等效”的假设所迷惑，而无法产生确定的学习结果。可以想象，如果没有偏好，我们的西瓜学习算法产生的模型每次在进行预测时随机抽选训练集上的等效假设，那么对这个新瓜--------------学得模型时而告诉我们他是好的，时而告诉我们他是不好的，这样的学习结果显然没有意义。</p>
<p>归纳偏好的作用在图1.3这个回归学习图示中可能更直观，这里的每个训练样本是图中的一个点(x,y)，要学得一个与训练集一致的模型，相当于找到一条穿过所有训练样本点的曲线。显然，对有限个样本点组成的训练集，存在着很多条曲线与其一致，我们的学习算法必须有某种偏好，才能产出它认为"正确"的模型。例如，若认为相似的样本应有相似的输出(例如，在各种属性上都很像的西瓜，成熟程度应该比较接近)，则对应的学习算法可能偏好图1.3中比较“平滑”的曲线<span class="math inline">\(A\)</span>而不是比较“崎岖”的曲线<span class="math inline">\(B\)</span>.</p>
<p>归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或"价值观".那么，有没有一般性的原则来引导算法确立“正确的”偏好呢？<strong>“奥卡姆剃刀”（Occam's razor)</strong>是一种常用的、自然科学研究中最基本的原则，即<strong>“若有若干个假设与观察一致，则选最简单的那个”</strong>.如果采用这个原则，并且假设我们认为“更平滑”意味着“更简单”(例如曲线A更容易描述，其方程式是<span class="math inline">\(y = -x_2+6x+1\)</span>，而曲线<span class="math inline">\(B\)</span>则要复杂得多)，则在图1.3中我们会自然地偏好“平滑”的曲线<span class="math inline">\(A\)</span>.</p>
<p>然而，奥卡姆剃刀并非唯一可行的原则，退一步说，即便假定我们是奥卡姆剃刀的铁杆拥簇，也需注意到，奥卡姆剃刀本身存在不同的诠释，使用奥卡姆剃刀原则并不平凡。例如对我们已经很熟悉的西瓜问题来说，“假设1：好瓜&lt;-&gt;(色泽=*)<sup>(根蒂=蜷缩)</sup>(敲声=浊响)”和“假设2：好瓜&lt;-&gt;(色泽=*)<sup>(根蒂=蜷缩)</sup>(敲声=*)”这两个假设，哪一个更“简单”呢？这个问题并不简单，需要借助其他机制才能解决.</p>
<p>事实上，归纳偏好对应了学习算法本身所作出的关于"什么样的模型更好"的假设.在具体的实现问题中，这个假设是否成立，即算法的归纳偏好是否与问题匹配，大多数时候直接决定了算法能否取得好的性能.</p>
<p>继续回头看图1.3，假设学习算法<span class="math inline">\(\mathcal{L}\)</span></p>
<p><strong>未完待续.....</strong></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>杭州旅游攻略</title>
    <url>/p/Travel-in-Hangzhou/</url>
    <content><![CDATA[<p>学在杭州，玩在杭州！</p>
<a id="more"></a>
<h3 id="延安路商业街">延安路商业街</h3>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131092627579.png" alt="image-20210131092627579" /><figcaption>image-20210131092627579</figcaption>
</figure>
<h3 id="延安路到法喜寺">延安路到法喜寺</h3>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131093545985.png" alt="image-20210131093545985" /><figcaption>image-20210131093545985</figcaption>
</figure>
<p>法喜寺</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131092418794.png" alt="image-20210131092418794" /><figcaption>image-20210131092418794</figcaption>
</figure>
<h3 id="延安路到河坊街">延安路到河坊街</h3>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131093828915.png" alt="image-20210131093828915" /><figcaption>image-20210131093828915</figcaption>
</figure>
<p>河坊街</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131092531902.png" alt="image-20210131092531902" /><figcaption>image-20210131092531902</figcaption>
</figure>
<h3 id="延安路到北高峰">延安路到北高峰</h3>
<p><img src="https://ftp.fly97.cn/image/image-20210131093705860.png" /></p>
<p>延安路</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131092737922.png" alt="image-20210131092737922" /><figcaption>image-20210131092737922</figcaption>
</figure>
<h3 id="西湖龙井">西湖龙井</h3>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131094030362.png" alt="image-20210131094030362" /><figcaption>image-20210131094030362</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210131092947998.png" alt="image-20210131092947998" /><figcaption>image-20210131092947998</figcaption>
</figure>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>Hangzhou</tag>
      </tags>
  </entry>
  <entry>
    <title>梯度下降法</title>
    <url>/p/What&#39;s-the-Gradient-descent/</url>
    <content><![CDATA[<p><strong>摘要：</strong>梯度下降法，是当今最流行的最优化（optimization）算法，亦是至今最常用的最优化神经网络的方法。与此同时，最新的深度学习程序库都包含了各种优化梯度下降的算法（可以参见如 Pytorch 程序库的说明文档）。但他们的算法则不被公开，都作为黑箱优化器被使用，这也就是为什么它们的优势和劣势往往难以被实际地解释。</p>
<p><strong>关键词：</strong>Deep Learning</p>
<a id="more"></a>
<h3 id="核心">核心</h3>
<p>梯度下降法的核心，是最小化目标函数。方法是在每一次迭代中，对每个变量，按照目标函数在该变量梯度的相反方向，更新对应的参数值，其中，学习率决定了函数到达局部最小值的迭代次数。<strong>我们在目标函数的超平面上，沿着斜率下降的方向前进，直到我们遇到了超平面构成的"谷底"。</strong></p>
<h3 id="梯度下降法的变体">梯度下降法的变体</h3>
<p>梯度下降法有三种变体，它们的区别在于用多少数据来计算目标函数的梯度。根据数据量的不同，我们需要权衡参数更新的准确性和执行一次所需要的时间。</p>
<h4 id="batch-gradient-descent-批量梯度下降">Batch gradient descent 批量梯度下降</h4>
<p>批量梯度下降又称<strong>Vanilla梯度下降法</strong>，也就是所谓的批量梯度下降法，在整个数据集上对每个参数求目标函数的偏导数。 <span class="math display">\[
\theta=\theta-\eta{\nabla_\theta}J(\theta)
\]</span> 翻译成白话文就是：用整个训练集计算目标函数的梯度参数。</p>
<p>由于我们需要计算整个数据集的梯度来执行一次更新，因此批量梯度下降可能非常缓慢。而且需要把数据集放入内存。批量梯度下降也不允许我们在线更新我们的的模型。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">    params = params - lr * params_grad</span><br></pre></td></tr></table></figure>
<p>对于预先定义的多个epoch，我们首先计算关于整个数据集的损失函数的梯度向量<code>param_grad</code>.当前的一些深度学习库提供了自动求导的函数，可以有效的计算一些参数梯度。</p>
<p>按照梯度的反方向更新参数，学习速率决定我们执行的更新的大小。保证了批梯度下降收敛于凸误差曲面的全局最小值和非凸曲面的全局最小值。</p>
<h4 id="stochastic-gradient-descent-随机梯度下降">Stochastic gradient descent 随机梯度下降</h4>
<p>相比之下，随机梯度下降(SGD)对每个训练示例和标号进行参数更新： <span class="math display">\[
\theta=\theta-\eta{\nabla_\theta}J(\theta;x^{(i)};y^{(i)})
\]</span> 批量梯度下降对大数据集会有一些冗余计算，因此它在每次参数更新前重新计算类似的梯度。</p>
<p><strong>随机梯度下降</strong>会以一个较大的方差执行频繁的更新，导致目标函数剧烈波动，如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/sgd_fluctuation.png" /></p>
<p>当批量梯度下降法收敛到参数的盆地时，SGD的波动一方面会使其跳跃到新的、可能的更好的局部极小值。另一方面，这最终会使让收敛到特定最小值的过程复杂化，因为该方法可能持续的波动而不停止。但是，当我们慢慢降低学习率时，SGD表现出了与批量梯度下降法相似的收敛过程，也就是说，对非凸函数和凸函数，必然会分别收敛到他们的极小值和最小值。</p>
<p>相比批量梯度下降法的代码，在如下的代码中，我们仅仅加入了一个循环，用以遍历所以的训练样本并求出相应的梯度值。值得注意的是，我们在每个阶段都要重新打乱训练数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">        params = params - lr * params_grad</span><br></pre></td></tr></table></figure>
<h4 id="mini-batch-gradient-descent-小批量梯度下降">Mini-batch gradient descent 小批量梯度下降</h4>
<p>小批量梯度下降具有以上两者的优点。在每次更新中，对<code>n</code>个样本构成的一批数据，计算损失函数，并对相应的参数求导： <span class="math display">\[
\theta=\theta-\eta{\nabla_\theta}J(\theta;x^{(i:i+n)};y^{(i:i+n)})
\]</span> 这种方法，1. 降低了参数更新的方差，使得收敛过程更加稳定；</p>
<pre><code>              2. ​  能够利用最新的深度学习程序库中高度优化的矩阵运算器，能够高效的求出每小批数据的梯度。通常一小批数据含有的样本数量在50至256之间，但对于不同的用途也会有所变化。例如，当你的显存不够时，就把`batch_size`调小。</code></pre>
<p>小批量梯度下降法，通常是我们训练神经网络的首选算法。同时，有时候我们也会使用<strong>随机梯度下降法</strong>，来称呼<strong>小批量梯度下降法</strong>。</p>
<p>在代码中，不再迭代每个示例，而是迭代大小为50的小批量样本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, batch, params) / batch_size</span><br><span class="line">        params = params - lr * params_grad</span><br></pre></td></tr></table></figure>
<h3 id="sgd的缺点">SGD的缺点</h3>
<p>然而，小批量梯度下降法并不能保证良好地收敛，仍然存在一些问题。</p>
<p>1.选择一个适当的学习率是一个难题太小的学习率会导致较慢的收敛速度，而太大的学习率则会阻碍收敛，并会引起损失函数在最小值处波动，甚至发散。 2. 学习率计划表(learning_rate_schedule)试图在训练过程中调整学习率，例如退火，即很具预先定义的计划表减少学习率，或当各时期之间的目标变换低于阈值时。但是，这些调度和阈值必须提前定义，因此无法适应数据集的特征。 3. 此外，我们对所有的参数都采用了相同的学习率。但如果我们的数据是稀疏的，同时特征有着不同的出现频率，那么我们不希望以相同的学习率来更新这些变量，我们希望对较少出现的特征有更大的学习率。 4. 会无数次的陷入最小值或<strong>鞍点</strong>。鞍点是在一个方向上斜率是正的、在一个方向上斜率是负的点。鞍点周围各个方向的梯度值都为0，所以<strong>SGD</strong>很难从这些鞍点中脱开。</p>
]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习常见损失函数</title>
    <url>/p/common-loss-functions-for-deep-learning/</url>
    <content><![CDATA[<p>我们所说的优化，即优化网络权值使得损失函数值变小。但是，损失函数值变小是否能代表模型的分类/回归精度变高呢？那么多种损失函数，应该如何选择呢？</p>
<a id="more"></a>
<h4 id="l1范数损失-l1loss">L1范数损失 L1Loss</h4>
<p>功能： 计算 output 和 target 之差的绝对值，可选返回同维度的tensor或者是一个标量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="均方损失误差-mesloss">均方损失误差 MESLoss</h4>
<p>功能： 计算 output 和 target 之差的平方，可选返回同维度的tensor或者是一个标量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="交叉熵损失-crossentropyloss">交叉熵损失 CrossEntropyLoss</h4>
<p>功能： 将输入经过 softmax 激活函数之后，再计算其与 target 的交叉熵损失。即该方法将 nn.LogSoftmax() 和 nn.NLLLoss() 进行了结合。严格意义上的交叉熵损失函数应该是 nn.NLLLoss()。</p>
<p>当训练有 C 个类别的分类问题时很有效，可选参数<code>weight</code>必须是一个1维<code>Tensor</code>，权重将被分配给各个类别。对于不平衡的训练集非常有效。</p>
<p>在多分类任务中，经常采用 softmax 激活函数+交叉熵损失函数。因为交叉熵描述了两个<strong>概率分布</strong>的差异，然而神经网络输出的是向量，并不是概率分布的形式。所以需要 softmax 激活函数将一个向量进行“归一化”成概率分布的形式，再采用交叉熵损失函数计算 loss. <span class="math display">\[
loss(x,class)=weight[class]\left(-x[class]+log \left(\sum_{j}^{}exp(x[  j])\right)\right)
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.CrossEntropyLoss(weight=<span class="literal">None</span>,ignore_index=<span class="number">-100</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个类别的权重. 必须是一个长度为 C 的 Tensor</p>
<p>ignore_index (int, optional) – 设置一个目标值, 该目标值会被忽略, 从而不会影响到 输入的梯度。</p>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<h4 id="kl散度损失-kldivloss">KL散度损失 KLDivLoss</h4>
<p>功能：计算 input 和 target 之间的 KL 散度。KL散度可用于衡量不同的连续分布之间的距离，在连续的输出分布的空间上(离散采样)上进行直接回归时<strong>很有效</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.KLDivLoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>reduction-三个值，none: 不使用约简；mean:返回loss和的平均值；sum:返回loss的和。默认：mean。</p>
</blockquote>
<blockquote>
<p>补充：KL散度 KL散度( Kullback–Leibler divergence) 又称为相对熵(Relative Entropy)，用于描述两个概率分布之间的差异。计算公式(离散时)：</p>
<p>其中p表示真实分布，q表示p的拟合分布， D(P||Q)表示当用概率分布q来拟合真实分布p时，产生的信息损耗。这里的信息损耗，可以理解为损失，损失越低，拟合分布q越接近真实分布p。同时也可以从另外一个角度上观察这个公式，即计算的是 p 与 q 之间的对数差在 p 上的期望值。 特别注意，D(p||q) ≠ D(q||p)， 其不具有对称性，因此不能称为K-L距离。</p>
<p><strong>信息熵 = 交叉熵 - 相对熵</strong> 从信息论角度观察三者，其关系为信息熵 = 交叉熵 - 相对熵。在机器学习中，当训练数据固定，最小化相对熵 D(p||q) 等价于最小化交叉熵 H(p,q) 。</p>
</blockquote>
<p>使用注意事项： 要想获得真正的KL散度，需要如下操作：</p>
<ol type="1">
<li><p>reduce = True ；size_average=False</p></li>
<li><p>计算得到的 loss 要对 batch 进行求平均</p></li>
</ol>
<h4 id="二进制交叉熵损失-bceloss">二进制交叉熵损失 BCELoss</h4>
<p>功能： 二分类任务时的交叉熵计算函数。此函数可以认为是nn.CrossEntropyLoss函数的特例。其分类限定为二分类，y必须是{0,1}。还需要注意的是，input应该为概率分布的形式，这样才符合交叉熵的应用。所以在BCELoss之前，input一般为sigmoid激活层的输出。该损失函数在自编码器中常用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.BCELoss(weight=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个 batch 元素的 loss 的权重. 必须是一个长度为 “nbatch” 的 的 Tensor</p>
</blockquote>
<h4 id="bcewithlogitsloss">BCEWithLogitsLoss</h4>
<p>功能： 将Sigmoid与BCELoss结合，类似于CrossEntropyLoss(将nn.LogSoftmax()和 nn.NLLLoss()进行结合）。即input会经过Sigmoid激活函数，将input变成概率分布的形式。 计算公式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.BCEWithLogitsLoss(weight=<span class="literal">None</span>, reduction=<span class="string">&#x27;mean&#x27;</span>, pos_weight=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<blockquote>
<p>weight (Tensor, optional) – 自定义的每个 batch 元素的 loss 的权重. 必须是一个长度 为 “nbatch” 的 Tensor</p>
</blockquote>
<h4 id="marginrankingloss">MarginRankingLoss</h4>
<p>功能： 计算两个向量之间的相似度，当两个向量之间的距离大于margin，则loss为正，小于margin，loss为0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.MarginRankingLoss(margin=<span class="number">0.0</span>, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>对于 mini-batch (小批量) 中每个实例的损失函数如下： <span class="math display">\[
loss(x,y)=max(0,-y*(x1-x2)+margin)
\]</span> 参数：</p>
<blockquote>
<p>margin：默认值是0</p>
</blockquote>
<h4 id="hingeembeddingloss">HingeEmbeddingLoss</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.nn.HingeEmbeddingLoss(margin=<span class="number">1.0</span>,  reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>功能： 未知。主要用于衡量两个输入是否相似。 used for learning nonlinear embeddings or semi-supervised 。</p>
<p>转载自：https://zhuanlan.zhihu.com/p/61379965</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>现代信号分析第二章作业</title>
    <url>/p/Chapter-01-of-Modern-Signal-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，现代信号分析</p>
<a id="more"></a>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200928193703316.png" alt="image-20200928193703316" /><figcaption>image-20200928193703316</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203228683.png" alt="image-20201011203228683" /><figcaption>image-20201011203228683</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203330808.png" alt="image-20201011203330808" /><figcaption>image-20201011203330808</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200928193714036.png" alt="image-20200928193714036" /><figcaption>image-20200928193714036</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203626045.png" alt="image-20201011203626045" /><figcaption>image-20201011203626045</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203639917.png" alt="image-20201011203639917" /><figcaption>image-20201011203639917</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203658032.png" alt="image-20201011203658032" /><figcaption>image-20201011203658032</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203716172.png" alt="image-20201011203716172" /><figcaption>image-20201011203716172</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203748238.png" alt="image-20201011203748238" /><figcaption>image-20201011203748238</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203823320.png" alt="image-20201011203823320" /><figcaption>image-20201011203823320</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203917101.png" alt="image-20201011203917101" /><figcaption>image-20201011203917101</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011203848593.png" alt="image-20201011203848593" /><figcaption>image-20201011203848593</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200928193737091.png" alt="image-20200928193737091" /><figcaption>image-20200928193737091</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204004991.png" alt="image-20201011204004991" /><figcaption>image-20201011204004991</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204054961.png" alt="image-20201011204054961" /><figcaption>image-20201011204054961</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204157647.png" alt="image-20201011204157647" /><figcaption>image-20201011204157647</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200928193754540.png" alt="image-20200928193754540" /><figcaption>image-20200928193754540</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204330872.png" alt="image-20201011204330872" /><figcaption>image-20201011204330872</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204359072.png" alt="image-20201011204359072" /><figcaption>image-20201011204359072</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201011204438075.png" alt="image-20201011204438075" /><figcaption>image-20201011204438075</figcaption>
</figure>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>现代信号分析第四章作业</title>
    <url>/p/Chapter-02-of-Modern-Signal-Analysis/</url>
    <content><![CDATA[<p><strong>摘要：</strong>此系列文章是我从2020年9月21日开始在浙江理工大学读研一时《现代信号分析》课后作业练习题及答案。</p>
<p><strong>关键词：</strong>研一，现代信号分析</p>
<a id="more"></a>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012134854422.png" alt="image-20201012134854422" /><figcaption>image-20201012134854422</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012135051489.png" alt="image-20201012135051489" /><figcaption>image-20201012135051489</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012135105822.png" alt="image-20201012135105822" /><figcaption>image-20201012135105822</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012135149144.png" alt="image-20201012135149144" /><figcaption>image-20201012135149144</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012140126858.png" alt="image-20201012140126858" /><figcaption>image-20201012140126858</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012140338034.png" alt="image-20201012140338034" /><figcaption>image-20201012140338034</figcaption>
</figure>
<figure>
<img src="https://ftp.fly97.cn/image/image-20201012141112290.png" alt="image-20201012141112290" /><figcaption>image-20201012141112290</figcaption>
</figure>
]]></content>
      <tags>
        <tag>研一</tag>
        <tag>现代信号分析</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Python</title>
    <url>/p/how-to-use-python-abstractmethod/</url>
    <content><![CDATA[<p>聊聊Python的装饰器</p>
<a id="more"></a>
<p>谈装饰器之前，首先要明白一件事，Python中的函数和Java，C++不太一样，Python中的函数可以通过普通变量一样当作参数传入另一个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">func</span>):</span></span><br><span class="line">	func()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	bar(foo)</span><br></pre></td></tr></table></figure>
<p>装饰器本质上是一个Pythob函数或者类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。他经常用于有切面需求的场景，比如：插入日志，性能测试，事务处理，缓存，权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器继续重用。</p>
<p>一句话，<strong>装饰器就是为已经存在的对象添加额外的功能</strong>。</p>
<p>一个简单例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>现在有一个新需求，希望可以记录下函数的执行日志，于是在函数中添加日志代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br><span class="line">	logging.info(<span class="string">&quot;foo is runing&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>如果函数bar()，bar()也有类似的需求，怎么做？再写一个logging日志在bar函数里？这样就造成了大量雷同代码，为了减少业务量，我们需要重新定义一个新的函数，专门处理日志，日志处理完再执行真正的业务代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">	logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">	func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;i am foo&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    use_logging(foo)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>abstractmethod</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归中的基函数</title>
    <url>/p/a-basis-function-in-linear-regression/</url>
    <content><![CDATA[<p><strong>摘要：</strong>最近再看<a href="https://www.zhihu.com/people/xpqiu">邱锡鹏</a>老师的《神经网络与深度学习》，学习过程中难免遇到问题。谨以此文作为记录，希望自己能坚持下去吧。</p>
<p><strong>关键词：</strong>线性回归，基函数</p>
<a id="more"></a>
<h4 id="线性基函数模型">线性基函数模型</h4>
<p>最简单的回归线性模型是输入变量的线性组合： <span class="math display">\[
y(x,w) = w_0 + w_1x_1+ ... + w_Dx_D \tag{3.1}
\]</span> 其中 <span class="math display">\[
x = (x_1,...,x_D)^T
\]</span> 这通常被叫做简单的线性回归。这个模型的关键属性是它是一个参数<span class="math inline">\(w_0,...,w_D\)</span>的一个线性函数，同时，它也是输入变量<span class="math inline">\(x_i\)</span>的一个线性函数，这给模型带来了<strong>极大的局限性</strong>。因此，我们将输入变量确定了的非线性函数进行线性组合来拓模型的类别： <span class="math display">\[
y(x,w) = w_0 + \sum\limits_{j=1}^{M-1}w_j\phi_j(x) \tag{3.2}
\]</span> 其中<span class="math inline">\(\phi_j(x)\)</span>被称为基函数。通过把下标<span class="math inline">\(j\)</span>的最大值记作<span class="math inline">\(M-1\)</span>，使得这个模型的参数总数为<span class="math inline">\(M\)</span>.</p>
<p>参数<span class="math inline">\(w_0\)</span>使得数据中可以存在任意的固定偏移，通常被称为偏置参数。这里请不要和统计观念下的偏置搞混淆。通常，定义一个额外的占位基函数是很方便的，以便把函数简化为： <span class="math display">\[
y(x,w) = \sum\limits_{j=0}^{M-1}w_j\phi_j(x) = w^T\phi(x) \tag{3.3}
\]</span> 其中<span class="math inline">\(w = (w_0,...,w_{M-1})^T , \phi = (\phi_0,...,\phi_{M-1})^T\)</span>。在很多模型识别的应用中，会在原始数据上应用固定形式的预处理或特征抽取。如果原始变量组成向量<span class="math inline">\(x\)</span>，那么特征可以表示为基函数<span class="math inline">\(\{\phi_j(x)\}\)</span>的项。</p>
<p>通过使用非线性的基函数，我们允许函数<span class="math inline">\(y(x,w)\)</span>是关于输入向量<span class="math inline">\(x\)</span>的非线性函数。由于式(3.2)是关于<span class="math inline">\(w\)</span>的线性函数，所以他被称为<font size="3" color="red">线性模型。</font>这种参数的线性性质极大地简化了这类模型的分析。不过，这也造成了一定的局限性。</p>
<p><font size="3" color="red">多项式拟合</font>也被称作多项式基函数是这类模型的一个特例，他有单个输入变量<span class="math inline">\(x\)</span>，基函数是<span class="math inline">\(x\)</span>的幂函数的形式，即<span class="math inline">\(\phi_j(x) = x^j\)</span>。多项式基函数的局限性是他们是输入变量的<strong>全局函数</strong>，所以一个区间内改变会影响所有区域。解决的办法是把输入空间切分成若干个区域，然后对于每个区域用不同的多项式函数拟合，这样的函数被称为<strong>样条函数</strong>。还有很多其他基函数的选择，如： <span class="math display">\[
\phi_j(x) = exp\left\{-\frac{(x-\mu_j)^2}{2s^2}\right\} \tag{3.4}
\]</span> 其中，<span class="math inline">\(\mu_j\)</span>控制着基函数在输入空间中的位置，参数<span class="math inline">\(s\)</span>控制着基函数的空间大小。这些通常被称为<font size="3" color="red">高斯基函数</font>。由于这些基函数会有一个调节参数<span class="math inline">\(w_j\)</span>相乘，所以标准化系数是不重要的。</p>
<h4 id="代码部分">代码部分</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multinomial_basis</span>(<span class="params">x, feature_num=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;多项式基函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">1</span>) <span class="comment"># shape(N, 1)</span></span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    feat = [x]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, feature_num+<span class="number">1</span>):</span><br><span class="line">        feat.append(x**i)</span><br><span class="line">    ret = np.concatenate(feat, axis = <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<p>输入<span class="math inline">\(x\)</span>是<code>numpy</code>的一维数组，使用 <code>np.expand_dims()</code> 函数将其扩展成大小为<code>(N，1)</code>向量。随后将矩阵包装到一个<code>list</code>里。然后将<span class="math inline">\(X^i\)</span>加入到<code>list</code>最后，循环10次，最后的得到的矩阵<strong>ret</strong>如下： <span class="math display">\[
\begin{pmatrix} x^1 &amp; x^2 &amp; x^3 &amp; ... &amp;x^{10}  \\ \end{pmatrix}
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_basis</span>(<span class="params">x, feature_num=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;高斯基函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    centers = np.linspace(<span class="number">0</span>, <span class="number">25</span>, feature_num)</span><br><span class="line">    width = <span class="number">1.0</span> * (centers[<span class="number">1</span>] - centers[<span class="number">0</span>])</span><br><span class="line">    x = np.expand_dims(x, axis = <span class="number">1</span>) <span class="comment"># shape(N, 1)</span></span><br><span class="line">    x = np.concatenate([x]*feature_num, axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    out = (x-centers)/width</span><br><span class="line">    ret = np.exp(<span class="number">-0.5</span> * out ** <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#==========</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<p>首先确定高斯基函数的中心：在粗略估计了数据集的范围之后，在该范围内等分出若干点，点的数量由<code>feature_num</code>确定。等分的宽度记作<code>width</code>，然后将输入扩展成<code>(N，1)</code>向量，<code>[x]*feature_num</code>将扩展后的<code>(N，1)</code>向量先包装到一个<code>list</code>里，随后复制<code>feature_num</code>次。<code>np.concatenate()</code>将复制的若干个<code>list</code>按列堆叠起来，得到的<span class="math inline">\(x\)</span>的矩阵如下： <span class="math display">\[
\begin{pmatrix} x &amp; x &amp; x &amp; ... &amp;x  \\ \end{pmatrix}
\]</span> <code>centers</code>是一维数组，<code>x</code>是二维的矩阵。两个维度不同的numpy对象在做加减运算时，自动执行<font size="3" color="red">广播规则</font>。</p>
<h5 id="python中的广播规则">python中的广播规则</h5>
<p>举个例子：</p>
<p>假设<code>x</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[0, 0, 0, 0, 0],</span><br><span class="line">        [1, 1, 1, 1, 1],</span><br><span class="line">        [2, 2, 2, 2, 2],</span><br><span class="line">        [3, 3, 3, 3, 3],</span><br><span class="line">        [4, 4, 4, 4, 4]]</span><br></pre></td></tr></table></figure>
<p><code>centers</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([ 0.  ,  6.25, 12.5 , 18.75, 25.  ])</span><br></pre></td></tr></table></figure>
<p>在做<code>x-centers</code>运算时，首先要将<code>centers</code><strong>按行拓展</strong>到和<code>x</code>一样的维度，拓展后的<code>centers</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ],</span><br><span class="line">       [ 0.  ,  6.25, 12.5 , 18.75, 25.  ]]))</span><br></pre></td></tr></table></figure>
<p>扩展后的两个矩阵大小相等，这样就可以做加减法了。</p>
<p>最后，<code>out</code>等于<code>(x-centers)/width</code>，最后带入公式<span class="math inline">\((3.4)\)</span>，求得高斯基函数的输出。</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>记MT7621平台刷入OpenWRT</title>
    <url>/p/how-to-config-OpenWRT/</url>
    <content><![CDATA[<p>什么是OpenWRT？</p>
<a id="more"></a>
<hr />
<h3 id="安装luci相关">安装luci相关</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg install luci luci-base luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure>
<h3 id="开启sftp">开启sftp</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install vsftpd openssh-sftp-server</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vsftpd enable</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vsftpd start</span><br></pre></td></tr></table></figure>
<h3 id="opkg-腾讯源">opkg 腾讯源</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;opkg&#x2F;distfeeds.conf</span><br></pre></td></tr></table></figure>
<p>写入以下文字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;gz openwrt_core https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;targets&#x2F;ramips&#x2F;mt7621&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_base https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;base</span><br><span class="line">src&#x2F;gz openwrt_packages  https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_luci https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;luci</span><br><span class="line">src&#x2F;gz openwrt_routing https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;routing</span><br><span class="line">src&#x2F;gz openwrt_freifunk https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;freifunk</span><br><span class="line">src&#x2F;gz openwrt_telephony https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;openwrt&#x2F;releases&#x2F;19.07.2&#x2F;packages&#x2F;mipsel_24kc&#x2F;telephony</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="luci禁用缓存">luci禁用缓存</h3>
<p>编辑/etc/config/luci</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config internal &#39;ccache&#39;</span><br><span class="line">        option enable &#39;0&#39;</span><br></pre></td></tr></table></figure>
<p>重启即可</p>
<h3 id="扩容root分区">扩容root分区</h3>
<p>安装依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install block-mount kmod-fs-ext4 kmod-usb-storage kmod-usb-ohci kmod-usb-uhci e2fsprogs fdisk</span><br></pre></td></tr></table></figure>
<p>查看sd卡信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">block info</span><br></pre></td></tr></table></figure>
<p>有类似回显，其中<code>/dev/mmcblk0p1</code>就是sd卡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dev&#x2F;mtdblock5: UUID&#x3D;&quot;d1f1302b-91ce24ca-2c74336e-eea51b51&quot; VERSION&#x3D;&quot;4.0&quot; MOUNT&#x3D;&quot;&#x2F;rom&quot; TYPE&#x3D;&quot;squashfs&quot;</span><br><span class="line">&#x2F;dev&#x2F;mtdblock6: MOUNT&#x3D;&quot;&#x2F;overlay&quot; TYPE&#x3D;&quot;jffs2&quot;</span><br><span class="line">&#x2F;dev&#x2F;mmcblk0p1: UUID&#x3D;&quot;746ffc51-1f29-2646-b2cb-fc2c03fe3c1a&quot; LABEL&#x3D;&quot;sdcard&quot; VERSION&#x3D;&quot;1.0&quot; TYPE&#x3D;&quot;ext4&quot;</span><br></pre></td></tr></table></figure>
<p>格式化内存卡</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/mmcblk0p1</span><br></pre></td></tr></table></figure>
<p>将下面的DEVICE换成你的sd卡分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DEVICE=<span class="string">&quot;/dev/mmcblk0p1&quot;</span></span><br><span class="line"><span class="built_in">eval</span> $(block info <span class="string">&quot;<span class="variable">$&#123;DEVICE&#125;</span>&quot;</span> | grep -o -e <span class="string">&quot;UUID=\S*&quot;</span>)</span><br><span class="line">uci -q delete fstab.overlay</span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay=<span class="string">&quot;mount&quot;</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.uuid=<span class="string">&quot;<span class="variable">$&#123;UUID&#125;</span>&quot;</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.target=<span class="string">&quot;/overlay&quot;</span></span><br><span class="line">uci commit fstab</span><br></pre></td></tr></table></figure>
<p>转移数据</p>
<p>如有报错请先查看否自动挂载了sd卡，挂载sd卡时也可能出现如下报错，实测不影响。</p>
<p>报错信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@GL-MT1300:~<span class="comment"># mount /dev/mmcblk0p1 /mnt/</span></span><br><span class="line">NTFS signature is missing.</span><br><span class="line">Failed to mount <span class="string">&#x27;/dev/mmcblk0p1&#x27;</span>: Invalid argument</span><br><span class="line">The device <span class="string">&#x27;/dev/mmcblk0p1&#x27;</span> doesn<span class="string">&#x27;t seem to have a valid NTFS.</span></span><br><span class="line"><span class="string">Maybe the wrong device is used? Or the whole disk instead of a</span></span><br><span class="line"><span class="string">partition (e.g. /dev/sda, not /dev/sda1)? Or the other way around?</span></span><br></pre></td></tr></table></figure>
<p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;mmcblk0p1 &#x2F;mnt</span><br><span class="line">cp -f -a &#x2F;overlay&#x2F;. &#x2F;mnt</span><br><span class="line">umount &#x2F;mnt</span><br></pre></td></tr></table></figure>
<p>然后重启</p>
<p>扩展分区前</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210122191844339.png" alt="image-20210122191844339" /><figcaption>image-20210122191844339</figcaption>
</figure>
<p>扩展分区后</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20210122191907269.png" alt="image-20210122191907269" /><figcaption>image-20210122191907269</figcaption>
</figure>
<h3 id="单独编译openwrt-ipk">单独编译openwrt ipk</h3>
<p>先执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make menuconfig </span><br></pre></td></tr></table></figure>
<p>然后选中相关组件</p>
<p>再执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make package&#x2F;feeds&#x2F;luci&#x2F;luci-base&#x2F;compile -j1 V&#x3D;s</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MT7621</tag>
        <tag>OpenWRT</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次重装系统</title>
    <url>/p/an-experience-of-reinstalling-win10/</url>
    <content><![CDATA[<p>本文主要介绍了如何使用U盘进行重装系统，主要面向电脑小白用户。</p>
<p><strong>关键字</strong>：重装win10，电脑重装</p>
<a id="more"></a>
<p><strong><font color="red">对重装系统过程有疑问的小伙伴可以通过站内方式联系我！切勿自己胡乱操作以免造成数据损失！</font></strong></p>
<p><strong>下载链接有时间和流量限制，不定期开放！若链接过期请自行寻找下载链接！</strong></p>
<h3 id="准备工作">准备工作</h3>
<ol type="1">
<li>大于<strong>8G</strong>的U盘</li>
<li>微PE，<a href="https://yunpan.fly97.cn/fly97/software/windows/WePE_64_V2.1.exe">点击此处下载</a></li>
<li>Windows 10 1909原版系统镜像，<a href="https://yunpan.fly97.cn/fly97/mirrors/cn_windows_10_business_editions_version_20h2_x64_dvd_f978664f_4.iso">点击此处下载</a></li>
</ol>
<h3 id="制作启动盘">制作启动盘</h3>
<p>制作系统盘期间需要格式化U盘，如有需要请先备份U盘的文件。</p>
<h4 id="打开微pe工具箱">打开微PE工具箱</h4>
<p>双击打开即可。</p>
<p><img src="https://ftp.fly97.cn/image/20200826101947.png" /></p>
<h4 id="选择其他安装方式">选择其他安装方式</h4>
<p>注意不要点击<strong>立即安装进系统</strong></p>
<p><img src="https://ftp.fly97.cn/image/20200826102028.png" /></p>
<h4 id="选择安装pe进u盘">选择安装PE进U盘</h4>
<p>注意待写入U盘<strong>盘符、容量</strong>是不是正确，安装方法默认即可。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102211.png" /></p>
<h4 id="等待安装完毕">等待安装完毕</h4>
<p><img src="https://ftp.fly97.cn/image/20200826102242.png" /></p>
<p>稍后片刻，安装速度视U盘写入速度决定，建议安装过程中<strong>不要操作电脑</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102535.png" /></p>
<h4 id="检查启动盘是否制作成功">检查启动盘是否制作成功</h4>
<p>安装完毕后，打开<strong>此电脑</strong>，如果发现多了两个盘符，则视为完整成功。</p>
<p>如果没有发现多余的盘符，重新插拔U盘后再尝试查看。</p>
<p><img src="https://ftp.fly97.cn/image/20200826102652.png" /></p>
<h4 id="将下载的镜像复制进u盘">将下载的镜像复制进U盘</h4>
<p>切记切记！复制文件的速度视U盘读写速度决定，请耐心等待。</p>
<h3 id="切换到windows-pe">切换到Windows PE</h3>
<p>将U盘插入电脑并重启电脑，切换到Windows PE系统。</p>
<p>大多数的电脑都提供了启动选项菜单，开机的时候按住对应的快捷键即可进入启动选择界面。</p>
<p>重启时，电脑亮屏后立马按下对应的快捷键。</p>
<p><img src="https://ftp.fly97.cn/image/1281268-20190308133836366-1665479547.jpg" /></p>
<p>如果电脑键盘还有Fn键，且重启过程单独按下<strong>快捷键</strong>无效，那么可以尝试按下<strong>Fn键+快捷键</strong>，反复尝试几次。</p>
<h4 id="选择u盘启动">选择U盘启动</h4>
<p>使用键盘的上下进行选择，然后敲回车。这里以<strong>Shinelon</strong>笔记本为例。这款笔记本的启动项选择的快捷键是<strong>F7</strong>.</p>
<p>不同品牌的笔记本启动项选择的界面可能不同，但都<strong>大同小异</strong>。</p>
<p>选择<strong>已经写入好PE</strong>的U盘，如下图所示。<img src="https://ftp.fly97.cn/image/photo_2020-08-27_16-18-31.jpg" /></p>
<h4 id="进入pe系统">进入PE系统</h4>
<p>如果上述操作没有问题，会出现一个<strong>Windows Boot Mananger</strong>的选择界面，选择第一项即可。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-27_16-18-35.jpg" /></p>
<p>进入PE以后的界面，如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-06-55.png" /></p>
<h4 id="进行磁盘分区">进行磁盘分区</h4>
<p><strong><em>注意：如果不需要改变磁盘分区的大小，只想格式化原有的系统盘并安装全新的系统，此步可以跳过！直接跳转到下一步安装全新系统！强烈建议小白跳过此步！</em></strong></p>
<p>打开上图所示的<strong>分区助手</strong>，找到你要安装的磁盘，如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-07-46.png" /></p>
<p><em>操作到这里要注意：</em></p>
<ol type="1">
<li>如果你的电脑只有一个磁盘，继续操作会丢失<strong>全部硬盘</strong>的数据！切记切记！</li>
<li>如果你的电脑和我一样有多个磁盘，请选中你要安装系统的磁盘。继续操作会丢失<strong>以前系统盘</strong>的数据！</li>
</ol>
<p>进行<strong>磁盘分区</strong>是为了便于磁盘管理，和磁盘的个数无关。</p>
<ol type="1">
<li>如果你的电脑只有一个磁盘，接下来进行的<strong>快捷分区操作</strong>你可以选择<u>多分出几个分区</u>，重装完毕后打开此电脑，你选了几个分区就会看到有几个盘。</li>
<li>如果你的电脑和我一样有多个磁盘，建议将要安装系统的磁盘<u>全部分成一个区</u>，这样后期不会因为C盘容量较小而影响系统正常运行。具体参照以下步骤。</li>
</ol>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-06.png" /></p>
<p>注意，如果你的电脑有多个磁盘，请不要选错。分区数目视个人情况决定，多磁盘建议<strong>一个分区</strong>。磁盘的类型请选择<strong>GPT</strong>，注意勾选<strong>重建MBR</strong>、<strong>创建ESP和MSR分区</strong>。如果你的系统盘是<strong>固态硬盘</strong>，请<strong>勾选分区对其到4096扇区</strong>。</p>
<p>一般来说，如果你的电脑有多个磁盘，那么一个是<strong>传统的机械硬盘</strong>，一个是固态硬盘。固态硬盘的读写速度要比机械硬盘的读写速度要快得多。所以一般将固态硬盘安装成系统盘。</p>
<p>点击开始执行，进行系统分区。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-48.png" /></p>
<p><strong><em>执行过程中请勿操作电脑！否则有可能对磁盘造成不可逆的损害！等待执行完毕。</em></strong></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-09-53.png" /></p>
<p>执行完毕后的新磁盘，如下图所示：</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-10-15.png" /></p>
<p>可以看到，磁盘已经被清空，且只有一个<strong>系统</strong>分区。</p>
<h4 id="还原系统镜像">还原系统镜像</h4>
<p>此步是重装系统的核心步骤，主要就是将全新的系统还原到系统盘中。</p>
<p>打开PE系统桌面的<strong>CGI备份还原</strong>，如图所示：</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-11-47.png" /></p>
<p>选择<strong>还原分区</strong>，一般来说，分区会默认选择好。通过<strong>盘符</strong>、<strong>可用空间</strong>和<strong>卷标</strong>来判断是不是系统盘。</p>
<p>镜像文件选择已经移动到U盘里的ISO文件，并选择<u>Windows 10 Pro</u> 即 <u>Windows10专业版</u> 的镜像。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-12-18.png" /></p>
<p>点击执行，选中<strong>不保留目标分区的文件</strong>。最后点击确定。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-12-41.png" /></p>
<p><strong><em>等待执行完毕，进度条大概会走三次，执行过程中请勿操作电脑！</em></strong></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_11-13-24.png" /></p>
<p>执行完毕后，请自行重启。点击<strong>开始</strong> ==&gt; <strong>重启</strong>。电脑黑屏以后可以将U盘拔出，以免下次启动再进入U盘的PE系统。</p>
<h4 id="进入新系统">进入新系统</h4>
<p>重启过程可能比较慢。请耐心等待。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-39-49.jpg" /></p>
<p>海内存知己，天涯若比邻。无为在歧路，儿女共沾巾。</p>
<p>出自唐代诗人王勃《送杜少府之任蜀州》</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-30.jpg" /></p>
<p>接下来是设置区域。默认帮你选好中国。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-32.jpg" /></p>
<p>然后是设置网络。这里推荐设置，连接网络以后Win 10 可以帮你安装<strong>硬件设备的驱动</strong>。<strong>没有硬件驱动的电脑显卡，声卡，以及其他设备可能无法正常工作。</strong>由于个人网络原因这里选择不连接。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-35.jpg" /></p>
<p>再次推荐你连接到网络。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-43.jpg" /></p>
<p>接受许可协议。不接受无法继续安装23333</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-46.jpg" /></p>
<p>设置用户名。这里推荐设置英文的用户名，以免安装一些软件时出现一些莫名其妙的问题。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-48.jpg" /></p>
<p>接下来是设置密码。可以留空。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-55.jpg" /></p>
<p>选择隐私设置。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-43-58.jpg" /></p>
<p>继续下一步。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-44-01.jpg" /></p>
<p>设置微软个人助理小娜。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-44-09.jpg" /></p>
<p>耐心等待。这是最后一步了。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-47.jpg" /></p>
<p>即将完成。</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-50.jpg" /></p>
<p>熟悉的Windows 窗口又回来了！</p>
<p><img src="https://ftp.fly97.cn/image/photo_2020-08-28_09-45-52.jpg" /></p>
<p>至此，系统安装已经完成。后续还有<strong>激活系统，安装office办公软件</strong>等其他操作。</p>
<h3 id="后续操作">后续操作</h3>
<h4 id="激活系统">激活系统</h4>
<p>激活软件：<a href="https://ftp.fly97.cn/file/HWIDGen_CN.exe">点此下载</a></p>
<p>打开激活软件，需要<strong>连接网络</strong>。点击<strong>数字激活</strong>。稍后片刻提示激活成功。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-47-49.png" /></p>
<p>接下来是还原<strong>此电脑，控制面板等一系列图标</strong></p>
<p>单机<strong>桌面</strong> ==&gt; <strong>个性化</strong>，找到<strong>主题</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-43-21.png" /></p>
<p>下拉菜单，选择桌面光标设置</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-44-11.png" /></p>
<p>根据需要找回桌面图标。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-44-43.png" /></p>
<p>回到<strong>桌面</strong>，右击<strong>此电脑</strong>，找到<strong>属性</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-46-28.png" /></p>
<p>这里提示，此电脑已激活。此项激活是永久激活。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_12-46-56.png" /></p>
<p>激活系统的步骤到此结束。</p>
<h4 id="安装office-2019-办公软件">安装office 2019 办公软件</h4>
<h5 id="下载镜像">下载镜像</h5>
<p>下载地址：<a href="https://ftp.fly97.cn/file/proplus2019retail.img">点此下载</a></p>
<h5 id="安装office">安装office</h5>
<p>右键下载好的镜像，选择<strong>装载</strong>。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185027426.png" />)</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185124252.png" /></p>
<p>打开<strong>此电脑</strong>，此时会发现已经多出来一个<strong>DVD驱动器</strong>，如图所示。</p>
<figure>
<img src="https://ftp.fly97.cn/image/image-20200903185325374.png" alt="image-20200903185325374" /><figcaption>image-20200903185325374</figcaption>
</figure>
<p>双击打开，点击<strong>setup.exe</strong>，开始安装。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903185504419.png" /></p>
<p>注意：如果不想安装office的全部组件，只想安装诸如<strong>word、excel、powerpoint</strong>等核心组件，请参考以下步骤：</p>
<h6 id="下载辅助安装软件">下载辅助安装软件</h6>
<p>Office Tool v7.6：<a href="https://ftp.fly97.cn/file/Office-Tool-v7.6.zip">点击下载</a></p>
<h6 id="双击运行">双击运行</h6>
<p>该软件无需安装，双击打开即可。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200903190222874.png" /></p>
<h6 id="开始部署office">开始部署office</h6>
<p>点击部署，进入部署选择菜单</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-31-44.png" /></p>
<p>选择<strong>已经挂载好的DVD驱动器</strong>，打开<strong>Office ==&gt; Data</strong>文件夹，选中<strong>v64</strong>，点击打开。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-32-45.png" /></p>
<p>架构选择<strong>x64</strong>，安装方式为离线安装，安装模块为office部署工具。根据自身需要安装所需要的office应用程序。这里以<strong>Excel、PowerPoint和Word</strong>为例。最后点击开始部署。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-35-09.png" /></p>
<h5 id="等待安装完毕-1">等待安装完毕</h5>
<p>耐心等待即可。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-35-28.png" /></p>
<h5 id="安装完毕">安装完毕</h5>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-37-09.png" /></p>
<h5 id="使用kms密钥管理服务激活office">使用KMS密钥管理服务激活office</h5>
<p>打开上文提到的辅助安装工具，进入激活选择菜单。</p>
<p>许可证管理选项中，选择<strong>Office 2019 Volume</strong>，点击安装许可证。<strong><em>出现产品密钥安装成功则已安装完毕。</em></strong></p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-50-20.png" /></p>
<p>KMS管理选项中，输入<strong>windows.kms.app</strong>，检测KMS可用性。</p>
<p>右侧出现<strong>successful</strong>则说明这个kms服务器是可用的。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-50-40.png" /></p>
<p>点击激活，最后出现<strong>产品激活成功</strong>。到此激活完毕。</p>
<p><img src="https://ftp.fly97.cn/image/Snipaste_2020-08-26_20-51-19.png" /></p>
<p>使用密钥管理服务激活office，每次激活成功以后可以使用180天，180天以后自动重新激活，只要<strong>KMS激活服务器</strong>还在生效就可以一直续期。可以实现<strong>永久激活</strong>。</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础入门ROS(一)</title>
    <url>/p/ros-tutorial-01/</url>
    <content><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p>
<p>此次记录的主要是软件安装过程中遇到的问题。</p>
<a id="more"></a>
<h3 id="ubuntu1804-换源">ubuntu1804 换源</h3>
<p>安装好Ubuntu 1804以后首先换源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install apt-transport-https ca-certificates -y</span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sed -i <span class="string">&quot;s/cn.archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br><span class="line">sed -i <span class="string">&quot;s/http/https/g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>其中，安装<code>apt-transport-https</code>并将安装协议更换到<code>https</code>以避免运营商缓存劫持。</p>
<h3 id="安装ros-melodic">安装ROS Melodic</h3>
<p>参考 <a href="http://wiki.ros.org/cn/melodic/Installation/Ubuntu">http://wiki.ros.org/cn/melodic/Installation/Ubuntu</a></p>
<h4 id="设置sources.list">设置sources.list</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.aliyun.com/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="更新">【更新】</h5>
<p>国科大ROS源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.ustc.edu.cn/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>
<p>北外ROS源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://mirrors.bfsu.edu.cn/ros/ubuntu/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="设置密钥">设置密钥</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure>
<p>另一种方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL <span class="string">&#x27;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&#x27;</span> | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<h4 id="安装">安装</h4>
<p>桌面完整版：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install ros-melodic-desktop-full -y</span><br></pre></td></tr></table></figure>
<h3 id="初始化rosdep">初始化rosdep</h3>
<p>初始化需要使用代理服务器，设置代理服务器后请修改<code>sudo</code>配置文件以传递环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>
<h3 id="设置环境">设置环境</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;source &#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="构建工厂依赖">构建工厂依赖</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础入门ROS(三)</title>
    <url>/p/ros-tutorial-03/</url>
    <content><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p>
<p>今天写的主要是使用opencv进行相机标定（Camera Calibration）的步骤。</p>
<a id="more"></a>
<h3 id="下载opencv源码">下载opencv源码</h3>
<p>这里用到的源码版本是opencv3.2.0，操作环境是Ubuntu 18.04 LTS。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/opencv/opencv/archive/refs/tags/3.2.0.tar.gz</span><br><span class="line">tar -xvf 3.2.0.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="使用已有的图片进行标定">使用已有的图片进行标定</h3>
<h4 id="编译camera_calibration.cpp">编译camera_calibration.cpp</h4>
<h5 id="进入指定目录">进入指定目录</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd opencv-3.2.0</span><br><span class="line">cd samples&#x2F;cpp&#x2F;tutorial_code&#x2F;calib3d&#x2F;camera_calibration</span><br></pre></td></tr></table></figure>
<h5 id="创建cmakelist.txt文件">创建CMakeList.txt文件</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim CMakeLists.txt</span><br></pre></td></tr></table></figure>
<p>复制下列代码到文件.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">add_executable</span>( camera_calibration camera_calibration.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( camera_calibration <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
<h5 id="编译">编译</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build </span><br><span class="line">cd build </span><br><span class="line">cmake ..</span><br><span class="line">make </span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration01.png" /></p>
<h5 id="修改参数">修改参数</h5>
<p>编辑同级目录下的<code>in_VID5.xml</code>文件，根据标定靶的行数和列数来修改参数。这里的使用的标定靶一共有<strong>6</strong>行，每一行有8个内部角点。</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration02.png" /></p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration03.png" /></p>
<p>其中<code>VID5.xml</code>存放的是标定图片路径，一般图片应不少于3张，图片越多标定效果越好。</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration04.png" /></p>
<h5 id="标定">标定</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv build&#x2F;camera_calibration .</span><br><span class="line">.&#x2F;camera_calibration .&#x2F;in_VID5.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration05.png" /></p>
<p>生成的out_camera_data.xml就是标定后得到的参数文件。</p>
<h3 id="使用视频对摄像头进行标定">使用视频对摄像头进行标定</h3>
<h4 id="编译calibration.cpp">编译calibration.cpp</h4>
<h5 id="进入指定目录-1">进入指定目录</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd opencv-3.4.3</span><br><span class="line">mkdir -p ..&#x2F;calibration_ws</span><br><span class="line">cp samples&#x2F;cpp&#x2F;calibration.cpp ..&#x2F;calibration_ws</span><br><span class="line">cd ..&#x2F;calibration_ws</span><br></pre></td></tr></table></figure>
<h5 id="创建cmakelists.txt文件">创建CMakeLists.txt文件</h5>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">add_executable</span>( calibration calibration.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( calibration <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
<h5 id="编译-1">编译</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make </span><br></pre></td></tr></table></figure>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration06.png" /></p>
<h5 id="标定-1">标定</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x calibration</span><br><span class="line">.&#x2F;calibration -w&#x3D;8 -h&#x3D;6</span><br></pre></td></tr></table></figure>
<p>这里的h指的是标定靶一共有<strong>6</strong>行，w指的是每一行有<strong>8</strong>个内部角点。</p>
<p>按g键开始标定。</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration07.png" /></p>
<p>标定完毕。</p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration08.png" /></p>
<p><img src="https://ftp.fly97.cn/blog/images/20210426/calibration09.png" /></p>
]]></content>
      <tags>
        <tag>ROS</tag>
        <tag>camera calibration</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础入门ROS(二)</title>
    <url>/p/ros-tutorial-02/</url>
    <content><![CDATA[<p>最近的小车需要用到ROS，学习的过程做个记录。</p>
<a id="more"></a>
<h3 id="ros中的工作空间">ROS中的工作空间</h3>
<h4 id="工作空间是什么">工作空间是什么</h4>
<p>工作空间是一个存放工程相关开发文件的文件夹，ROS默认使用的是catkin编译系统。</p>
<p>典型的工作空间包含以下四个目录空间：</p>
<ol type="1">
<li><code>src</code>：代码空间，开发过程中最常用的文件夹。用来存放所有ROS功能包的源码文件。</li>
<li><code>build</code>：编译空间，用来存储工作空间编译过程中产生缓存信息和中间文件。</li>
<li><code>devel</code>：开发空间，用来放置编译生成的可执行文件。</li>
<li><code>install</code>：安装空间，编译成功后，可以使用<code>make install</code>命令将可执行文件安装到该空间中，运行该空间中的环境变量脚本，即可以在终端中运行这些可执行文件。注意：安装空间在工作空间中不是必须的，很多工作空间中没有该文件夹。</li>
</ol>
<h4 id="创建工作空间">创建工作空间</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>
<h4 id="编译工作空间">编译工作空间</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<h4 id="设置环境变量">设置环境变量</h4>
<p>编译完成后<code>devel</code>文件夹下会生成<code>setup.bash</code>形式的环境变量设置脚本，使用<code>source</code>命令运行这些脚本文件，则工作空间的环境变量可以生效。</p>
<p>注意：每一次编译完成后都要运行一次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure>
<p>运行以下命令查看环境变量是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure>
<p>若生效则会显示出当前工作空间的路径。</p>
<h4 id="创建功能包">创建功能包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg subsciber rospy std_msgs geometry_msgs</span><br></pre></td></tr></table></figure>
<p>其中<code>subsciber</code>是包名，剩下的是功能包所需要的依赖。</p>
<p>创建完成后，需要<strong>编译工作空间</strong>，并且<strong>设置环境变量</strong>。</p>
<h4 id="查看功能包所在的工作空间">查看功能包所在的工作空间</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rospack find subsciber</span><br></pre></td></tr></table></figure>
<h3 id="话题和服务">话题和服务</h3>
<h4 id="话题">话题</h4>
<p>消息以一种发布/订阅的方式传递。一个节点可以订阅多个话题，一个话题也可以被多个节点订阅。两个节点通信时，启动顺序没有强制要求，且<strong>实时性</strong>较弱，不适用于双向的同步传输。</p>
<h4 id="服务">服务</h4>
<p>服务是一种带有应答的通信机制。ROS只允许有一个节点提供指定命名的服务。实时性较强，适用于两个节点之间的同步传输。</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>话题</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>同步性</td>
<td>异步</td>
<td>同步</td>
</tr>
<tr class="even">
<td>通信模型</td>
<td>发布/订阅</td>
<td>客户端/服务端</td>
</tr>
<tr class="odd">
<td>底层协议</td>
<td>ROSTCP/ROSUDP</td>
<td>ROSTCP/ROSUDP</td>
</tr>
<tr class="even">
<td>反馈机制</td>
<td>无</td>
<td>有</td>
</tr>
<tr class="odd">
<td>缓冲区</td>
<td>有</td>
<td>无</td>
</tr>
<tr class="even">
<td>实时性</td>
<td>弱</td>
<td>强</td>
</tr>
<tr class="odd">
<td>节点关系</td>
<td>多对多</td>
<td>一对多（一个server）</td>
</tr>
<tr class="even">
<td>适用场景</td>
<td>数据传输</td>
<td>逻辑处理</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas学习小记(一)</title>
    <url>/p/Pandas-learning-notes-01/</url>
    <content><![CDATA[<p>Pandas是什么？</p>
<a id="more"></a>
<p>Pandas是一个强大的分析结构化数据的工具集；它的使用基础是Numpy（提供高性能的矩阵运算）；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p>
<h3 id="安装pandas">安装Pandas</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Pandas -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<h3 id="pandas简介">Pandas简介</h3>
<p>Pandas 适用于处理以下类型的数据：</p>
<ul>
<li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li>
<li>有序和无序（非固定频率）的时间序列数据;</li>
<li>带行列标签的矩阵数据，包括同构或异构型数据;</li>
<li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li>
</ul>
<p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series">Series</a>（一维数据）与 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a>（二维数据），这两种数据结构足以<strong>处理金融、统计、社会科学、工程</strong>等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/">NumPy</a> 开发，可以与其它第三方科学计算支持库完美集成。</p>
<p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p>
<ul>
<li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li>
<li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li>
<li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li>
<li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li>
<li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li>
<li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li>
<li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li>
<li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li>
<li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li>
<li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 / 加载数据；</li>
<li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li>
</ul>
<p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：<strong>数据整理与清洗、数据分析与建模、数据可视化与制表</strong>，Pandas 是处理数据的理想工具。</p>
<p>其它说明：</p>
<ul>
<li>Pandas 速度<strong>很快</strong>。Pandas 的很多底层算法都用 <a href="https://cython.org/">Cython</a> 优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li>
<li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html">statsmodels</a> 的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li>
<li>Pandas 已广泛应用于金融领域</li>
</ul>
<h3 id="pandas中的数据结构">Pandas中的数据结构</h3>
<table>
<thead>
<tr class="header">
<th>维数</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Series</td>
<td>带标签的一维同构数组</td>
</tr>
<tr class="even">
<td>2</td>
<td>DataFrame</td>
<td>带标签的，大小可变的，二维异构表格</td>
</tr>
</tbody>
</table>
<h3 id="为什么有多个数据结构">为什么有多个数据结构？</h3>
<p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p>
<p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。多维数组存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用“更恰当”的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p>
<p>处理 DataFrame 等表格数据时，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    series = df[col]</span><br><span class="line">    <span class="comment"># do something with series</span></span><br></pre></td></tr></table></figure>
<h3 id="大小可变与数据复制"><a href="https://www.pypandas.cn/docs/getting_started/overview.html#大小可变与数据复制">大小可变与数据复制</a></h3>
<p>Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</p>
<p>Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<strong>不变</strong>更稳妥。</p>
<h3 id="十分钟入门pandas"><a href="https://www.pypandas.cn/docs/getting_started/10min.html#%E5%8D%81%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8-pandas">十分钟入门Pandas</a></h3>
<p>导入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<h4 id="生成对象">生成对象</h4>
<p>使用值列表生成Series</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s</span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">8.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>用含日期时间索引与标签的Numpy数组生成DataFrame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dates</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2013-01-01&#x27;</span>, <span class="string">&#x27;2013-01-02&#x27;</span>, <span class="string">&#x27;2013-01-03&#x27;</span>, <span class="string">&#x27;2013-01-04&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2013-01-05&#x27;</span>, <span class="string">&#x27;2013-01-06&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=list(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: df</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></table></figure>
<p>用Series字典对象生成DataFrame</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [9]: df2 &#x3D; pd.DataFrame(&#123;&#39;A&#39;: 1.,</span><br><span class="line">   ...:                     &#39;B&#39;: pd.Timestamp(&#39;20130102&#39;),</span><br><span class="line">   ...:                     &#39;C&#39;: pd.Series(1, index&#x3D;list(range(4)), dtype&#x3D;&#39;float32&#39;),</span><br><span class="line">   ...:                     &#39;D&#39;: np.array([3] * 4, dtype&#x3D;&#39;int32&#39;),</span><br><span class="line">   ...:                     &#39;E&#39;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]),</span><br><span class="line">   ...:                     &#39;F&#39;: &#39;foo&#39;&#125;)</span><br><span class="line">   ...: </span><br><span class="line"></span><br><span class="line">In [10]: df2</span><br><span class="line">Out[10]: </span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">3  1.0 2013-01-02  1.0  3  train  foo</span><br></pre></td></tr></table></figure>
<p>DataFrame的列有不同的数据类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: df2.dtypes</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">A           float64</span><br><span class="line">B    datetime64[ns]</span><br><span class="line">C           float32</span><br><span class="line">D             int32</span><br><span class="line">E          category</span><br><span class="line">F            object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<p>IPython支持 tab 键自动补全列名与公共属性。下面是部分可自动补全的属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: df2.&lt;TAB&gt;  <span class="comment"># noqa: E225, E999</span></span><br><span class="line">df2.A                  df2.bool</span><br><span class="line">df2.abs                df2.boxplot</span><br><span class="line">df2.add                df2.C</span><br><span class="line">df2.add_prefix         df2.clip</span><br><span class="line">df2.add_suffix         df2.clip_lower</span><br><span class="line">df2.align              df2.clip_upper</span><br><span class="line">df2.all                df2.columns</span><br><span class="line">df2.any                df2.combine</span><br><span class="line">df2.append             df2.combine_first</span><br><span class="line">df2.apply              df2.compound</span><br><span class="line">df2.applymap           df2.consolidate</span><br><span class="line">df2.D</span><br></pre></td></tr></table></figure>
<p>列 A、B、C、D 和 E 都可以自动补全；为简洁起见，此处只显示了部分属性。</p>
<h4 id="查看数据">查看数据</h4>
<p>下列代码说明了如何查看DataFrame头部和尾部的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: df.head()</span><br><span class="line">Out[<span class="number">13</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: df.tail(<span class="number">3</span>) <span class="comment">#后三行	</span></span><br><span class="line">Out[<span class="number">14</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></table></figure>
<p>显示索引与列名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">15</span>]: df.index</span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2013-01-01&#x27;</span>, <span class="string">&#x27;2013-01-02&#x27;</span>, <span class="string">&#x27;2013-01-03&#x27;</span>, <span class="string">&#x27;2013-01-04&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2013-01-05&#x27;</span>, <span class="string">&#x27;2013-01-06&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: df.columns</span><br><span class="line">Out[<span class="number">16</span>]: Index([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 输出底层数据的 NumPy 对象。注意，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 的列由多种数据类型组成时，该操作耗费系统资源较大，这也是 Pandas 和 NumPy 的本质区别：<strong>NumPy 数组只有一种数据类型，DataFrame 每列的数据类型各不相同</strong>。调用 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 时，Pandas 查找支持 DataFrame 里所有数据类型的 NumPy 数据类型。还有一种数据类型是 <code>object</code>，可以把 DataFrame 列里的值强制转换为 Python 对象。</p>
<p>下面的 <code>df</code> 这个 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 里的值都是浮点数，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 的操作会很快，而且不复制数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: df.to_numpy()</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">array([[ <span class="number">0.4691</span>, <span class="number">-0.2829</span>, <span class="number">-1.5091</span>, <span class="number">-1.1356</span>],</span><br><span class="line">       [ <span class="number">1.2121</span>, <span class="number">-0.1732</span>,  <span class="number">0.1192</span>, <span class="number">-1.0442</span>],</span><br><span class="line">       [<span class="number">-0.8618</span>, <span class="number">-2.1046</span>, <span class="number">-0.4949</span>,  <span class="number">1.0718</span>],</span><br><span class="line">       [ <span class="number">0.7216</span>, <span class="number">-0.7068</span>, <span class="number">-1.0396</span>,  <span class="number">0.2719</span>],</span><br><span class="line">       [<span class="number">-0.425</span> ,  <span class="number">0.567</span> ,  <span class="number">0.2762</span>, <span class="number">-1.0874</span>],</span><br><span class="line">       [<span class="number">-0.6737</span>,  <span class="number">0.1136</span>, <span class="number">-1.4784</span>,  <span class="number">0.525</span> ]])</span><br></pre></td></tr></table></figure>
<p><code>df2</code> 这个 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 包含了多种类型，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 操作就会耗费较多资源。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df2.to_numpy()</span><br><span class="line">Out[<span class="number">18</span>]: </span><br><span class="line">array([[<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">&#x27;2013-01-02 00:00:00&#x27;</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]], dtype=object)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提醒：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy">DataFrame.to_numpy()</a> 的输出不包含行索引和列标签。</p>
</blockquote>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe">describe()</a> 可以快速查看数据的统计摘要：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: df.describe()</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">              A         B         C         D</span><br><span class="line">count  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span></span><br><span class="line">mean   <span class="number">0.073711</span> <span class="number">-0.431125</span> <span class="number">-0.687758</span> <span class="number">-0.233103</span></span><br><span class="line">std    <span class="number">0.843157</span>  <span class="number">0.922818</span>  <span class="number">0.779887</span>  <span class="number">0.973118</span></span><br><span class="line">min   <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">25</span>%   <span class="number">-0.611510</span> <span class="number">-0.600794</span> <span class="number">-1.368714</span> <span class="number">-1.076610</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">0.022070</span> <span class="number">-0.228039</span> <span class="number">-0.767252</span> <span class="number">-0.386188</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">0.658444</span>  <span class="number">0.041933</span> <span class="number">-0.034326</span>  <span class="number">0.461706</span></span><br><span class="line">max    <span class="number">1.212112</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">1.071804</span></span><br></pre></td></tr></table></figure>
<p>转置数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: df.T</span><br><span class="line">Out[<span class="number">20</span>]: </span><br><span class="line">   <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-06</span></span><br><span class="line">A    <span class="number">0.469112</span>    <span class="number">1.212112</span>   <span class="number">-0.861849</span>    <span class="number">0.721555</span>   <span class="number">-0.424972</span>   <span class="number">-0.673690</span></span><br><span class="line">B   <span class="number">-0.282863</span>   <span class="number">-0.173215</span>   <span class="number">-2.104569</span>   <span class="number">-0.706771</span>    <span class="number">0.567020</span>    <span class="number">0.113648</span></span><br><span class="line">C   <span class="number">-1.509059</span>    <span class="number">0.119209</span>   <span class="number">-0.494929</span>   <span class="number">-1.039575</span>    <span class="number">0.276232</span>   <span class="number">-1.478427</span></span><br><span class="line">D   <span class="number">-1.135632</span>   <span class="number">-1.044236</span>    <span class="number">1.071804</span>    <span class="number">0.271860</span>   <span class="number">-1.087401</span>    <span class="number">0.524988</span></span><br></pre></td></tr></table></figure>
<p><strong>按轴排序：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">21</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">                   D         C         B         A</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-1.135632</span> <span class="number">-1.509059</span> <span class="number">-0.282863</span>  <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-1.044236</span>  <span class="number">0.119209</span> <span class="number">-0.173215</span>  <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">1.071804</span> <span class="number">-0.494929</span> <span class="number">-2.104569</span> <span class="number">-0.861849</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.271860</span> <span class="number">-1.039575</span> <span class="number">-0.706771</span>  <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-1.087401</span>  <span class="number">0.276232</span>  <span class="number">0.567020</span> <span class="number">-0.424972</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.524988</span> <span class="number">-1.478427</span>  <span class="number">0.113648</span> <span class="number">-0.673690</span></span><br></pre></td></tr></table></figure>
<p>按值排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">22</span>]: df.sort_values(by=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">Out[<span class="number">22</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></span><br></pre></td></tr></table></figure>
<h4 id="选择">选择</h4>
<p>获取数据</p>
<p>选择单列，产生<code>Series</code>，与<code>df.A</code>等效：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: df[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>   <span class="number">-0.861849</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.424972</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">-0.673690</span></span><br><span class="line">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure>
<p>用[]切片行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>]</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></span><br></pre></td></tr></table></figure>
<h4 id="按标签选择">按标签选择</h4>
<p>用标签提取一行数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">Out[<span class="number">26</span>]: </span><br><span class="line">A    <span class="number">0.469112</span></span><br><span class="line">B   <span class="number">-0.282863</span></span><br><span class="line">C   <span class="number">-1.509059</span></span><br><span class="line">D   <span class="number">-1.135632</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure>
<p>用标签选择多列数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df.loc[:, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span></span><br></pre></td></tr></table></figure>
<p>用标签切片，包含行与列结束点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">28</span>]: df.loc[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">28</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br></pre></td></tr></table></figure>
<p>返回对象降维：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">29</span>]: df.loc[<span class="string">&#x27;20130102&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">Out[<span class="number">29</span>]: </span><br><span class="line">A    <span class="number">1.212112</span></span><br><span class="line">B   <span class="number">-0.173215</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure>
<p>提取标量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: df.loc[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></table></figure>
<p>快速访问标量，与上述方法等效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">31</span>]: df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></table></figure>
<h4 id="按位置选择">按位置选择</h4>
<p>选择第三行的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">32</span>]: df.iloc[<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">A    <span class="number">0.721555</span></span><br><span class="line">B   <span class="number">-0.706771</span></span><br><span class="line">C   <span class="number">-1.039575</span></span><br><span class="line">D    <span class="number">0.271860</span></span><br><span class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></table></figure>
<p>类似于Numpy/Python，用整数切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></span><br></pre></td></tr></table></figure>
<p>类似于Numpy/Python，用整数列表按位置切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">                   A         C</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-0.494929</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.276232</span></span><br></pre></td></tr></table></figure>
<p>显式整行切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">35</span>]: df.iloc[<span class="number">1</span>:<span class="number">3</span>, :]</span><br><span class="line">Out[<span class="number">35</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></span><br></pre></td></tr></table></figure>
<p>显式整列切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">36</span>]: </span><br><span class="line">                   B         C</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span></span><br></pre></td></tr></table></figure>
<p>显示提取值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df.iloc[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">37</span>]: <span class="number">-0.17321464905330858</span></span><br></pre></td></tr></table></figure>
<p>快速访问标量，与上述方法等效：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">38</span>]: df.iat[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">38</span>]: <span class="number">-0.17321464905330858</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PandasPandas</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中的自动求导机制和计算图</title>
    <url>/p/automatic-derivation-mechanism-and-calculation-graph-in-PyTorch/</url>
    <content><![CDATA[<p>本文介绍了 PyTorch 的自动求导机制和计算图。</p>
<p><strong>摘要</strong>：深度学习的算法本质是通过反向传播求导数，PyTorch 的 <code>Autograd</code>模块实现了此功能。在 Tensor 上的所有操作，<code>Autograd</code>都能为他们自动提供微分，避免手动求导的复杂过程。</p>
<p><strong>关键字</strong>：PyTorch，自动求导，计算图</p>
<a id="more"></a>
<p>PyTorch会根据计算过程来自动生成动态图，然后根据动态图的创建过程进行反向传播，计算得到每个节点的梯度值。为了能够记录张量的梯度，首先需要在创建张量的时候设置一个参数<code>requires_grad=True</code>，意味着这个张量将会加入到计算图中，作为计算图的叶子节点参与计算通过一系列的计算最后输出结果张量，也就是根节点。几乎所有的张量创建方式都可以指定这个参数，一旦指定了这个参数，在后续的计算中得到的中间结果的张量都会被设置成<code>requires_grad=True</code>。对于PyTorch 来说，每一个张量都有一个<code>grad_fn</code>方法，这个方法包含创建该张量的运算的导数信息。在反向传播过程中，通过传入后一层的神经网络的梯度，该函数会计算出参与运算的所有张量的梯度，<code>grad_fn</code>本身也携带着计算图的信息，该方法本身有一个<code>next_functions</code>属性，包含连接该张量的其他张量的<code>grad_fn</code>。通过不断反向传播回溯中间张量的计算节点，可以得到所有张量的梯度。一个张量的梯度张量的信息保存在该张量的grad属性中。</p>
<p>除 PyTorch 张量本身外，PyTorch提供了一个专门用来自动求导的包，即<code>torch.autograd</code>.它包含了两个重要的函数，即<code>torch.autograd.backward</code>函数和<code>torch.autograd.grad</code>函数。</p>
<p><code>torch.autograd.backward</code>函数通过传入根节点张量，以及起始梯度张量(形状和当前张量的相同)，可以计算产生该根节点所有对应的叶子节点的梯度。当张量为标量张量(即只有一个元素的张量)时，可以不传入起始梯度张量，默认会设置初始梯度张量为1。当计算梯度张量时，原来建立起来的计算图会自动被释放，如果需要再次做自动求导，因为计算图会被自动释放，如果需要再次做自动求导，因为计算图已经不存在，就会报错。如果要在反向传播的时候保留计算图，可以设置<code>retain_graph=True</code>。另外，在自动求导的时候默认不会建立反向传播的计算图(反向传播也是一个计算过程，可以动态创建计算图)，如果需要在反向传播计算的同时建立和梯度张量有关的计算图(在某些情况下，如需要计算高阶导数的情况下，不过这种情况比较少)，可以设置<code>creat_graph=True</code>。对于一个可求导的张量，也可以直接调用该张量内部的<code>backward</code>方法来进行自动求导。</p>
<h2 id="自动求导机制实例">自动求导机制实例</h2>
<p>下面举一个简单的例子来说明自动求导是如何使用的。根据高等数学的知识可知，若定义一个函数<span class="math inline">\(f(x)=x^2\)</span>，则它的导数<span class="math inline">\(f(x)=2x\)</span>。于是可以创建一个可求导的张量来测试具体的导数。具体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">t1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-0.6704,  1.1710,  0.7608],</span></span><br><span class="line"><span class="string">        [ 1.2378, -0.5393, -0.9865],</span></span><br><span class="line"><span class="string">        [ 0.2863,  0.5295, -0.4555]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum() </span><br><span class="line">t2.backward(retain_graph=<span class="literal">True</span>) <span class="comment">#梯度反向传播</span></span><br><span class="line">t1.grad <span class="comment">#梯度是张量原始分量的2倍</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;tensor([[-1.3407,  2.3419,  1.5216],</span></span><br><span class="line"><span class="string">        [ 2.4756, -1.0786, -1.9729],</span></span><br><span class="line"><span class="string">        [ 0.5725,  1.0589, -0.9110]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum()  <span class="comment">#再次计算张量的所有分量平方和</span></span><br><span class="line">t2.backward() <span class="comment"># 梯度再次反向传播</span></span><br><span class="line">t1.grad <span class="comment">#梯度累积</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-2.1156, -1.1415,  7.4562],</span></span><br><span class="line"><span class="string">        [ 0.0900, -4.8776, -0.5413],</span></span><br><span class="line"><span class="string">        [-8.0727, -0.1184, -6.8779]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.grad.zero_() <span class="comment">#梯度清零</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要注意的一点是，张量绑定的梯度张量在不清空的情况下会逐渐累积。这种特性在某些情况下是有用的，比如，需要一次性求很多迷你批次的累计梯度，但在一般情况下，不需要用到这个特性，所以要注意将张量的梯度清零。</p>
<h2 id="梯度函数的使用">梯度函数的使用</h2>
<p>在某些情况下，不需要求出当前张量对所有产生该张量的叶子节点的梯度，此时可以用<code>torch.autograd.grad</code>函数，这个函数的参数是两个张量，第一个张量是计算图的数据结果张量(或是张量列表)，第二个张量是需要对计算图求导的张量(或张量列表)。最后输出的结果是第一个张量对第二个张量求导的结果(注意梯度会累积，和前面介绍的<code>torch.autograd.backward</code>函数的行为一样)。<strong>需要注意的是</strong>，这个函数不会改变叶子节点的grad属性。而函数<code>torch.autograd.backward</code>会设置叶子节点的grad属性为最后求出梯度张量。<code>torch.autograd.grad</code>会在反向传播求导时释放计算图，如果需要保留计算图，同样可以设置<code>retain_graph=True</code>.如果需要反向传播的计算图，可以设置<code>create_graph=True</code>.</p>
<p>另外，有时候会碰到一种情况是求导的两个张量之间在计算图上没有关联，在这种情况下函数会报错，如果不需要函数的报错行为，可以设置allow_unused=True这个参数，结果会返回分量全为0的梯度张量(因为两个张量没有关联，所以求导的梯度为0).</p>
<p>具体的使用方法可以参考以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) <span class="comment">#初始化t1张量</span></span><br><span class="line">t1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[-0.1082, -1.0099, -0.4560],</span></span><br><span class="line"><span class="string">        [-0.3910, -0.9767,  0.6419],</span></span><br><span class="line"><span class="string">        [ 1.1544,  0.3572, -1.3304]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">t2 = t1.pow(<span class="number">2</span>).sum() <span class="comment">#根据t1张量求t2张量</span></span><br><span class="line">t.autograd.grad(t2, t1) <span class="comment"># t2张量对t1张量求导</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(tensor([[-0.2165, -2.0197, -0.9120],</span></span><br><span class="line"><span class="string">         [-0.7820, -1.9535,  1.2837],</span></span><br><span class="line"><span class="string">         [ 2.3088,  0.7145, -2.6608]]),)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="计算图的构建的启用和禁用">计算图的构建的启用和禁用</h2>
<p>由于计算图的构建需要消耗内存和计算资源，在一些情况下，计算图并不是必要的，比如<strong>神经网络的推导</strong>。在这种情况下，可以使用<code>torch.no_grad</code>上下文管理器，在这个上下文管理器的作用域内进行的神经网络计算不会构建任何计算图。</p>
<p>另外，还有一种情况是对于一个张量，我们在反向传播的时候可能不需要让梯度通过这个张量的节点，也就是新建的计算图要和原来的计算图分离。在这种情况下，可以使用张量的<code>detach</code>方法，通过调用这个方法，可以返回一个新的张量，该张量会成为一个新的计算图的叶子节点，新的计算图和老的计算图互相分离，互不影响。具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = t.randn(<span class="number">3</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">t2 = t1.sum()</span><br><span class="line"></span><br><span class="line">t2   <span class="comment">#t2的计算构建了计算图，输出结果带有grad_fn</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> tensor(2.2761, grad_fn=&lt;SumBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> t.no_grad():</span><br><span class="line">    t3 = t1.sum()</span><br><span class="line">    </span><br><span class="line">t3  <span class="comment">#t3的计算没有构建计算图，输出结果没有grad_fn</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.2761)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.sum()   <span class="comment">#保持原来的计算图</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor(2.2761, grad_fn=&lt;SumBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">t1.sum().detach()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> tensor(2.2761)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<h3 id="tensor">Tensor</h3>
<p>如果我们需要计算某个Tensor的导数，那么我们需要设置其<code>requires_grad=True</code>.</p>
<p>Tensor包含以下属性：</p>
<ul>
<li><code>grad</code>：保存tensor的梯度，形状与Tensor一致。每次在计算backward时都需要将前一时刻的梯度归零，否则梯度值会一直累加。</li>
<li><code>grad_fn</code>：指向一个Function，记录Tensor的操作历史，即它是什么操作的输出，用来构建计算图。如果某一个变量是由用户创建的，则他为<strong>叶子节点</strong>，对应的<code>grad_fn</code>等于<code>None</code>。只有<strong>根节点</strong>的<code>grad_fn</code>才有效，用于指示梯度函数是哪种类型。</li>
<li><code>is_leaf</code>: 用来指示该Tensor是否是叶子节点。</li>
<li><code>requires_grad</code>: 设置为<code>True</code>则表示该Tensor需要求导</li>
</ul>
<p>通过几个例子来了解一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">a = t.ones(<span class="number">3</span>, <span class="number">4</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], requires_grad=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">b = t.zeros(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[0., 0., 0., 0.],</span></span><br><span class="line"><span class="string">        [0., 0., 0., 0.],</span></span><br><span class="line"><span class="string">        [0., 0., 0., 0.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 张量加法</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">c</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">c = a.add(b)</span><br><span class="line">c</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">d = c.sum()</span><br><span class="line">d.backward() <span class="comment"># 反向传播</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意两者的区别</span></span><br><span class="line">c.data.sum(), c.sum()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(tensor(12.), tensor(12., grad_fn=&lt;SumBackward0&gt;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a.grad</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1., 1.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 此处虽然没有指定c需要求导，但c依赖于a，a需要求导</span></span><br><span class="line"><span class="comment"># 因此c的requires_grad属性会自动设为True</span></span><br><span class="line">a.requires_grad, b.requires_grad, c.requires_grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;(True, False, True)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由用户创建的 tensor 属于叶子节点，对应的grad_fn是None</span></span><br><span class="line">a.is_leaf, b.is_leaf, c.is_leaf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;(True, True, False)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.grad是None, c不是叶子节点, 他的梯度是用来计算a的梯度</span></span><br><span class="line"><span class="comment"># 虽然c.requires_grad = True, 但其梯度计算完了即被释放</span></span><br><span class="line"></span><br><span class="line">c.grad <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;True&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="torch.autograd.backward">torch.autograd.backward</h3>
<p>先看一下backward的接口是如何定义的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">torch.autograd.backward(</span><br><span class="line">		tensors, </span><br><span class="line">		grad_tensors&#x3D;None, </span><br><span class="line">		retain_graph&#x3D;None, </span><br><span class="line">		create_graph&#x3D;False, </span><br><span class="line">		grad_variables&#x3D;None)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>tensor</code>: 用于计算梯度的tensor。也就是说这两种方式是等价的：<code>torch.autograd.backward(z) == z.backward()</code></li>
<li><code>grad_tensors</code>: 在计算矩阵的梯度时会用到。他其实也是一个tensor，shape一般需要和前面的<code>tensor</code>保持一致。</li>
<li><code>retain_graph</code>: 通常在调用一次backward后，PyTorch会自动把计算图销毁，所以要想对某个变量重复调用backward，则需要将该参数设置为<code>True</code></li>
<li><code>create_graph</code>: 当设置为<code>True</code>的时候可以用来计算更高阶的梯度</li>
<li><code>grad_variables</code>: 这个官方说法是grad_variables' is deprecated. Use 'grad_tensors' instead.也就是说这个参数后面版本中应该会丢弃，直接使用<code>grad_tensors</code>.</li>
</ul>
<p>使用以下代码尝试解释<code>grad_tensors</code>的作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line">z.backward()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RuntimeError: grad can be implicitly created only for scalar outputs</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>当代码被运行，会有一个上述的<code>RuntimeError</code>被抛出。上面的报错信息意思是<strong>只有对标量输出它才会计算梯度</strong>，而求一个矩阵对令一个矩阵的导数束手无策。 <span class="math display">\[
X=[x_0\quad x_1]\quad  Z=X+2=[x_0+2\quad x_1+2]\Rightarrow \frac{\partial Z}{\partial X}=?
\]</span> 那么我们只要相办法把矩阵转变成一个标量不就好了？比如我们可以对<code>Z</code>求和，然后用求和得到的标量在对x求导，这样不会对结果有影响。即： <span class="math display">\[
Z_{sum}=\sum{z_i}=x_0+x_1+8\quad then \quad\frac{\partial Z_{sum}}{\partial X_0}=\frac{\partial Z_{sum}}{\partial X_1}=1
\]</span> 我们可以看到对z求和以后再计算梯度没有报错，结果也和预期一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">x = t.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">z.sum().backward()</span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([1., 1.])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>我们再仔细想想，对z求和不就是等价于z<strong>点乘一个一样维度的全为1的矩阵</strong>吗？即<span class="math inline">\(sum(Z)=dot(Z,I)\)</span>,而这个I也就是我们需要传入的<code>grad_tensor</code>参数。点乘只是对一维向量而言的，对于矩阵或更高维的张量，可以看作是<strong>对每一个维度做点乘</strong>。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line">x = t.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">z.backward(t.ones_like(z))</span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([1., 1.])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>弄个再复杂一点的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = t.tensor([[<span class="number">2.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = t.tensor([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z = t.mm(x, y)</span><br><span class="line">print(<span class="string">f&quot;z:<span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">z.backward(t.tensor([[<span class="number">1.</span>, <span class="number">0</span>]]), retain_graph=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">f&quot;x.grad:<span class="subst">&#123;x.grad&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;y.grad:<span class="subst">&#123;y.grad&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z:tensor([[5., 8.]], grad_fn=&lt;MmBackward&gt;)</span></span><br><span class="line"><span class="string">x.grad:tensor([[1., 3.]])</span></span><br><span class="line"><span class="string">y.grad:tensor([[2., 0.],</span></span><br><span class="line"><span class="string">        [1., 0.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结：说了这么多，grad_tensors的作用其实可以简单地理解成在求梯度时候地权重，因为可能梯度对影响结果程度不同。</p>
<p><strong>知乎高赞评论：</strong>假设是在z点backward，输入<code>grad_tensors</code>应该是目标函数(scalar)f对z的梯度，那么 <span class="math display">\[
\frac{\partial f}{\partial X}=\frac{\partial f}{\partial z} \times \frac{\partial z}{\partial x}
\]</span> 其中，传入的第一项就是传入<code>grad_tensors</code></p>
<h3 id="导数运算">导数运算</h3>
<p>接着我们来看看autograd计算的导数和我们手动推导的导数的区别。</p>
<p>给出下列函数表达式： <span class="math display">\[
y=x^2e^x
\]</span> 他的导函数是： <span class="math display">\[
\frac{\partial y}{\partial x}=2xe^x+x^2e^x
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算y&quot;&quot;&quot;</span></span><br><span class="line">    y = x**<span class="number">2</span> * t.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradf</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;手动求导函数&quot;&quot;&quot;</span></span><br><span class="line">    dx = <span class="number">2</span>*x*t.exp(x) + x**<span class="number">2</span>*t.exp(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子, 使结果可以复现</span></span><br><span class="line">t.manual_seed(<span class="number">0</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = t.randn(<span class="number">3</span>, <span class="number">4</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = f(x)</span><br><span class="line">y</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[11.0879,  0.0642,  0.5373,  0.5705],</span></span><br><span class="line"><span class="string">        [ 0.3976,  0.4830,  0.2435,  1.6235],</span></span><br><span class="line"><span class="string">        [ 0.2520,  0.1087,  0.1960,  0.0398]], grad_fn=&lt;MulBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">y.backward(t.ones(y.size())) <span class="comment"># 和grad_tensor形状一致</span></span><br><span class="line">x.grad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y.sum().backward()</span><br><span class="line">x.grad</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># autograd的计算结果与利用公式手动计算的结果一致</span></span><br><span class="line">gradf(x)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tensor([[25.4785, -0.3734,  0.0441,  2.5776],</span></span><br><span class="line"><span class="string">        [-0.3356, -0.2077,  1.4510,  5.4982],</span></span><br><span class="line"><span class="string">        [-0.4487, -0.4302, -0.4611,  0.4765]], grad_fn=&lt;AddBackward0&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="计算图">计算图</h3>
<p>PyTorch 中的 autograd 的底层采用了计算图，计算图是一种<strong>特殊的有向无环图(DAG)</strong>.用于记录算子和变量之间的关系。一般用矩形表示算子，椭圆形表示变量。如表达式<span class="math inline">\(z=wx+b\)</span>可以分解为<span class="math inline">\(y=wx\)</span>和<span class="math inline">\(z=y+b\)</span>，其计算图如下图所示，图中的<code>MUL</code>和<code>ADD</code>都是算子，<span class="math inline">\(w、x、b\)</span>为变量。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200820171041627.png" alt="image-20200820171041627" style="zoom:50%;" /></p>
<p>如上有向无环图中，<span class="math inline">\(X\)</span>和<span class="math inline">\(b\)</span>是叶子节点(leaf node)，这些节点通常由用户自己创建，不依赖其他变量。<span class="math inline">\(z\)</span>称为根节点，是计算图的最终目标。利用链式法则很容易求得各个叶子节点的梯度。 <span class="math display">\[
\frac{\partial z}{\partial b}=1\quad\frac{\partial z}{\partial y}=1
\]</span></p>
<p><span class="math display">\[
\frac{\partial y}{\partial w}=x\quad\frac{\partial y}{\partial x}=w
\]</span></p>
<p><span class="math display">\[
\frac{\partial z}{\partial x}=\frac{\partial z}{\partial y} \times\frac{\partial y}{\partial x}=1\times w
\]</span></p>
<p><span class="math display">\[
\frac{\partial z}{\partial w}=\frac{\partial z}{\partial y} \times\frac{\partial y}{\partial w}=1\times x
\]</span></p>
<p>而有了计算图，上述链式求导即可利用计算图的反向传播自动完成，其传播过程如下图所示。</p>
<p><img src="https://ftp.fly97.cn/image/image-20200820172727826.png" alt="image-20200820172727826" style="zoom:50%;" /></p>
<p>在 PyTorch 实现中，<code>autograd</code>会随着用户的操作，记录生成当前 <strong>Tensor</strong> 的所有操作，并由此建立一个有向无环图。用户没进行一个操作，相应的计算图就会发生改变。更底层的实现中，图中记录了操作<code>Function</code>，每个变量在图中的位置可通过其<code>grad_fn</code>属性在图中的位置可以推测得到。在反向传播过程中，<code>autograd</code>沿着这个图从当前变量(根节点<span class="math inline">\(z\)</span>)溯源，可以利用链式求导法则计算所有叶子节点的梯度。每一个前向传播操作的函数都有与之对应的反向传播函数用来计算输入的各个Tensor的梯度，这些函数的函数名通常以<code>Backward</code>结尾。</p>
<p>部分转载自：https://zhuanlan.zhihu.com/p/83172023</p>
]]></content>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中正则表达式用法</title>
    <url>/p/regular-expression-usage-in-python/</url>
    <content><![CDATA[<h4 id="正则表达式全集">正则表达式全集</h4>
<a id="more"></a>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>字符</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td>
</tr>
<tr class="even">
<td><strong>^</strong></td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td>
</tr>
<tr class="odd">
<td>**<span class="math inline">\(** | 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，\)</span>也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td>
<td></td>
</tr>
<tr class="even">
<td>*****</td>
<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>
</tr>
<tr class="odd">
<td><strong>+</strong></td>
<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>
</tr>
<tr class="even">
<td><strong>?</strong></td>
<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>
</tr>
<tr class="odd">
<td><strong>{n}</strong></td>
<td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>
</tr>
<tr class="even">
<td><strong>{n,}</strong></td>
<td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td>
</tr>
<tr class="odd">
<td><strong>{n,m}</strong></td>
<td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr class="even">
<td><strong>?</strong></td>
<td>当该字符紧跟在任何一个其他限制符（<em>,+,?，{</em>n<em>}，{</em>n<em>,}，{</em>n<em>,</em>m*}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>
</tr>
<tr class="odd">
<td><strong>.</strong></td>
<td>匹配除“<code>\</code><em><code>n</code></em>”之外的任何单个字符。要匹配包括“<code>\</code><em><code>n</code></em>”在内的任何字符，请使用像“<code>(. | | **(pattern)**    | 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“</code>(<code>”或“</code>)<code>”。 | | **(?:pattern)**  | 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 | | **(?=pattern)**  | 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 | | **(?!pattern)**  | 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 | | **(?&lt;=pattern)** | 反向肯定预查，与正向肯定预查类拟，只是方向相反。             | | **(?&lt;!pattern)** | 反向否定预查，与正向否定预查类拟，只是方向相反。             | | **x\|y**         | 匹配x或y                                                     | | **[xyz]**        | 字符集合。匹配所包含的任意一个字符。                         | | **[^xyz]**       | 负值字符集合。匹配未包含的任意字符。                         | | **[a-z]**        | 字符范围。匹配指定范围内的任意字符。                         | | **[^a-z]**       | 负值字符范围。匹配任何不在指定范围内的任意字符。             | | **\b**           | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“</code>er”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>
</tr>
<tr class="even">
<td>***</td>
<td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配由x指明的控制字符。例如，-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>
</tr>
<tr class="even">
<td>**</td>
<td>匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr class="even">
<td>**</td>
<td>匹配一个换页符。等价于0c和。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配一个换行符。等价于0a和。</td>
</tr>
<tr class="even">
<td>**</td>
<td>匹配一个回车符。等价于0d和。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ 。</td>
</tr>
<tr class="even">
<td>***</td>
<td>匹配任何非空白字符。等价于[ 。</td>
</tr>
<tr class="odd">
<td>**</td>
<td>匹配一个制表符。等价于09和。</td>
</tr>
<tr class="even">
<td>**</td>
<td>匹配一个垂直制表符。等价于0b和。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>
</tr>
<tr class="even">
<td>***</td>
<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>
</tr>
<tr class="odd">
<td>***</td>
<td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr class="even">
<td><strong>\num</strong></td>
<td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td>
</tr>
<tr class="odd">
<td><strong>\n</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n为一个八进制转义值。</td>
</tr>
<tr class="even">
<td><strong>\nm</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr class="odd">
<td><strong>\nml</strong></td>
<td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
</tbody>
</table>
<div class="line-block">*** | 匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，</div>
<h4 id="常用正则表达式">常用正则表达式</h4>
<div class="line-block">                     用户名 | /<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>{3,16}$/ |<br />
--------------------------: | ------------------------------------------------------------ |<br />
                   <strong>密码</strong> | /<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>{6,18}$/ |<br />
             <strong>十六进制值</strong> | /^#?([a-f0-9]{6} |<br />
               <strong>电子邮箱</strong> | /^([a-z0-9_.-]+)@([-z.-]+).([a-z.]{2,6})<span class="math inline">\(/&lt;br/&gt;/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+\)</span>/ |<br />
                    <strong>URL</strong> | /^(https?://)?([-z.-]+).([a-z.]{2,6})([/.-]<em>)</em>/?$/ |<br />
              <strong>HTML 标签</strong> | /^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt; |<br />
         <strong>删除代码\注释</strong> | (?&lt;!http:|)//.*$ |<br />
<strong>Unicode编码中的汉字范围</strong> | /<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>+$/ |</div>
<h4 id="python-中常用的正则表达式处理函数">Python 中常用的正则表达式处理函数</h4>
<h5 id="re.match函数">re.match函数：</h5>
<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<p>函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pattern</td>
<td style="text-align: left;">匹配的正则表达式</td>
</tr>
<tr class="even">
<td style="text-align: left;">string</td>
<td style="text-align: left;">要匹配的字符串。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">flags</td>
<td style="text-align: left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody>
</table>
<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">匹配对象方法</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">group(num=0)</td>
<td style="text-align: left;">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr class="even">
<td style="text-align: left;">groups()</td>
<td style="text-align: left;">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody>
</table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">print(re.match(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.match(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>))         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>
<p>以上实例输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">None</span><br></pre></td></tr></table></figure>
<h5 id="re.search方法"><strong>re.search方法：</strong></h5>
<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>函数语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>函数参数说明：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pattern</td>
<td style="text-align: left;">匹配的正则表达式</td>
</tr>
<tr class="even">
<td style="text-align: left;">string</td>
<td style="text-align: left;">要匹配的字符串。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">flags</td>
<td style="text-align: left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody>
</table>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">匹配对象方法</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">group(num=0)</td>
<td style="text-align: left;">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr class="even">
<td style="text-align: left;">groups()</td>
<td style="text-align: left;">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody>
</table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">print(re.search(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.search(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>
<p>以上实例运行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">(11, 14)</span><br></pre></td></tr></table></figure>
<h5 id="re.match与re.search的区别">re.match与re.search的区别：</h5>
<p>re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None，而 re.search 匹配整个字符串，直到找到一个匹配。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.match( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">matchObj = re.search( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>以上实例运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No match!!</span><br><span class="line">search --&gt; matchObj.group() :  dogs</span><br></pre></td></tr></table></figure>
<h5 id="检索和替换">检索和替换</h5>
<p>Python 的re模块提供了re.sub用于替换字符串中的匹配项。</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
<li>flags : 编译时用的匹配模式，数字形式。</li>
</ul>
<p>前三个为必选参数，后两个为可选参数。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个电话号码&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除注释</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 移除非数字的内容</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br></pre></td></tr></table></figure>
<p>以上实例执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">电话号码 :  <span class="number">2004</span><span class="number">-959</span><span class="number">-559</span> </span><br><span class="line">电话号码 :  <span class="number">2004959559</span></span><br></pre></td></tr></table></figure>
<p>若 repl 参数是一个函数：以下实例中将字符串中的匹配的数字乘于 2</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘于 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">matched</span>):</span></span><br><span class="line">    value = int(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> str(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line">print(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))</span><br></pre></td></tr></table></figure>
<p>执行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A46G8HFD1134</span><br></pre></td></tr></table></figure>
<h5 id="compile-函数">compile 函数</h5>
<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<p>语法格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(pattern[, flags])</span><br></pre></td></tr></table></figure>
<ul>
<li>pattern : 一个字符串形式的正则表达式</li>
<li>flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</li>
<li><ul>
<li><p>re.I 忽略大小写</p></li>
<li><p>re.L 表示特殊字符集 , ,  , , 依赖于当前环境</p></li>
<li><p>re.M 多行模式</p></li>
<li><p>re.S 即为' . '并且包括换行符在内的任意字符（' . '不包括换行符）</p></li>
<li><p>re.U 表示特殊字符集 , ,  ,  , , 依赖于 Unicode 字符属性数据库</p></li>
<li><p>re.X 为了增加可读性，忽略空格和' # '后面的注释</p></li>
</ul></li>
</ul>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r&#x27;\d+&#x27;</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;e&#x27;的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;1&#x27;的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )                                        <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>
<ul>
<li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li>
<li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li>
<li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>
<li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li>
</ul>
<h5 id="findall函数"><strong>findall函数</strong>：</h5>
<p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p>
<p><strong>注意：</strong> match 和 search 是匹配一次 findall 匹配所有。</p>
<p>语法格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li><strong>string</strong> 待匹配的字符串。</li>
<li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li>
<li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>
</ul>
<p>查找字符串中的所有数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r&#x27;\d+&#x27;</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">&#x27;run88oob123google456&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure>
<h5 id="re.finditer"><strong>re.finditer</strong></h5>
<p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pattern</td>
<td style="text-align: left;">匹配的正则表达式</td>
</tr>
<tr class="even">
<td style="text-align: left;">string</td>
<td style="text-align: left;">要匹配的字符串。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">flags</td>
<td style="text-align: left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;12a32bc43jf3&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> it: </span><br><span class="line">    <span class="keyword">print</span> (match.group() )</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">32</span> </span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h5 id="re.split"><strong>re.split</strong></h5>
<p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pattern</td>
<td style="text-align: left;">匹配的正则表达式</td>
</tr>
<tr class="even">
<td style="text-align: left;">string</td>
<td style="text-align: left;">要匹配的字符串。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">maxsplit</td>
<td style="text-align: left;">分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</td>
</tr>
<tr class="even">
<td style="text-align: left;">flags</td>
<td style="text-align: left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;(\W+)&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>, <span class="number">1</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;a*&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>)   <span class="comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span></span><br><span class="line">[<span class="string">&#x27;hello world&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="正则表达式对象">正则表达式对象</h5>
<p><strong>re.RegexObject</strong></p>
<p>re.compile() 返回 RegexObject 对象。</p>
<p><strong>re.MatchObject</strong></p>
<p>group() 返回被 RE 匹配的字符串。</p>
<ul>
<li><strong>start()</strong> 返回匹配开始的位置</li>
<li><strong>end()</strong> 返回匹配结束的位置</li>
<li><strong>span()</strong> 返回一个元组包含匹配 (开始,结束) 的位置</li>
</ul>
<h5 id="正则表达式修饰符---可选标志">正则表达式修饰符 - 可选标志</h5>
<p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">修饰符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">re.I</td>
<td style="text-align: left;">使匹配对大小写不敏感</td>
</tr>
<tr class="even">
<td style="text-align: left;">re.L</td>
<td style="text-align: left;">做本地化识别（locale-aware）匹配</td>
</tr>
<tr class="odd">
<td style="text-align: left;">re.M</td>
<td style="text-align: left;">多行匹配，影响 ^ 和 $</td>
</tr>
<tr class="even">
<td style="text-align: left;">re.S</td>
<td style="text-align: left;">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">re.U</td>
<td style="text-align: left;">根据Unicode字符集解析字符。这个标志影响 , ,  .</td>
</tr>
<tr class="even">
<td style="text-align: left;">re.X</td>
<td style="text-align: left;">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody>
</table>
<h5 id="正则表达式模式">正则表达式模式</h5>
<p>模式字符串使用特殊的语法来表示一个正则表达式：</p>
<p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p>
<p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p>
<p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p>
<p>反斜杠本身需要使用反斜杠转义。</p>
<p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 <strong>r'</strong>，等价于 <strong>\t</strong> )匹配相应的特殊字符。</p>
<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">模式</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">^</td>
<td style="text-align: left;">匹配字符串的开头</td>
</tr>
<tr class="even">
<td style="text-align: left;">$</td>
<td style="text-align: left;">匹配字符串的末尾。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">.</td>
<td style="text-align: left;">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr class="even">
<td style="text-align: left;">[...]</td>
<td style="text-align: left;">用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'</td>
</tr>
<tr class="odd">
<td style="text-align: left;">[^...]</td>
<td style="text-align: left;">不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr class="even">
<td style="text-align: left;">re*</td>
<td style="text-align: left;">匹配0个或多个的表达式。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">re+</td>
<td style="text-align: left;">匹配1个或多个的表达式。</td>
</tr>
<tr class="even">
<td style="text-align: left;">re?</td>
<td style="text-align: left;">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr class="odd">
<td style="text-align: left;">re{ n}</td>
<td style="text-align: left;">匹配n个前面表达式。例如，"o{2}"不能匹配"Bob"中的"o"，但是能匹配"food"中的两个o。</td>
</tr>
<tr class="even">
<td style="text-align: left;">re{ n,}</td>
<td style="text-align: left;">精确匹配n个前面表达式。例如，"o{2,}"不能匹配"Bob"中的"o"，但能匹配"foooood"中的所有o。"o{1,}"等价于"o+"。"o{0,}"则等价于"o*"。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">re{ n, m}</td>
<td style="text-align: left;">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr class="even">
<td style="text-align: left;">a| b</td>
<td style="text-align: left;">匹配a或b</td>
</tr>
<tr class="odd">
<td style="text-align: left;">(re)</td>
<td style="text-align: left;">匹配括号内的表达式，也表示一个组</td>
</tr>
<tr class="even">
<td style="text-align: left;">(?imx)</td>
<td style="text-align: left;">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">(?-imx)</td>
<td style="text-align: left;">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr class="even">
<td style="text-align: left;">(?: re)</td>
<td style="text-align: left;">类似 (...), 但是不表示一个组</td>
</tr>
<tr class="odd">
<td style="text-align: left;">(?imx: re)</td>
<td style="text-align: left;">在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr class="even">
<td style="text-align: left;">(?-imx: re)</td>
<td style="text-align: left;">在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr class="odd">
<td style="text-align: left;">(?#...)</td>
<td style="text-align: left;">注释.</td>
</tr>
<tr class="even">
<td style="text-align: left;">(?= re)</td>
<td style="text-align: left;">前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">(?! re)</td>
<td style="text-align: left;">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。</td>
</tr>
<tr class="even">
<td style="text-align: left;">(?&gt; re)</td>
<td style="text-align: left;">匹配的独立模式，省去回溯。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配数字字母下划线</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配非数字字母下划线</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任意空白字符，等价于 [。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任意非空字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;"> 匹配任意数字，等价于 [0-9]。</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任意非数字</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配字符串开始</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配字符串结束</td>
</tr>
<tr class="even">
<td style="text-align: left;"> 匹配最后匹配完成的位置。</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"> 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配非单词边界。'er' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">,  等。</td>
<td style="text-align: left;">匹配一个换行符。匹配一个制表符, 等</td>
</tr>
<tr class="even">
<td style="text-align: left;">\1...\9</td>
<td style="text-align: left;">匹配第n个分组的内容。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\10</td>
<td style="text-align: left;">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody>
</table>
<h5 id="正则表达式实例">正则表达式实例</h5>
<h6 id="字符匹配">字符匹配</h6>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">实例</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">python</td>
<td style="text-align: left;">匹配 "python".</td>
</tr>
</tbody>
</table>
<h6 id="字符类">字符类</h6>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">实例</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">[Pp]ython</td>
<td style="text-align: left;">匹配 "Python" 或 "python"</td>
</tr>
<tr class="even">
<td style="text-align: left;">rub[ye]</td>
<td style="text-align: left;">匹配 "ruby" 或 "rube"</td>
</tr>
<tr class="odd">
<td style="text-align: left;">[aeiou]</td>
<td style="text-align: left;">匹配中括号内的任意一个字母</td>
</tr>
<tr class="even">
<td style="text-align: left;">[0-9]</td>
<td style="text-align: left;">匹配任何数字。类似于 [0123456789]</td>
</tr>
<tr class="odd">
<td style="text-align: left;">[a-z]</td>
<td style="text-align: left;">匹配任何小写字母</td>
</tr>
<tr class="even">
<td style="text-align: left;">[A-Z]</td>
<td style="text-align: left;">匹配任何大写字母</td>
</tr>
<tr class="odd">
<td style="text-align: left;">[a-zA-Z0-9]</td>
<td style="text-align: left;">匹配任何字母及数字</td>
</tr>
<tr class="even">
<td style="text-align: left;">[^aeiou]</td>
<td style="text-align: left;">除了aeiou字母以外的所有字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">[^0-9]</td>
<td style="text-align: left;">匹配除了数字外的字符</td>
</tr>
</tbody>
</table>
<h6 id="特殊字符类">特殊字符类</h6>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">实例</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">.</td>
<td style="text-align: left;">匹配除 "" 之外的任何单个字符。要匹配包括 '' 在内的任何字符，请使用象 '[.]' 的模式。</td>
</tr>
<tr class="even">
<td style="text-align: left;"> 匹配一个数字字符。等价于 [0-9]。</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ 。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任何非空白字符。等价于 [^ 。</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td>
</tr>
</tbody>
</table>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>a-z0-9_-<a href="#fnref1" class="footnote-back" role="doc-backlink">↩</a></p></li>
<li id="fn2" role="doc-endnote"><p>a-z0-9_-<a href="#fnref2" class="footnote-back" role="doc-backlink">↩</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="#fnref3" class="footnote-back" role="doc-backlink">↩</a></p></li>
</ol>
</section>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf配置文件详解</title>
    <url>/p/How-to-configure-nginx-conf/</url>
    <content><![CDATA[<p>本文主要介绍了nginx的配置文件。</p>
<p><strong>摘要：</strong>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。main 部分设置的指令影响其他所有部分的设置；server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p>
<p><strong>关键词：</strong>Nginx</p>
<a id="more"></a>
<p>当前 nginx 支持的几个指令上下文()：</p>
<h4 id="nginx.conf-配置文件">nginx.conf 配置文件</h4>
<hr />
<p>下面是 nginx.conf 详细的配置文件介绍（<strong>以下配置参数很多时候并不一定用的到，只是作为配置参数说明参考，可以看下面的通用版介绍</strong>）</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span> www www; </span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，通常设置成和cpu的数量相等</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数+进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span></span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#keepalive 超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">128k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;    <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;    <span class="comment">#压缩缓冲区</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;     <span class="comment">#压缩等级</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    <span class="attribute">upstream</span> piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.121:80</span> weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.122:80</span> weight=<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.123:80</span> weight=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server server1;</span></span><br><span class="line">        <span class="comment">#    server server2;</span></span><br><span class="line">        <span class="comment">#    fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server squid1:3128;</span></span><br><span class="line">        <span class="comment">#    server squid2:3128;</span></span><br><span class="line">        <span class="comment">#    hash $request_uri;</span></span><br><span class="line">        <span class="comment">#    hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        <span class="attribute">server_name</span> www.jd.com jd.com;</span><br><span class="line">        <span class="comment">#默认入口文件名称</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span> /data/www/jd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">            <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        <span class="attribute">log_format</span> access <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; <span class="variable">$http_x_forwarded_for</span>&#x27;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.<span class="number">404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#对 &quot;/connect-controller&quot; 启用反向代理</span></span><br><span class="line">        <span class="attribute">location</span> /connect-controller &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:88; <span class="comment">#请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>screw_system项目文档</title>
    <url>/p/screw_system-project-documentation/</url>
    <content><![CDATA[<p><strong>关键词</strong>：Python，screw</p>
<a id="more"></a>
<h3 id="qt相关">Qt相关</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mainDialog</span>(<span class="params">QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=None</span>):</span></span><br><span class="line">        super(mainDialog, self).__init__(parent)</span><br><span class="line">        self.label_logo = QLabel()</span><br><span class="line">        self.label_task_step = QLabel()</span><br><span class="line">        self.btn_create = QPushButton(<span class="string">&quot;编辑任务&quot;</span>, self)</span><br><span class="line">        self.btn_display = QPushButton(<span class="string">&quot; 工作台 &quot;</span>, self)</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 设置窗口标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置对象名</span></span><br><span class="line">        self.setObjectName(<span class="string">&quot;initWindow&quot;</span>)</span><br><span class="line">        <span class="comment"># 自定义前景色和背景色</span></span><br><span class="line">        self.setStyleSheet(<span class="string">&quot;#initWindow&#123;background-color: &quot;</span> + config.get(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        main_x = CREATE_X*<span class="number">2</span></span><br><span class="line">        main_y = CREATE_Y*<span class="number">2</span></span><br><span class="line">        <span class="comment"># 顶端页面</span></span><br><span class="line">        icon = QPixmap()</span><br><span class="line">        <span class="comment"># 读取base64图片</span></span><br><span class="line">        icon.loadFromData(danfoss_logo_data)</span><br><span class="line">        <span class="comment"># 设置图片缩放</span></span><br><span class="line">        danfoss_logo = icon.scaled(main_x * <span class="number">0.25</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 在QLabel上显示图片</span></span><br><span class="line">        self.label_logo.setPixmap(danfoss_logo)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># danfoss_logo = QtGui.QPixmap(&#x27;logo_2.png&#x27;).scaled(screen_height * 0.25, screen_height * 0.06)</span></span><br><span class="line">        <span class="comment"># self.label_logo.setPixmap(danfoss_logo)</span></span><br><span class="line">        <span class="comment"># 设置小部件的宽度和高度</span></span><br><span class="line">        self.label_logo.setFixedSize(main_x * <span class="number">0.25</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 设置空间文字</span></span><br><span class="line">        self.label_task_step.setText(<span class="string">&#x27;欢迎来到智能螺丝刀系统&#x27;</span>)</span><br><span class="line">        <span class="comment"># 自定义QLabel部件的宽度和高度</span></span><br><span class="line">        self.label_task_step.setFixedSize(main_x * <span class="number">0.75</span>, main_y * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># 自定义QLabel的样式</span></span><br><span class="line">        self.label_task_step.setStyleSheet(STYLE_TITLE_TOP)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置QPushButton的宽度和高度</span></span><br><span class="line">        self.btn_create.setFixedSize(main_x/<span class="number">2</span>, main_y)</span><br><span class="line">        <span class="comment"># 设置QPushButton的样式表</span></span><br><span class="line">        self.btn_create.setStyleSheet(STYLE_MAIN_BTN)</span><br><span class="line">        <span class="comment"># 绑定open_createUI()函数</span></span><br><span class="line">        self.btn_create.clicked.connect(self.open_createUI)</span><br><span class="line">        <span class="comment"># 设置QPushButton的宽度和高度</span></span><br><span class="line">        self.btn_display.setFixedSize(main_x/<span class="number">2</span>, main_y)</span><br><span class="line">        <span class="comment"># 设置QPushButton的样式表</span></span><br><span class="line">        self.btn_display.setStyleSheet(STYLE_MAIN_BTN)</span><br><span class="line">        <span class="comment"># 绑定open_mainUI()函数</span></span><br><span class="line">        self.btn_display.clicked.connect(self.open_mainUI)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建水平布局hbox_btn</span></span><br><span class="line">        hbox_btn = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置默认的外边框边距为0</span></span><br><span class="line">        hbox_btn.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 添加编辑任务按钮</span></span><br><span class="line">        hbox_btn.addWidget(self.btn_create)</span><br><span class="line">        <span class="comment"># 添加工作台按钮</span></span><br><span class="line">        hbox_btn.addWidget(self.btn_display)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建水平布局</span></span><br><span class="line">        hbox_top = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置四周边框</span></span><br><span class="line">        hbox_top.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把QLabel添加到水平布局hbox_top</span></span><br><span class="line">        hbox_top.addWidget(self.label_task_step)</span><br><span class="line">        <span class="comment"># 创建一个空框</span></span><br><span class="line">        hbox_top.addSpacing(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把QLabel添加到水平布局hbox_top</span></span><br><span class="line">        hbox_top.addWidget(self.label_logo)</span><br><span class="line">        <span class="comment"># 创建一个垂直布局vbox</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        <span class="comment"># 把水平布局hbox_top添加到垂直布局vbox</span></span><br><span class="line">        vbox.addLayout(hbox_top)</span><br><span class="line">        <span class="comment"># 把水平布局hbox_btn添加到垂直布局vbox</span></span><br><span class="line">        vbox.addLayout(hbox_btn)</span><br><span class="line">        <span class="comment"># 把垂直布局vbox添加到QDialog</span></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 设置无边框窗口样式</span></span><br><span class="line">        <span class="comment"># self.setWindowFlags(Qt.FramelessWindowHint)</span></span><br><span class="line">        <span class="comment"># 从屏幕上((screen_width - main_x) / 2, (screen_height - main_y) / 2))位置开始, 显示一个(宽:main_x, 高:main_x) </span></span><br><span class="line">        self.setGeometry((screen_width - main_x) / <span class="number">2</span>,</span><br><span class="line">                         (screen_height - main_y) / <span class="number">2</span>,</span><br><span class="line">                         main_x,</span><br><span class="line">                         main_y)</span><br><span class="line">        <span class="comment"># 非模态对话框</span></span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_createUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.create_window = createUI.EditorWindow()</span><br><span class="line">        self.create_window.showFullScreen()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_mainUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.create_window = mainUI.MainWindow()</span><br><span class="line">        self.create_window.showFullScreen()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="createui.py">createUI.py</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint, QMetaObject</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QPixmap, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QWidget, QApplication, QLabel, QLineEdit, QTableWidget, \</span><br><span class="line">    QAbstractItemView, QTableWidgetItem, QFileDialog, QMessageBox, QHeaderView, QTextEdit, QVBoxLayout, QHBoxLayout, \</span><br><span class="line">    QGridLayout</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> py_MySQL</span><br><span class="line"><span class="keyword">from</span> display <span class="keyword">import</span> importStepDialog</span><br><span class="line"><span class="keyword">from</span> display.config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;table.csv&quot;</span></span><br><span class="line"></span><br><span class="line">coordinate_x = [<span class="number">0</span>] * eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line">coordinate_y = [<span class="number">0</span>] * eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line"></span><br><span class="line">current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))):</span><br><span class="line">    table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggableButton</span>(<span class="params">QPushButton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, parent</span>):</span></span><br><span class="line">        super().__init__(title, parent)</span><br><span class="line">        self.iniDragCor = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        self.num = int(title)</span><br><span class="line">        <span class="comment"># print(self.num)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="comment"># print(&quot;click&quot;, e.pos())</span></span><br><span class="line">        self.iniDragCor[<span class="number">0</span>] = e.x()</span><br><span class="line">        self.iniDragCor[<span class="number">1</span>] = e.y()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        x = e.x() - self.iniDragCor[<span class="number">0</span>]</span><br><span class="line">        y = e.y() - self.iniDragCor[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        cor = QPoint(x, y)</span><br><span class="line">        self.move(self.mapToParent(cor))  <span class="comment"># 需要mapToParent一下才可以的,否则只是相对位置。</span></span><br><span class="line">        <span class="comment"># print(&#x27;drag button event,&#x27;, time.time(), e.pos(), e.x(), e.y())</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line">        coordinate_x[self.num - <span class="number">1</span>] = self.geometry().x()</span><br><span class="line">        coordinate_y[self.num - <span class="number">1</span>] = self.geometry().y()</span><br><span class="line">        self.setText(str(self.num))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">1</span>] = self.num</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">6</span>] = coordinate_x[self.num - <span class="number">1</span>]</span><br><span class="line">        table[self.num - <span class="number">1</span>][<span class="number">7</span>] = coordinate_y[self.num - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def getDialogSignal(self, connect):</span></span><br><span class="line">    <span class="comment">#     # screw = list(str(self.num))</span></span><br><span class="line">    <span class="comment">#     screw = connect.split(&#x27;,&#x27;)</span></span><br><span class="line">    <span class="comment">#     # screw = screw + data</span></span><br><span class="line">    <span class="comment">#     table[self.num - 1][1] = screw[0]</span></span><br><span class="line">    <span class="comment">#     table[self.num - 1][2] = screw[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditorWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        <span class="comment"># 按钮样式</span></span><br><span class="line">        self.table_widget = QTableWidget(self)</span><br><span class="line">        self.btn_open = QPushButton(<span class="string">&quot;新建步骤&quot;</span>, self)</span><br><span class="line">        self.btn_import = QPushButton(<span class="string">&quot;导入步骤&quot;</span>, self)</span><br><span class="line">        self.btn_change_pic = QPushButton(<span class="string">&quot;修改图片&quot;</span>, self)</span><br><span class="line">        self.label_code = QLabel(<span class="string">&quot;电子条形码:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_code</span></span><br><span class="line">        self.edit_code = QLineEdit(self)</span><br><span class="line">        self.label_product = QLabel(<span class="string">&quot;产品:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_product</span></span><br><span class="line">        self.edit_product = QLineEdit(self)</span><br><span class="line">        self.label_task = QLabel(<span class="string">&quot;任务:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_product</span></span><br><span class="line">        self.edit_task = QLineEdit(self)</span><br><span class="line">        self.label_step = QLabel(<span class="string">&quot;步骤:&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 创建文本输入栏 edit_step</span></span><br><span class="line">        self.edit_step = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_del_step = QPushButton(&quot;删除步骤&quot;, self)</span></span><br><span class="line">        self.btn_save = QPushButton(<span class="string">&quot;保存步骤&quot;</span>, self)</span><br><span class="line">        self.btn_exit = QPushButton(<span class="string">&quot;  退出  &quot;</span>, self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.label_top = QLabel(self)</span></span><br><span class="line">        <span class="comment"># 创建多行文本框控件textedit_keypoint, textedit_sequence</span></span><br><span class="line">        self.textedit_keypoint = QTextEdit(self)</span><br><span class="line">        self.textedit_sequence = QTextEdit(self)</span><br><span class="line">        <span class="comment"># 创建QLabel:label_keypoint_title</span></span><br><span class="line">        self.label_keypoint_title = QLabel(self)</span><br><span class="line">        <span class="comment"># 创建QLabel:label_sequence_title</span></span><br><span class="line">        self.label_sequence_title = QLabel(self)</span><br><span class="line">        </span><br><span class="line">        self.label_pic = QLabel(self)</span><br><span class="line"></span><br><span class="line">        self.codes = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># returnPressed：按下返回或者回车时会发送此信号</span></span><br><span class="line">        self.edit_code.returnPressed.connect(self.edit_code_add)</span><br><span class="line">        <span class="comment"># self.cb_base_mode = QCheckBox(&quot;精简模式&quot;, self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 顶部的红色背景</span></span><br><span class="line">        self.label_tips = QLabel(self)</span><br><span class="line">        <span class="comment"># 顶部的Logo</span></span><br><span class="line">        self.label_logo = QLabel(self)</span><br><span class="line">        self.btn_refresh = QPushButton(<span class="string">&quot;刷新表格&quot;</span>, self)</span><br><span class="line">        self.btn_del_screw = QPushButton(<span class="string">&quot;删除螺丝&quot;</span>, self)</span><br><span class="line">        self.list_task_sequence = []  <span class="comment"># task_sequence 表格数据</span></span><br><span class="line">        <span class="comment"># self.list_draggable_button = []  # 单个页面中的按钮</span></span><br><span class="line">        self.tasks_table = <span class="literal">None</span></span><br><span class="line">        self.task_sequence = <span class="literal">None</span></span><br><span class="line">        self.step, self.img, self.codes = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.product, self.task, self.step = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.keypoint, self.sequence = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.mac_address = self.get_mac_address()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.list_draggable_button = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;新建任务&quot;</span>)</span><br><span class="line">        self.setObjectName(<span class="string">&quot;EditorWindow&quot;</span>)</span><br><span class="line">        self.setStyleSheet(<span class="string">&quot;#EditorWindow&#123;background-color: &quot;</span> + config.get(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;BACKGROUND_COLOR&quot;</span>) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="comment"># screen = QDesktopWidget().screenGeometry()</span></span><br><span class="line">        <span class="comment"># 手动设置全屏</span></span><br><span class="line">        self.setGeometry(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height)</span><br><span class="line">        <span class="comment"># 设置字体字号</span></span><br><span class="line">        self.font_label = QtGui.QFont()</span><br><span class="line">        self.font_label.setFamily(<span class="string">&quot;黑体&quot;</span>)  <span class="comment"># 括号里可以设置成自己想要的其它字体</span></span><br><span class="line">        <span class="comment"># 获得字体大小</span></span><br><span class="line">        pointsize = self.font_label.pointSize()</span><br><span class="line">        <span class="comment"># 设置字体像素大小</span></span><br><span class="line">        self.font_label.setPixelSize(pointsize * screen_width / <span class="number">1920</span> * <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 顶端页面</span></span><br><span class="line">        icon = QPixmap()</span><br><span class="line">        <span class="comment"># 读取base64照片</span></span><br><span class="line">        icon.loadFromData(danfoss_logo_data)</span><br><span class="line">        <span class="comment"># 设置图片缩放</span></span><br><span class="line">        danfoss_logo = icon.scaled(screen_height * <span class="number">0.25</span>, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        self.label_logo.setPixmap(danfoss_logo)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># danfoss_logo = QtGui.QPixmap(&#x27;logo_2.png&#x27;).scaled(screen_height * 0.25, screen_height * 0.06)</span></span><br><span class="line">        <span class="comment"># 固定窗口大小</span></span><br><span class="line">        self.label_logo.setFixedSize(screen_height * <span class="number">0.25</span>, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        <span class="comment"># self.label_task_step.setText(</span></span><br><span class="line">        <span class="comment">#     &quot;    工位:&quot; + self.station + &quot;    产品:&quot; + self.product + &quot;    任务:&quot; + self.task + &quot;   步骤：&quot; + str(</span></span><br><span class="line">        <span class="comment">#         self.stepNo + 1))</span></span><br><span class="line">        self.label_tips.setFixedSize(screen_width, screen_height * <span class="number">0.06</span>)</span><br><span class="line">        self.label_tips.setStyleSheet(STYLE_TITLE_TOP)</span><br><span class="line">        <span class="comment"># self.label_task_step.setFont(font_label)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 垂直布局</span></span><br><span class="line">        vbox_btn = QVBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        vbox_btn.setContentsMargins(margin_x, margin_y * <span class="number">1.5</span>, margin_x * <span class="number">0.8</span>, margin_y * <span class="number">4.8</span>)</span><br><span class="line">        <span class="comment"># 按比例分配剩余空间</span></span><br><span class="line">        <span class="comment"># vbox_btn.addStretch(1)</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_open)</span><br><span class="line">        vbox_btn.addWidget(self.btn_import)</span><br><span class="line">        vbox_btn.addWidget(self.btn_change_pic)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">5</span>)</span><br><span class="line">        vbox_btn.addWidget(self.label_code)</span><br><span class="line">        vbox_btn.addWidget(self.edit_code)</span><br><span class="line">        vbox_btn.addWidget(self.label_product)</span><br><span class="line">        vbox_btn.addWidget(self.edit_product)</span><br><span class="line">        vbox_btn.addWidget(self.label_task)</span><br><span class="line">        vbox_btn.addWidget(self.edit_task)</span><br><span class="line">        vbox_btn.addWidget(self.label_step)</span><br><span class="line">        vbox_btn.addWidget(self.edit_step)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># vbox_btn.addWidget(self.cb_base_mode)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除螺丝按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_del_screw)</span><br><span class="line">        <span class="comment"># 刷新表格按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_refresh)</span><br><span class="line">        vbox_btn.addStretch(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 保存步骤按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_save)</span><br><span class="line">        <span class="comment"># 退出按钮</span></span><br><span class="line">        vbox_btn.addWidget(self.btn_exit)</span><br><span class="line">        <span class="comment"># vbox_btn.addStretch(5)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 操作要点</span></span><br><span class="line">        hbox_keypoint = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        hbox_keypoint.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_keypoint.addWidget(self.label_keypoint_title)</span><br><span class="line">        hbox_keypoint.setSpacing(<span class="number">0</span>)</span><br><span class="line">        hbox_keypoint.addWidget(self.textedit_keypoint)</span><br><span class="line">        <span class="comment"># 操作步骤</span></span><br><span class="line">        hbox_sequence = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 设置左侧、顶部、右侧和底部边距</span></span><br><span class="line">        hbox_sequence.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_sequence.addWidget(self.label_sequence_title)</span><br><span class="line">        hbox_sequence.setSpacing(<span class="number">0</span>)</span><br><span class="line">        hbox_sequence.addWidget(self.textedit_sequence)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 格栅布局grid</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        <span class="comment"># (0, 0)左上</span></span><br><span class="line">        grid.addWidget(self.label_pic, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># (1, 0)左下</span></span><br><span class="line">        grid.addLayout(hbox_keypoint, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># (0, 1)右上</span></span><br><span class="line">        grid.addWidget(self.table_widget, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># (0, 1)右下</span></span><br><span class="line">        grid.addLayout(hbox_sequence, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 控制各个控件之间的上下边距</span></span><br><span class="line">        grid.setSpacing(margin_x * <span class="number">0.5</span>)</span><br><span class="line">        grid.setContentsMargins(<span class="number">0</span>, margin_y, <span class="number">0</span>, margin_y * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        hbox_top = QHBoxLayout()</span><br><span class="line">        hbox_top.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_top.addWidget(self.label_tips)</span><br><span class="line">        hbox_top.addWidget(self.label_logo)</span><br><span class="line">        <span class="comment"># hbox_top.addStretch(1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># hbox_top.addWidget(self.label_tips)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左右布局QHBoxLayout</span></span><br><span class="line">        hbox_main = QHBoxLayout()</span><br><span class="line">        hbox_main.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        hbox_main.addLayout(vbox_btn)</span><br><span class="line">        hbox_main.addLayout(grid)</span><br><span class="line">        hbox_main.addStretch(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上下布局QHBoxLayout</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addLayout(hbox_top)</span><br><span class="line"></span><br><span class="line">        vbox.addLayout(hbox_main)</span><br><span class="line">        <span class="comment"># vbox.addStretch(10)</span></span><br><span class="line">        vbox.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左侧按钮(vbox1)</span></span><br><span class="line"></span><br><span class="line">        self.btn_open.clicked.connect(self.open_pic)</span><br><span class="line">        self.btn_open.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_open.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.btn_import.clicked.connect(self.import_step)</span><br><span class="line">        self.btn_import.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_import.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.btn_change_pic.clicked.connect(self.change_pic)</span><br><span class="line">        self.btn_change_pic.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_change_pic.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        self.label_code.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_code.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_product.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_product.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_task.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_task.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line">        self.label_step.setStyleSheet(STYLE_TEXT)</span><br><span class="line">        self.edit_step.setFixedSize(BTN_WIDTH, BTN_HEIGHT*<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.cb_base_mode.move(10, 700)</span></span><br><span class="line">        <span class="comment"># self.cb_base_mode.setStyleSheet(</span></span><br><span class="line">        <span class="comment">#     &quot;QCheckBox&#123;color:rgba(251,178,23,255);border-width: &quot;</span></span><br><span class="line">        <span class="comment">#     &quot;1px;border-radius: 10px;&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># self.cb_base_mode.setFont(self.font_btn)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_save.move(20, 830)</span></span><br><span class="line">        self.btn_save.clicked.connect(self.save)</span><br><span class="line">        self.btn_save.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_save.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_exit.move(20, 890)</span></span><br><span class="line">        self.btn_exit.clicked.connect(self.exit)</span><br><span class="line">        self.btn_exit.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_exit.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_refresh.move(self.screen.width() - 150, 20)</span></span><br><span class="line">        self.btn_refresh.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line">        self.btn_refresh.clicked.connect(self.refresh)</span><br><span class="line">        self.btn_refresh.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.btn_del_screw.move(self.screen.width() - 300, 20)</span></span><br><span class="line">        self.btn_del_screw.clicked.connect(self.del_row)</span><br><span class="line">        self.btn_del_screw.setStyleSheet(STYLE_STANDARD_BTN)</span><br><span class="line">        self.btn_del_screw.setFixedSize(BTN_WIDTH, BTN_HEIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 图片显示框</span></span><br><span class="line">        self.label_pic.setText(<span class="string">&quot;    请点击新建步骤&quot;</span>)</span><br><span class="line">        self.label_pic.setFixedSize(PICSIZE_WIDTH, PICSIZE_HEIGHT)</span><br><span class="line">        self.label_pic.setStyleSheet(STYLE_LABEL_TEXT)</span><br><span class="line">        <span class="comment"># 右侧表格</span></span><br><span class="line"></span><br><span class="line">        self.row_flag = <span class="number">-1</span>  <span class="comment"># 当前被选中的行索引</span></span><br><span class="line">        self.result = []</span><br><span class="line"></span><br><span class="line">        self.table_widget.setColumnCount((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>))))</span><br><span class="line">        self.table_widget.setRowCount(<span class="number">20</span>)</span><br><span class="line">        self.table_widget.setFixedHeight(TABLE_WIDGET_HEIGHT)</span><br><span class="line">        self.table_widget.setFixedWidth(TABLE_WIDGET_WIDTH)</span><br><span class="line">        self.table_widget.setSelectionBehavior(QAbstractItemView.SelectRows)  <span class="comment"># 设置表格的选取方式是行选取</span></span><br><span class="line">        self.table_widget.setSelectionMode(QAbstractItemView.SingleSelection)  <span class="comment"># 设置选取方式为单个选取</span></span><br><span class="line">        self.table_widget.setHorizontalHeaderLabels(</span><br><span class="line">            [<span class="string">&quot;步骤&quot;</span>, <span class="string">&quot;螺丝\n编号&quot;</span>, <span class="string">&quot;螺丝\n型号&quot;</span>, <span class="string">&quot;螺丝\n长度&quot;</span>, <span class="string">&quot;螺丝刀\n型号&quot;</span>, <span class="string">&quot;标准\n扭矩&quot;</span>, <span class="string">&quot;坐标x&quot;</span>, <span class="string">&quot;坐标y&quot;</span>])  <span class="comment"># 设置行表头</span></span><br><span class="line">        self.table_widget.horizontalHeader().setStyleSheet(STYLE_TABLE)</span><br><span class="line">        self.table_widget.verticalHeader().setVisible(<span class="literal">False</span>)  <span class="comment"># 隐藏列表头</span></span><br><span class="line">        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.table_widget.itemSelectionChanged.connect(self.chioce)  <span class="comment"># 单元格选择改变</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.table_widget.cellChanged.connect(self.save_edit_item)  <span class="comment"># 连接信号槽</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.create_draggable_button()</span><br><span class="line">        <span class="comment"># 左下文字框</span></span><br><span class="line">        self.textedit_keypoint.setText(<span class="string">&#x27;单击此处添加keypoint&#x27;</span>)</span><br><span class="line">        self.textedit_keypoint.setFixedSize(TEXTEDIT_KEYPOINT_WIDTH, TEXTEDIT_KEYPOINT_HEIGHT)</span><br><span class="line">        <span class="comment"># self.textedit_keypoint.setStyleSheet(STYLE_TEXT_WHITE)</span></span><br><span class="line">        self.textedit_keypoint.setFont(self.font_label)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左下文字框标题</span></span><br><span class="line">        self.label_keypoint_title.setFixedSize(LABEL_TITLE_WIDTH, TEXTEDIT_KEYPOINT_HEIGHT)</span><br><span class="line">        self.label_keypoint_title.setStyleSheet(STYLE_TITLE)</span><br><span class="line">        self.label_keypoint_title.setText(<span class="string">&quot;操\n\n作\n\n要\n\n点&quot;</span>)</span><br><span class="line">        self.label_keypoint_title.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 右下文字框</span></span><br><span class="line">        self.textedit_sequence.setText(<span class="string">&#x27;单击此处添加sequence&#x27;</span>)</span><br><span class="line">        self.textedit_sequence.setFixedSize(TEXTEDIT_SEQUENCE_WIDTH, TEXTEDIT_SEQUENCE_HEIGHT)</span><br><span class="line">        <span class="comment"># self.textedit_sequence.setStyleSheet(STYLE_TEXT_WHITE)</span></span><br><span class="line">        self.textedit_sequence.setFont(self.font_label)</span><br><span class="line">        <span class="comment"># 右下文字框标题</span></span><br><span class="line">        self.label_sequence_title.setFixedSize(LABEL_TITLE_WIDTH, TEXTEDIT_SEQUENCE_HEIGHT)</span><br><span class="line">        self.label_sequence_title.setStyleSheet(STYLE_TITLE)</span><br><span class="line">        self.label_sequence_title.setText(<span class="string">&quot;操\n\n作\n\n步\n\n骤&quot;</span>)</span><br><span class="line">        self.label_sequence_title.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        QMetaObject.connectSlotsByName(self)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @pyqtSlot()</span></span><br><span class="line">    <span class="comment"># def on_keypoint_textChanged(self):</span></span><br><span class="line">    <span class="comment">#     # text = self.textedit_keypoint.toPlainText()</span></span><br><span class="line">    <span class="comment">#     # print(text)</span></span><br><span class="line">    <span class="comment">#     self.textedit_keypoint.setFont(self.font_label)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># @pyqtSlot()</span></span><br><span class="line">    <span class="comment"># def on_sequence_textChanged(self):</span></span><br><span class="line">    <span class="comment">#     # text = self.textedit_sequence.toPlainText()</span></span><br><span class="line">    <span class="comment">#     # print(text)</span></span><br><span class="line">    <span class="comment">#     self.textedit_sequence.setFont(self.font_label)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_draggable_button</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 动态推拽按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># button[i] = DraggableButton(str(i + 1), self)</span></span><br><span class="line">            self.list_draggable_button[i] = DraggableButton(str(i + <span class="number">1</span>), self)</span><br><span class="line"></span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setStyleSheet(STYLE_DRAGGABLE_BTN)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_pic</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初始化表格</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>)))):</span><br><span class="line">            table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">        self.edit_code.clear()</span><br><span class="line">        self.textedit_keypoint.clear()</span><br><span class="line">        self.textedit_sequence.clear()</span><br><span class="line">        self.table_widget.setRowCount(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        self.change_pic()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_pic</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        imgName, imgType = QFileDialog.getOpenFileName(self, <span class="string">&quot;打开图片&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;*.png;;*.jpg;;All Files(*)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 导入图片</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fp = open(imgName, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">            self.img = fp.read()</span><br><span class="line">            fp.close()</span><br><span class="line">            photo = QtGui.QPixmap(imgName).scaled(self.label_pic.width(), self.label_pic.height())</span><br><span class="line">            self.label_pic.setPixmap(photo)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;未选择图片！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">import_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.import_step_dialog = importStepDialog.ImportStepDialog()</span><br><span class="line">        self.import_step_dialog.mySignal2.connect(self.get_dialog_signal)</span><br><span class="line">        self.import_step_dialog.exec_()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_edit_item</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                <span class="keyword">if</span> self.table_widget.item(row, col):</span><br><span class="line">                    <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                    <span class="keyword">if</span> col == <span class="number">4</span>:</span><br><span class="line">                        <span class="comment"># 判断是否为整数</span></span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col).text().isdigit():</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;螺丝刀型号请输入整数！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                    <span class="keyword">elif</span> col == <span class="number">3</span> <span class="keyword">or</span> col == <span class="number">5</span>:</span><br><span class="line">                        <span class="comment"># 判断是否为小数</span></span><br><span class="line">                        <span class="keyword">if</span> re.compile(<span class="string">r&#x27;^[-+]?[-0-9]\d*\.\d*|[-+]?\.?[0-9]\d*$&#x27;</span>).match(</span><br><span class="line">                                self.table_widget.item(row, col).text()):</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;螺丝长度和标准扭矩请输入数字！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                    <span class="keyword">elif</span> col == <span class="number">2</span>:</span><br><span class="line">                        table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_row</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">&#x27;删除一行任务记录&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> self.row_flag == <span class="number">-1</span>:</span><br><span class="line">                QMessageBox.about(self, <span class="string">&#x27;提醒&#x27;</span>, <span class="string">&#x27;未选择要删除的行！&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.table_widget.removeRow(self.row_flag)  <span class="comment"># 删除指定行</span></span><br><span class="line"></span><br><span class="line">                self.row_flag = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                    <span class="keyword">if</span> self.table_widget.item(row, <span class="number">1</span>):</span><br><span class="line">                        self.table_widget.setItem(row, <span class="number">1</span>, QTableWidgetItem(str(row + <span class="number">1</span>)))</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col):</span><br><span class="line">                            table[row][col] = self.table_widget.item(row, col).text()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            table[row][col] = <span class="number">0</span></span><br><span class="line">                self.refresh()</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> range(self.table_show.__len__()):</span><br><span class="line">                    self.list_draggable_button[row].setGeometry(int(self.table_show[row][<span class="number">6</span>]),</span><br><span class="line">                                                                int(self.table_show[row][<span class="number">7</span>]),</span><br><span class="line">                                                                <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">                self.list_draggable_button[self.table_show.__len__()].setGeometry(BTN_WIDTH * <span class="number">0.5</span>,</span><br><span class="line">                                                                                  screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">                self.list_draggable_button[self.table_show.__len__()].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&#x27;删除后&#x27;</span>, self.table_show)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;删除螺丝钉失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chioce</span>(<span class="params">self</span>):</span>  <span class="comment"># 修改被选中的行索引</span></span><br><span class="line">        self.row_flag = self.table_widget.currentRow()</span><br><span class="line">        print(<span class="string">f&#x27;选中第<span class="subst">&#123;self.row_flag + <span class="number">1</span>&#125;</span>行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        self.table_show = []</span><br><span class="line">        <span class="comment"># self.stepID = self.edit_task.text() + SOP_SEPARATOR + self.edit_step.text().rjust(2, &#x27;0&#x27;)  # 整数补零&#x27;798&#x27;.rjust(32,&#x27;0&#x27;)</span></span><br><span class="line">        self.product, self.task, self.step = self.edit_product.text(), self.edit_task.text(), self.edit_step.text()  <span class="comment"># 整数补零&#x27;798&#x27;.rjust(32,&#x27;0&#x27;)</span></span><br><span class="line">        self.keypoint, self.sequence = self.textedit_keypoint.toPlainText(), self.textedit_sequence.toPlainText()</span><br><span class="line">        self.table_widget.setRowCount(config.getint(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))</span><br><span class="line">        <span class="comment"># 表格展示数据(global table  -&gt; table_show  -&gt;  表格)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                <span class="keyword">if</span> str(table[row][<span class="number">1</span>]) == str(row + <span class="number">1</span>):</span><br><span class="line">                    table[row][<span class="number">0</span>] = str(self.step)</span><br><span class="line">                    self.table_show.append(table[row])</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                        temp = QTableWidgetItem(str(self.table_show[row][col]))</span><br><span class="line">                        <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == <span class="number">1</span> <span class="keyword">or</span> col == <span class="number">6</span> <span class="keyword">or</span> col == <span class="number">7</span>:</span><br><span class="line">                            temp.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)</span><br><span class="line"></span><br><span class="line">                        self.table_widget.setItem(row, col, temp)</span><br><span class="line">                        <span class="keyword">if</span> self.table_widget.item(row, col):  <span class="comment"># 设置颜色</span></span><br><span class="line">                            self.table_widget.item(row, col).setForeground(QBrush(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)))</span><br><span class="line">                            <span class="keyword">if</span> row % <span class="number">2</span>:</span><br><span class="line">                                self.table_widget.item(row, col).setBackground(QBrush(QColor(<span class="number">1</span>, <span class="number">77</span>, <span class="number">103</span>)))</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                self.table_widget.item(row, col).setBackground(QBrush(QColor(<span class="number">96</span>, <span class="number">143</span>, <span class="number">159</span>)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;刷新表格失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入步骤信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dialog_signal</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        <span class="comment"># 输入的步骤号</span></span><br><span class="line">        <span class="comment"># self.mydata = message</span></span><br><span class="line">        <span class="comment"># print(&#x27;mydata&#x27;, self.mydata)</span></span><br><span class="line">        <span class="comment"># self.task_list = self.mydata.split(&#x27;_&#x27;)[0].split(SOP_SEPARATOR)</span></span><br><span class="line">        self.product = message[<span class="string">&#x27;product&#x27;</span>]</span><br><span class="line">        self.task = message[<span class="string">&#x27;task&#x27;</span>]</span><br><span class="line">        self.step = message[<span class="string">&#x27;step&#x27;</span>]</span><br><span class="line">        <span class="comment"># self.product = self.task_list[0]</span></span><br><span class="line">        <span class="comment"># self.task = self.task_list[1] + SOP_SEPARATOR + self.task_list[2]</span></span><br><span class="line">        <span class="comment"># self.step = self.task_list[-1]</span></span><br><span class="line"></span><br><span class="line">        self.skilled = message[<span class="string">&#x27;skilled&#x27;</span>]</span><br><span class="line">        stepNo = self.step - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化按钮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>))), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.list_draggable_button[i].setGeometry(BTN_WIDTH * <span class="number">0.5</span>, screen_height * <span class="number">0.3</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            self.list_draggable_button[i].setText(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># 初始化表格 清空表格</span></span><br><span class="line">        <span class="keyword">global</span> table</span><br><span class="line">        table = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;NUM&quot;</span>)))):</span><br><span class="line">            table.append([<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">        self.table_widget.clearContents()</span><br><span class="line"></span><br><span class="line">        sql_tasks_table = <span class="string">&quot;SELECT * FROM tasks_table WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">        self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.tasks_table = py_MySQL.sql_query_table(sql_tasks_table, args)  # (class,image)</span></span><br><span class="line">        self.tasks_table = py_MySQL.query_sqlite(sql_tasks_table)  <span class="comment"># (class,image)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 展示图片,使用jpg出现问题，改变成为png，修复问题</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># for task_table in self.tasks_table:</span></span><br><span class="line">            <span class="comment">#     fout = open(</span></span><br><span class="line">            <span class="comment">#         str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;,</span></span><br><span class="line">            <span class="comment">#         &#x27;wb&#x27;)</span></span><br><span class="line">            <span class="comment">#     fout.write(task_table[&#x27;image&#x27;])</span></span><br><span class="line">            <span class="comment">#     fout.close()</span></span><br><span class="line">            <span class="keyword">for</span> task_table <span class="keyword">in</span> self.tasks_table:</span><br><span class="line">                <span class="keyword">if</span> task_table[<span class="string">&#x27;step&#x27;</span>] == stepNo + <span class="number">1</span>:</span><br><span class="line">                    self.img = task_table[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">                    qimg = QtGui.QImage.fromData(task_table[<span class="string">&#x27;image&#x27;</span>]).scaled(self.label_pic.width(),</span><br><span class="line">                                                                                      self.label_pic.height())</span><br><span class="line">                    photo = QtGui.QPixmap.fromImage(qimg)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># photo = QtGui.QPixmap(str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(</span></span><br><span class="line">                    <span class="comment">#     task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;).scaled(self.label_pic.width(),</span></span><br><span class="line">                    <span class="comment">#                                          self.label_pic.height())</span></span><br><span class="line">                    self.label_pic.setPixmap(photo)</span><br><span class="line">                    <span class="comment"># fp = open(str(task_table[&#x27;task&#x27;]) + config.get(&quot;screw&quot;, &quot;SOP_SEPARATOR&quot;) + str(</span></span><br><span class="line">                    <span class="comment">#     task_table[&#x27;step&#x27;]) + &#x27;.png&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line">                    <span class="comment"># self.img = fp.read()</span></span><br><span class="line">                    <span class="comment"># fp.close()</span></span><br><span class="line">                    <span class="comment"># 此处有bug ！！！</span></span><br><span class="line">                    <span class="comment"># 依次读出步骤信息</span></span><br><span class="line">                    self.edit_code.setText(task_table[<span class="string">&#x27;codes&#x27;</span>])</span><br><span class="line">                    self.textedit_keypoint.setText(task_table[<span class="string">&#x27;key_point_description&#x27;</span>])</span><br><span class="line">                    self.textedit_sequence.setText(task_table[<span class="string">&#x27;sequence&#x27;</span>])</span><br><span class="line">                    self.edit_product.setText(task_table[<span class="string">&#x27;product&#x27;</span>])</span><br><span class="line">                    self.edit_task.setText(task_table[<span class="string">&#x27;task&#x27;</span>])</span><br><span class="line">                    self.edit_step.setText(str(stepNo + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            print(e)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;图片不存在！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.skilled == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># self.cb_base_mode.setChecked(True)</span></span><br><span class="line"></span><br><span class="line">                sql_task_sequence = <span class="string">&quot;SELECT * FROM task_sequence WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># self.task_sequence = py_MySQL.sql_query_table(sql_task_sequence, args)  # (class,image)</span></span><br><span class="line">                self.task_sequence = py_MySQL.query_sqlite(sql_task_sequence)  <span class="comment"># (class,image)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(&quot;----------&#123;0&#125;------&quot;.format(self.task_sequence))</span></span><br><span class="line">                <span class="comment"># 模拟数据</span></span><br><span class="line">                fetched_step_data = []</span><br><span class="line">                <span class="keyword">for</span> task_sequence <span class="keyword">in</span> self.task_sequence:</span><br><span class="line">                    <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                    sequence = [task_sequence[<span class="string">&#x27;step&#x27;</span>], task_sequence[<span class="string">&#x27;screw_no&#x27;</span>], task_sequence[<span class="string">&#x27;screw_type&#x27;</span>],</span><br><span class="line">                                task_sequence[<span class="string">&#x27;screw_length&#x27;</span>], int(task_sequence[<span class="string">&#x27;screw_driver&#x27;</span>]) + <span class="number">1</span>,</span><br><span class="line">                                task_sequence[<span class="string">&#x27;torque&#x27;</span>],</span><br><span class="line">                                int(task_sequence[<span class="string">&#x27;position_x&#x27;</span>] * screen_width),</span><br><span class="line">                                int(task_sequence[<span class="string">&#x27;position_y&#x27;</span>] * screen_height)]</span><br><span class="line">                    fetched_step_data.append(sequence)</span><br><span class="line">                <span class="comment"># fetched_step_data = [[&#x27;SOP-403-1&#x27;, 1, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;500&#x27;, &#x27;300&#x27;],</span></span><br><span class="line">                <span class="comment">#                  [&#x27;SOP-403-1&#x27;, 2, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;700&#x27;, &#x27;300&#x27;],</span></span><br><span class="line">                <span class="comment">#                  [&#x27;SOP-403-1&#x27;, 3, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0.9&#x27;, &#x27;0&#x27;, &#x27;600&#x27;, &#x27;600&#x27;]]</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(fetched_step_data.__len__()):</span><br><span class="line">                    self.list_draggable_button[i].setText(str(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">                    self.list_draggable_button[i].setGeometry(int(fetched_step_data[i][<span class="number">6</span>]),</span><br><span class="line">                                                              int(fetched_step_data[i][<span class="number">7</span>]),</span><br><span class="line">                                                              <span class="number">30</span>,</span><br><span class="line">                                                              <span class="number">30</span>)</span><br><span class="line">                    self.list_draggable_button[i].setStyleSheet(STYLE_DRAGGABLE_BTN)</span><br><span class="line">                    table[i] = fetched_step_data[i]</span><br><span class="line">                self.refresh()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                filename = sys._getframe().f_code.co_filename</span><br><span class="line">                function = sys._getframe().f_code.co_name</span><br><span class="line">                lineno = sys._getframe().f_lineno</span><br><span class="line">                exception = str(e)</span><br><span class="line">                log.printing(filename, function, lineno, exception)</span><br><span class="line">                QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;导入螺丝钉信息失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_code_add</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获得输入框的内容</span></span><br><span class="line">        <span class="keyword">if</span> len(self.edit_code.text()) &gt;= <span class="number">8</span>:</span><br><span class="line">            self.codes = self.edit_code.text()[:<span class="number">8</span>]</span><br><span class="line">        <span class="comment"># print(self.codes)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mac_address</span>(<span class="params">self</span>):</span></span><br><span class="line">        mac_address = uuid.UUID(int=uuid.getnode()).hex[<span class="number">-12</span>:]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;:&quot;</span>.join([mac_address[e:e + <span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.edit_step.text().isdigit():</span><br><span class="line">                self.refresh()</span><br><span class="line">                self.product, self.task, self.step = self.edit_product.text(), self.edit_task.text(), self.edit_step.text()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 读出tasks_table、task_sequence信息</span></span><br><span class="line">                sql_tasks_table = <span class="string">&quot;SELECT count(*) FROM tasks_table WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                sql_task_sequence = <span class="string">&quot;SELECT count(*) FROM task_sequence WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                self.product, self.task, self.step, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                <span class="comment"># args = [self.product, self.task, self.step, 1]</span></span><br><span class="line">                <span class="comment"># self.tasks_table_count = py_MySQL.sql_query_table(sql_tasks_table, args)  # (class,image)</span></span><br><span class="line">                <span class="comment"># self.task_sequence_count = py_MySQL.sql_query_table(sql_task_sequence, args)  # (class,image)</span></span><br><span class="line">                self.tasks_table_count = py_MySQL.query_sqlite(sql_tasks_table)  <span class="comment"># (class,image)</span></span><br><span class="line">                self.task_sequence_count = py_MySQL.query_sqlite(sql_task_sequence)  <span class="comment"># (class,image)</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                res = QMessageBox.Yes</span><br><span class="line">                <span class="keyword">if</span> self.tasks_table_count[<span class="number">0</span>][<span class="string">&#x27;count(*)&#x27;</span>] != <span class="number">0</span> <span class="keyword">and</span> self.task_sequence_count[<span class="number">0</span>][<span class="string">&#x27;count(*)&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">                    res = QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤已存在，请确认是否覆盖步骤！&#x27;</span>, QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                               QMessageBox.Yes)</span><br><span class="line">                <span class="keyword">if</span> res == QMessageBox.Yes:</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 绑定 工控机 到数据库中</span></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    sql = <span class="string">&quot;update tasks_table set active=&#x27;%s&#x27; WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                    <span class="number">0</span>, self.product, self.task, self.step, <span class="number">1</span>)</span><br><span class="line">                    args = [[]]</span><br><span class="line">                    py_MySQL.update_sqlite(sql, args)</span><br><span class="line">                    sql = <span class="string">&quot;update task_sequence set active=&#x27;%s&#x27; WHERE product=&#x27;%s&#x27; AND task=&#x27;%s&#x27; AND step=&#x27;%s&#x27; AND active=&#x27;%s&#x27;;&quot;</span> % (</span><br><span class="line">                    <span class="number">0</span>, self.product, self.task, self.step, <span class="number">1</span>)</span><br><span class="line">                    args = [[]]</span><br><span class="line">                    py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                    current_row = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(table.__len__()):</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> str(table[i][<span class="number">1</span>]) == str(<span class="number">0</span>):</span><br><span class="line">                            current_row = current_row + <span class="number">1</span></span><br><span class="line">                    self.list_task_sequence = []</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">for</span> row <span class="keyword">in</span> range(current_row):</span><br><span class="line">                            data = []</span><br><span class="line">                            data.append(self.edit_task.text())</span><br><span class="line">                            <span class="keyword">for</span> col <span class="keyword">in</span> range((eval(config.get(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;COLUMN&quot;</span>)))):</span><br><span class="line">                                <span class="comment">#  [&quot;步骤&quot;, &quot;螺丝\n编号&quot;, &quot;螺丝\n型号&quot;, &quot;螺丝\n长度&quot;, &quot;螺丝刀\n型号&quot;, &quot;标准\n扭矩&quot;, &quot;坐标x&quot;, &quot;坐标y&quot;])  # 行表头</span></span><br><span class="line">                                <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == <span class="number">1</span> <span class="keyword">or</span> col == <span class="number">4</span>:  <span class="comment"># 步骤号、螺丝编号、螺丝刀型号</span></span><br><span class="line">                                    data.append(int(self.table_widget.item(row, col).text()))</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">6</span>:  <span class="comment"># x 坐标</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()) / screen_width)</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">7</span>:  <span class="comment"># y 坐标</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()) / screen_height)</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">2</span>:  <span class="comment"># 螺丝型号、标准转角</span></span><br><span class="line">                                    data.append(self.table_widget.item(row, col).text())</span><br><span class="line">                                <span class="keyword">elif</span> col == <span class="number">3</span> <span class="keyword">or</span> col == <span class="number">5</span>:  <span class="comment"># 标准扭矩</span></span><br><span class="line">                                    data.append(float(self.table_widget.item(row, col).text()))</span><br><span class="line">                            <span class="comment"># prin(&#x27;保存data&#x27;, data)</span></span><br><span class="line">                            self.list_task_sequence.append(data)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        print(e)</span><br><span class="line">                        filename = sys._getframe().f_code.co_filename</span><br><span class="line">                        function = sys._getframe().f_code.co_name</span><br><span class="line">                        lineno = sys._getframe().f_lineno</span><br><span class="line">                        exception = str(e)</span><br><span class="line">                        log.printing(filename, function, lineno, exception)</span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;请确认输入数据类型后点击保存步骤&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># csv_write.writerow(data)</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 自动识别精简模式</span></span><br><span class="line">                    <span class="comment"># if self.cb_base_mode.isChecked():</span></span><br><span class="line">                    <span class="keyword">if</span> self.list_task_sequence:</span><br><span class="line">                        skilled = <span class="number">1</span></span><br><span class="line">                        print(<span class="string">&#x27;精简模式&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">&#x27;不是精简模式&#x27;</span>)</span><br><span class="line">                        skilled = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    <span class="keyword">if</span> len(self.edit_code.text()) &gt;= <span class="number">8</span>:</span><br><span class="line">                        self.codes = self.edit_code.text()[:<span class="number">8</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 有条形码存入</span></span><br><span class="line">                        timestamp = str(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line">                        sql = <span class="string">&quot;REPLACE into tasks_table &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;(product, task, step, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;sequence, key_point_description, image, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;skilled, codes, mac_address, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;update_timestamp, active)&quot;</span> \</span><br><span class="line">                              <span class="string">&quot;values(?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?, ?, &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;?, ?);&quot;</span></span><br><span class="line">                        args = [[self.product, self.task, self.step,</span><br><span class="line">                                 self.sequence, self.keypoint,</span><br><span class="line">                                 self.img, skilled, self.codes,</span><br><span class="line">                                 self.mac_address, timestamp, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 有条形码存入</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(sql, args)</span></span><br><span class="line">                        py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># # 先删后添，有风险</span></span><br><span class="line">                        <span class="comment"># sql = &quot;DELETE FROM task_sequence WHERE product=%s AND task=%s AND step=%s;&quot;</span></span><br><span class="line">                        <span class="comment"># args = []</span></span><br><span class="line">                        <span class="comment"># arg = []</span></span><br><span class="line">                        <span class="comment"># arg.append(self.product)</span></span><br><span class="line">                        <span class="comment"># arg.append(self.task)</span></span><br><span class="line">                        <span class="comment"># arg.append(self.step)</span></span><br><span class="line">                        <span class="comment"># args.append(arg)</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(conn, sql, args)</span></span><br><span class="line">                        <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">                        sql = <span class="string">&quot;REPLACE into task_sequence &quot;</span> \</span><br><span class="line">                              <span class="string">&quot;(product, task, step, screw_no, screw_type, screw_length, screw_driver, torque, position_x, position_y, code, active)&quot;</span> \</span><br><span class="line">                              <span class="string">&quot;values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);&quot;</span></span><br><span class="line">                        args = self.list_task_sequence</span><br><span class="line">                        <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">                            arg.insert(<span class="number">0</span>, self.product)</span><br><span class="line">                            arg.append(self.codes)</span><br><span class="line">                            arg.append(<span class="number">1</span>)</span><br><span class="line">                            arg[<span class="number">6</span>] -= <span class="number">1</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(sql, args)</span></span><br><span class="line">                        py_MySQL.update_sqlite(sql, args)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># sql = &quot;DELETE FROM task_sequence WHERE step = %s AND screw_no = %s;&quot;</span></span><br><span class="line">                        <span class="comment"># args = []</span></span><br><span class="line">                        <span class="comment"># args.append(self.stepID)</span></span><br><span class="line">                        <span class="comment"># py_MySQL.update_table(conn, sql, args)</span></span><br><span class="line"></span><br><span class="line">                        self.codes = <span class="string">&quot;&quot;</span></span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤已新建！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">                        <span class="comment"># self.initUI()</span></span><br><span class="line">                        <span class="comment"># self.close()</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        print(e)</span><br><span class="line">                        filename = sys._getframe().f_code.co_filename</span><br><span class="line">                        function = sys._getframe().f_code.co_name</span><br><span class="line">                        lineno = sys._getframe().f_lineno</span><br><span class="line">                        exception = str(e)</span><br><span class="line">                        log.printing(filename, function, lineno, exception)</span><br><span class="line">                        QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤新建失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;您输入的步骤不是整数，请重新输入！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            filename = sys._getframe().f_code.co_filename</span><br><span class="line">            function = sys._getframe().f_code.co_name</span><br><span class="line">            lineno = sys._getframe().f_lineno</span><br><span class="line">            exception = str(e)</span><br><span class="line">            log.printing(filename, function, lineno, exception)</span><br><span class="line">            QMessageBox.question(self, <span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;步骤新建失败！&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># file = table[0][0] + &#x27;.csv&#x27;</span></span><br><span class="line">        <span class="comment"># if not os.path.exists(file):</span></span><br><span class="line">        <span class="comment">#     reply = QMessageBox.question(self, &#x27;提示&#x27;, &#x27;请确认是否保存?&#x27;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span></span><br><span class="line">        <span class="comment">#     if reply == QMessageBox.Yes:</span></span><br><span class="line">        <span class="comment">#         self.save()</span></span><br><span class="line"></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = EditorWindow()</span><br><span class="line">    ex.showFullScreen()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>screw</tag>
      </tags>
  </entry>
</search>
